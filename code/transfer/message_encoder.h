/********************************************************************
**       This head file is generated by program,                   **
**            Please do not edit it directly.                      **
********************************************************************/
/*       Version Number: 1          */
#ifndef MESSAGEENCODER_H_INCLUDE_VERSION_1
#define MESSAGEENCODER_H_INCLUDE_VERSION_1
#include <vector>
#include <string>
#include <map>
#include "sdu.h"
namespace Json {  class Value; }
#define VERSION_PROTOCOL 165
/*Defines Begin*/
#define VERSION_MAJOR 0
#define VERSION_MINOR 7
#define VERSION_REVISION 3
#define ENCRYPT_MAGIC_NUMBER 20990103
#define PORT 443
#define PORT2 8000
#define MAX_SQLTXT_LEN 81920
#define MAX_SQLTXT_SAVE_LEN 16777215
#define NET_MSG_BUFFER_LEN 65535
#define SESSION_KEY_LEN 33
#define NET_STATE_INIT 0
#define NET_STATE_CREATE 1
#define NET_STATE_CLOSED 2
#define NET_STATE_RECONNECT 3
#define NET_STATE_CONNECTED 4
#define HANDLER_STATE_INIT 0
#define HANDLER_STATE_CONNECTED 1
#define HANDLER_STATE_SEND_INFO_REQ 2
#define HANDLER_STATE_SEND_INFO_ACK 3
#define HANDLER_STATE_SEND_ACTIATE_REQ 4
#define HANDLER_STATE_SEND_ACTIATE_ACK 5
#define SERVER_TYPE_GATE 1
#define SERVER_TYPE_GAME 2
#define SERVER_TYPE_CENTER 3
#define SERVER_TYPE_TIMER 4
#define SERVER_TYPE_FLASH 5
#define GAMESVR_TYPE_INDIE 1
#define GAMESVR_TYPE_CROSS 2
#define CENTERSVR_TYPE_MASTER 1
#define CENTERSVR_TYPE_WORKER 2
#define MSG_NET_ACCEPT 0
#define MSG_NET_CONNECT 1
#define MSG_NET_CLOSE 2
#define MSG_NET_ERROR 3
#define DUNGEON_JUMP_TRIGGER 1
#define DUNGEON_JUMP_TEAM 2
#define DUNGEON_JUMP_POS 3
#define DUNGEON_JUMP_PLAYER 4
#define RES_CONFIG_PATH "../res/config/"
#define RES_SDB_PATH "../res/sdb/"
#define RES_PATH "../res/"
#define RES_MAP_PATH "../res/scene/map/"
#define RES_DESIGN_PATH "../res/design/"
#define RES_SKILL_PATH "../res/skill/"
#define RES_BUFF_PATH "../res/buff/"
#define SKILL_LIST_FILE "skilllist.txt"
#define BUFF_LIST_FILE "bufflist.txt"
#define CENTER_CONFIG_FILE "center_config.xml"
#define CROSS_CENTER_CONFIG_FILE "cross_center_config.xml"
#define DUNGEON_CONFIG_FILE "dungeon_config.xml"
#define GAMESVR_CONFIG_FILE "gamesvr_config.xml"
#define FORMULA_CONFIG_FILE "formula.xml"
#define LEVELUP_CONFIG_FILE "levelup.xml"
#define NAMELIMITE_CONFIG_FILE "word.txt"
#define GUILD_CONFIG_FILE "guild.xml"
#define ACTIVITY_CONFIG_FILE "activity.xml"
#define SPECIAL_ACTIVITY_CONFIG_FILE "special_activity.xml"
#define SYNTHETIZE_CONFIG_FILE "synthetize.xml"
#define VIGOR_CONFIG_FILE "vigor.xml"
#define VIP_REWARD_CONFIG_FILE "vip_reward.xml"
#define VIP_CARD_CONFIG_FILE "vip_card.xml"
#define VIP_CONFIG_FILE "vip_privilege.xml"
#define VIP_GIFT_CONFIG_FILE "vip_gift.xml"
#define HOROSCOPE_CONFIG_FILE "horoscope.xml"
#define ITEM_CONFIG_FILE "item.xml"
#define SALE_CONFIG_FILE "sale.xml"
#define HONOR_SALE_CONFIG_FILE "honor_sale.xml"
#define GUILD_SALE_CONFIG_FILE "guild_sale.xml"
#define BIND_MONEY_POINT_SALE_CONFIG_FILE "bind_money_point_sale.xml"
#define MALL_CONFIG_FILE "mall.xml"
#define ONLINE_REWARD_CONFIG_FILE "online_reward.xml"
#define SKILL_CONFIG_FILE "skill.xml"
#define SKILL_LEVELUP_TABLE_FILE "skill_levelup.xml"
#define TASK_GAME_CONFIG_FILE "task_game.xml"
#define MONSTER_CONFIG_FILE "monster.xml"
#define NPC_CONFIG_FILE "npc.xml"
#define RIDE_PET_CONFIG_FILE "ride_pet.xml"
#define BATTLE_PET_CONFIG_FILE "battle_pet.xml"
#define FOLLOW_PET_CONFIG_FILE "follow_pet.xml"
#define FOLLOW_PET_LEVEL_CONFIG_FILE "follow_pet_level.xml"
#define FOLLOW_PET_CONST_CONFIG_FILE "follow_petconst.xml"
#define FOLLOW_PET_GAIN_CONFIG_FILE "pet_gain.xml"
#define RIDE_PET_LEVEL_CONFIG_FILE "ride_pet_level.xml"
#define RIDE_PET_RIDEGAIN_CONFIG_FILE "ride_pet_gain.xml"
#define FOLLOW_PET_SKILL_CONFIG_FILE "followpetskill.xml"
#define RIDE_PET_RIDE_CONST_CONFIG_FILE "ride_petconst.xml"
#define BOSS_CONFIG_FILE "boss.xml"
#define TEAMDUNGEON_CONFIG_FILE "team_dungeon.xml"
#define BATTLE_PLAYER_CONFIG_FILE "battle_player.xml"
#define DUNGEON_GAIN_CONFIG_FILE "dungeon_gain.xml"
#define ASHURA_CONFIG_FILE "ashura.xml"
#define ANSWER_FILE "answer.xml"
#define SIGN_GAIN_CONFIG_FILE "sign_gain.xml"
#define SIGN_MAKEUP_CONFIG_FILE "sign_makeup.xml"
#define LOGIN_GAIN_CONFIG_FILE "login_gain.xml"
#define MINING_CONFIG_FILE "mining.xml"
#define WORLD_BOSS_CONFIG_FILE "world_boss.xml"
#define MONSTER_DOOR_CONFIG_FILE "monster_door.xml"
#define ADVENTURE_CONFIG_FILE "adventure.xml"
#define WING_CONFIG_FILE "wing.xml"
#define ACHIVE_CONFIG_FILE "achieve.xml"
#define TITLE_CONFIG_FILE "title.xml"
#define TREASURY_CONFIG_FILE "treasury.xml"
#define GOLDTREE_CONFIG_FILE "goldtree.xml"
#define PLAYER_DOOR_REWARD_CONFIG_FILE "player_door_reward.xml"
#define ACTIVITY_REGULAR_CONFIG_FILE "activity_regular.xml"
#define ACTIVITY_REWARD_CONFIG_FILE "activity_reward.xml"
#define DAY_INVESTMENT_CONFIG_FILE "day_investment.xml"
#define LEVEL_INVESTMENT_CONFIG_FILE "level_investment.xml"
#define SKILL_ATTACK_CONFIG_FILE "skill_attack.xml"
#define PASSIVE_SKILL_CONFIG_FILE "passive_skill.xml"
#define AUTO_FIGHT_CONFIG_FILE "auto_fight.xml"
#define SYSTEM_SETTING_CONFIG_FILE "system_setting.xml"
#define VOID_FIELD_SETTING_CONFIG_FILE "void_field_setting.xml"
#define SERVER_PUBLIC_FILE "public.xml"
#define MAIL_TITLE_FILE "mail_title.xml"
#define PROTECT_SOUL_FILE "protect_soul.xml"
#define COMMON_REWARD_FILE "common_reward.xml"
#define DANCE_FILE "dance.xml"
#define ASHURA_KILL_RANK_REWARD_FILE "ashura_kill_rank_reward.xml"
#define ASHURA_DEAD_RANK_REWARD_FILE "ashura_dead_rank_reward.xml"
#define LIVENESS_CONFIG_FILE "liveness.xml"
#define TOWER_DEFENCE_FILE "tower_defence.xml"
#define GROUP_PK_FILE "group_pk.xml"
#define FACTION_PK_FILE "faction_pk.xml"
#define CAPTURE_FLAG_FILE "capture_flag.xml"
#define BUFF_FILE "buff.xml"
#define EVERYDAY_TIPS_FILL "every_day_tips.xml"
#define CITY_SURVIVAL_CONFIG_FILE "city_survival.xml"
#define STONE_TURN_GOLD_CONFIG_FILE "stone_turn_gold.xml"
#define LIMIT_BUY_CONFIG_FILE "limit_buy.xml"
#define SINGLE_ANSWER_CONFIG_FILE "single_answer.xml"
#define SEVEN_DAYS_TARGET "seven_days_target.xml"
#define EQUIP_LIGHTING "equip_lighting.xml"
#define GUILD_TASK "guild_task.xml"
#define GUILD_SCIENCE_FILE "guild_science.xml"
#define FISHIONS_CONFIG_FILE "fashions.xml"
#define FISHIONS_TREASURE_CONFIG_FILE "fashions_treasure.xml"
#define FASHIONS_TREASURE_PACKAGE_FILE "fashions_treasure_package.xml"
#define SWORD_CONFIG_FILE "sword.xml"
#define ZOMBIE_FILE "zombie.xml"
#define FISHIONS_SALE_FILE "fashion_sale.xml"
#define VOID_FIELD_FILE "void_field.xml"
#define VOID_FIELD_SOLO_FILE "void_field_solo.xml"
#define BRAVE_HEART_CONFIG_FILE "brave_heart.xml"
#define GM_CONFIG_FILE "gm_config.xml"
#define GIFTSCODE_CONFIG_FILE "giftcode_config.xml"
#define FIELD_BOSS_FILE "field_boss.xml"
#define MULTISERVER_BATTLE_FILE "multi_server_battle_info.xml"
#define SHORCUT_CONFIG_FILE "shorcut.xml"
#define WELCOMEREWARD_CONFIG_FILE "welcome.xml"
#define PROTECT_CONFIG_FILE "protect.xml"
#define CHAOS_FACTION_FILE "chaos_faction.xml"
#define BAG_GRID_OPEN_COST_FILE "bag_grid_open_cost.xml"
#define PAY_POINT_LOTTERY_FILE "pay_point_lottery.xml"
#define VIP_ONLY_DUNGEON_FILE "vip_only_dungeon.xml"
#define OFF_LINE_VIGOR "off_line_vigor.xml"
#define DONATE "donate.xml"
#define GAME_COMMON_SETTING "game_common_setting.xml"
#define BATTLE_POWER_FILE "battle_power.xml"
#define FASHION_SKILL_FILE "fashion_skill.xml"
#define EGG_FILE "egg.xml"
#define BUY_CHEAP_CONFIG_FILE "buy_cheap.xml"
#define DAILY_DRAW_FASHION_FILE "daily_draw_fashion.xml"
#define ACTIVATION_PREFIX "doingame"
#define MAX_CHAT_TOKEN_LEN 128
#define MAX_CHAT_MSG_LEN 1024
#define MAX_ACTIVE_CODE_LEN 128
#define MAX_HP_LEN 2000000000
#define BROADCAST_PLAYER_ID 0xFFFFFFFFFFFFFFFF
#define DAY_SECONDS 86400
#define WEEK_SECONDS 604800
#define HOUR_SECONDS 3600
#define MINUTES_SECONDS 60
#define DB_OPT_INSERT 1
#define OPT_INIT_FLAG 1
#define OPT_ADD_FLAG 2
#define OPT_DEL_FLAG 3
#define OPT_UPDATE_FLAG 4
#define RIGHT_FLAG_GM 1
#define RIGHT_FLAG_FORBID_LOGIN 2
#define RIGHT_FLAG_FORBID_CHAT 4
#define RIGHT_FLAG_GM_JUMP_DUNGEON 8
#define RIGHT_FLAG_GM_NO_COOLDOWN 16
#define ENEMY_FLAG_ATTACK 1
#define ENEMY_FLAG_FIGHTBACK 2
#define RENAMED_CARD_ID 542
#define NOTIFY_LIVENESS 0
#define NOTIFY_DAILY 1
#define NOTIFY_PROTECT 2
#define NOTIFY_CRUSADE 3
#define NOTIFY_PLAYER_DOOR 4
#define NOTIFY_TREASURE 5
#define NOTIFY_GOLDTREE 6
#define NOTIFY_MONSTER_DOOR 8
#define NOTIFY_PROTECT_SOUL 9
#define NOTIFY_STONE_TURN_GOLD 10
#define NOTIFY_RIDE_SUMMON 11
#define NOTIFY_SIGN 12
#define NOTIFY_BABEL 13
#define NOTIFY_RIDE_PET_TRAINING 14
#define NOTIFY_SINGLE_ANSWER 15
#define NOTIFY_7TH_LOGIN 16
#define NOTIFY_7TH_GOAL 17
#define NOTIFY_ZOMBOE 18
#define NOTIFY_PRINCESS 19
#define NOTIFY_BRAVEHEART 20
#define NOTIFY_INVESTMENT 21
#define NOTIFY_FESTIVAL 22
#define NOTIFY_DONATE 23
#define NOTIFY_AUTUMN 24
#define NOTIFY_MULTISERVER_BATTLE 25
#define NOTIFY_VIP_ONLY_DUNGEON 26
#define NOTIFY_REWARD_EVERY_GIFT 27
#define NOTIFY_ALL 28
#define NOTIFY_REWARD_LIVENESS 0
#define NOTIFY_REWARD_INVESTMENT 1
#define NOTIFY_REWARD_ACTIVITIES 2
#define NOTIFY_REWARD_MICRO_CLIENT 3
#define NOTIFY_REWARD_SIGN 4
#define NOTIFY_REWARD_7TH_LOGIN 5
#define NOTIFY_REWARD_ONLINE 6
#define NOTIFY_REWARD_PLAYER_DOOR 7
#define NOTIFY_REWARD_GUILD_TWILIGHT_OPEN 8
#define NOTIFY_REWARD_GUILD_CITY_OPEN 9
#define NOTIFY_REWARD_GUILD_BOSS_OPEN 10
#define NOTIFY_REWARD_7TH_GOAL 11
#define NOTIFY_REWARD_VIP 12
#define NOTIFY_REWARD_ACTIVITY_DAILY_RECHARGE 13
#define NOTIFY_REWARD_FESTIVAL 14
#define NOTIFY_REWARD_AUTUMN 15
#define NOTIFY_REWARD_RECHARGE_RANK 16
#define NOTIFY_REWARD_MULTISERVER_BATTLE 17
#define NOTIFY_REWARD_ALL 18
#define PLAYER_VIGOR_MAX 50
#define MAIL_TITLE_ID_MALL_BUY 301
#define MAIL_TITLE_ID_MALL_GIVE 302
#define MAIL_TITLE_ID_OFFER_VIP 303
#define MAIL_TITLE_ID_BATTLE_POWER_RANKING_ACTIVITY 100
#define MAIL_TITLE_ID_DAILY_RECHARGE_ACTIVITY 101
#define MAIL_TITLE_ID_REWARD_COMPENSATION 102
#define MAIL_TITLE_ID_CITY_SURVIVAL_REWARD 103
#define MAIL_TITLE_ID_VOID_FIELD_CHESTS 104
#define MAIL_TITLE_ID_VOID_FIELD_BOSS_TOPONE 105
#define MAIL_TITLE_ID_VOID_FIELD_BOSS_TOPONE_GUILD 106
#define MAIL_TITLE_ID_VOID_FIELD_BOSS_KILLER 107
#define MAIL_TITLE_ID_OFFLINE_BATTLE 201
#define MAIL_TITLE_ID_ASHURA_REWARD 202
#define MAIL_TITLE_ID_DAY_INVESTED 204
#define FOLLOW_PET_ATTACK 4101
#define FOLLOW_PET_SKILL_BEGIN 4100
#define FOLLOW_PET_SKILL_END 4199
#define FASHION_SKILL_BEGIN 8100
#define FASHION_SKILL_END 8199
#define BASE_RATE_NUM 10000
#define MILL_SECONDE 1000
#define MOVE_FORSEE_TIME 250
#define PLOT_DUNGEON_FLAG_LEN 64
#define PLOT_DUNGEON_SCORE_LEN 256
#define SOUL_DUNGEON_FLAG_LEN 1
#define FIRST_PROTECT_SOUL_DUNGEON_ID 5501
#define SOUL_DUNGEON_MAX_NUM 5
#define TEAM_DUNGEON_FLAG_LEN 64
#define DUNGEON_FLAG_LEN 2
#define DUNGEON_SCORE_LEN 4
#define B_USE__FREE_FLAG_LEN 64
#define FOLLOW_PET_TYPE_MASK 100
#define DUNGEON_CLASS_NONE_ID 0
#define DUNGEON_CLASS_WORLD_ID 1
#define DUNGEON_CLASS_PLOT_ID 2
#define DUNGEON_CLASS_SOUL_ID 3
#define DUNGEON_CLASS_DAILY_ID 4
#define CITY_MAIN_CITY_MAP 1001
#define CITY_HOME_MAP 1002
#define CITY_FIRST_MAP 1003
#define DUNGEON_PVP_MAP 4001
#define ANSWER_TOPRANK_NUM 10
#define WORLDBOSS_SAVE_TYPE_ID 1
#define GUILDBOSS_SAVE_TYPE_ID 2
#define VOID_FIELD_BOSS_SAVE_TYPE_ID 3
#define VOID_FIELD_SOLO_BOSS_SAVE_TYPE_ID 4
#define SKILL_SLOT_Q 1
#define SKILL_SLOT_W 2
#define SKILL_SLOT_E 3
#define SKILL_SLOT_R 4
#define SKILL_SLOT_ML 5
#define SKILL_SLOT_MR 6
#define SKILL_SLOT_WHOLE 6
#define SOLDIER_TALENT_WHOLE 4
#define SKILL_FOLLOW_PET_INITIATIVE 200
#define PAY_STATE_INIT 1
#define PAY_STATE_SUCCEED 2
#define PAY_TYPE_KUNLUN 1
#define PAY_TYPE_DONGYI 2
#define PAY_TYPE_GMT_APPROVAl 3
#define PAY_TYPE_API_TEST 4
#define TRADE_STATE_INIT 1
#define TRADE_STATE_PAY_SUCCEED 2
#define TRADE_STATE_PAY_FAILED 3
#define TRADE_STATE_DELIVER_BAG 4
#define TRADE_STATE_DELIVER_MAIL 5
#define MALL_NORMAL_SELL_TYPE 1
#define MALL_NOT_SELL_TYPE 2
#define MALL_LIMIT_SELL_TYPE 3
#define VIP_LIMIT_SELL_TYPE 5
#define BIND_MONEY_SELL_TYPE 1
#define MALL_SELL_TYPE 2
#define VIP_SELL_TYPE 3
#define MONEY_TYPE_MONEY_POINT 1
#define MONEY_TYPE_GOLD 2
#define MALL_SERVICE_ID_MIN_VALUE 25000
#define MALL_SERVICE_ID_MAX_VALUE 29999
#define LOGIN_MODE_TEST 1
#define LOGIN_MODE_AF 2
#define LOGIN_MODE_KUNLUN 3
#define LOGIN_MODE_KUNLUN_CDKEY 4
#define LOGIN_MODE_360 5
#define LOGIN_MODE_9377 6
#define LOGIN_MODE_KUGOU 7
#define LOGIN_MODE_TW 8
#define PUSH_360_LEVEL 1
#define PUSH_360_CHAT 2
#define PUSH_KUGOU_CREATE_CHARACTER 3
#define PUSH_TW_CHAT 4
#define TRIGGER_CHANGE_SCENE 1
#define TRIGGER_TOUCH_STONE 2
#define TRIGGER_ACTIVATE_MOVIE 3
#define TRIGGER_JUMP_DUNGEON 4
#define TRIGGER_REGULAR_EVENT 5
#define QUICK_ADD_FRIEND_COUNT 10
#define MAX_FRIEND_COUNT 200
#define PLAYER_PK_DUNGEON_ID 4100
#define MAX_DUNGEON_TEAM_MEMBER 3
#define MAX_WORLD_TEAM_MEMBER 3
#define MAX_PK_TEAM_MEMBER 2
#define TEAM_TYPE_DUNGEON 1
#define TEAM_TYPE_PK 2
#define TEAM_TYPE_WORLD 3
#define TEAM_PAGE_SHOW_NUM 1000
#define TEAM_FLAG_DISPLAY 1
#define TEAM_FLAG_NOENTER 2
#define TEAM_DUNGEON_EVNET_LEAVE 1
#define TEAM_DUNGEON_EVNET_DEAD 2
#define TEAM_DUNGEON_EVNET_BUYRELIVE 3
#define VOID_FIELD_TYPE_NORMAL 0
#define VOID_FIELD_TYPE_BOSS 1
#define VOID_FIELD_TYPE_MOONLESS 2
#define VOID_FIELD_TYPE_MAX 3
#define VOID_FIELD_SOLO_TYPE_MAX 2
#define VOID_FIELD_BATTLE_DEFEAT 1
#define VOID_FIELD_BATTLE_KILLED 2
#define BUY_INTO_SOUL_DUNGEON_NUM 1
#define START_SOUL_RADIS 1
#define FINSHT_SOUL_RADIS 2
#define INIT_SOUL_RADIS 3
#define PAWN_TYPE_MONSTER 1
#define PAWN_TYPE_NPC 2
#define MARQUEE_EQUIP_TYPE 1
#define MARQUEE_ITEM_TYPE 2
#define MARQUEE_RIDE_COLLECT_TYPE 3
#define MARQUEE_PLAYERNAME_TYPE 4
#define MARQUEE_FOLLOW_PET_TYPE 5
#define MARQUEE_FACTION_TYPE 6
#define MARQUEE_RIDE_TYPE 7
#define MARQUEE_WING_TYPE 8
#define MARQUEE_VOID_FIELD_TYPE 9
#define MARQUEE_FASHION_TYPE 10
#define MARQUEE_QUALITY_TYPE 11
#define MARQUEE_VOID_FIELD_SOLO_TYPE 12
#define MARQUEE_OPEN_FOLLOW_PET 1
#define MARQUEE_POPWER_FULL_LEVEL 2
#define MARQUEE_SPRITE_FULL_LEVEL 4
#define MARQUEE_AGILITY_FULL_LEVEL 3
#define MARQUEE_PHYSIC_FULL_LEVEL 5
#define MARQUEE_POPWER_PRO_ALL 6
#define MARQUEE_ASHURA_KILL 7
#define MARQUEE_LAST_KILL 8
#define MARQUEE_GUARD_MAX_QUALITY 9
#define MARQUEE_GUILD_FIRST 10
#define MARQUEE_ANSWER_ALL 11
#define MARQUEE_GUILD_LAST_KILL 12
#define MARQUEE_GUILD_MAX_QUALITY 13
#define MARQUEE_OFFLINE_RANK 14
#define MARQUEE_GUILD_MONSTER 15
#define MARQUEE_BRONZE_HOROSCOPE 16
#define MARQUEE_SILVER_HOROSCOPE 17
#define MARQUEE_GOLD_HOROSCOPE 18
#define MARQUEE_GET_QUALITY_RIDE 19
#define MARQUEE_GET_BLUE_RIDE 20
#define MARQUEE_EQUIP_GEM_CRIT 21
#define MARQUEE_SYNTHESIS_GEM 22
#define MARQUEE_EQUIP_LEVE_UP_STAR 23
#define MARQUEE_EQUIP_LEVE_UP_QUALIYT 25
#define MARQUEE_CITY_FIGHT_OCCUPY_CITY 26
#define MARQUEE_WING_LEVE_UP 27
#define MARQUEE_VOID_FIELD 29
#define MARQUEE_FASHIONS 30
#define MARQUEE_FIRST_RECHARGE 31
#define MARQUEE_LOGIN_RECEIVE 32
#define MARQUEE_INVWSTMENT 33
#define MARQUEE_LEVEL_INVWSTMENT 34
#define MARQUEE_ADD_RECHARGE 35
#define MARQUEE_DAY_RECHARGE 36
#define MARQUEE_SIGN_2_DAY 37
#define MARQUEE_SIGN_7_DAY 38
#define MARQUEE_SIGN_28_DAY 39
#define MARQUEE_VIP_LIMITED_PURCHASING 40
#define MARQUEE_VOID_BOSS_LAST_KILL 41
#define MARQUEE_VOID_BOSS_ESCAPE 42
#define MARQUEE_DONATE_TITLE 43
#define MARQUEE_GET_SPECIAL_RIDE 60
#define MARQUEE_GET_SPECIAL_PET_TIMO 80
#define MARQUEE_GET_FASHION_SKILL 81
#define MARQUEE_RANK_BATTLE_POWER 101
#define MARQUEE_RANK_HOROSCOPE 102
#define MARQUEE_RANK_GAME_POINT 103
#define MARQUEE_RANK_OFFLINE_BATTLE 104
#define MARQUEE_RANK_ASHURA 105
#define MARQUEE_RANK_GUILD 106
#define MARQUEE_RANK_MONEY_POINT_PAY 107
#define MARQUEE_RANK_MONEY_POINT_TRADE 108
#define MARQUEE_RANK_FOLLOW_PET 109
#define MARQUEE_RANK_RIDE_PET 110
#define MARQUEE_MONSTER_DOOR 200
#define MARQUEE_FACTION_PK 301
#define MARQUEE_VIP 302
#define MARQUEE_ASHURA_START_ANNOUCE 303
#define MARQUEE_PAY_POINT_LOTTERY 304
#define MARQUEE_EGG 305
#define MESSAGE_NTF_GUILD_ENTER_CITY_FIGHT 1
#define MESSAGE_NTF_GUILD_LEAVE_CITY_FIGHT 2
#define MESSAGE_NTF_PLAYER_ENTER_CITY_FIGHT 3
#define MESSAGE_NTF_PLAYER_LEAVE_CITY_FIGHT 4
#define MESSAGE_NTF_CITY_FIGHT_TIME_SCORE 5
#define MESSAGE_NTF_PLAYER_ENTER_CITY_SURVIVAL 6
#define MESSAGE_NTF_PLAYER_LEAVE_CITY_SURVIVAL 7
#define MESSAGE_NTF_PLAYER_DEAD_IN_CITY_SURVIVAL 8
#define MESSAGE_NTF_CAPTURE_ONE_FLAG 9
#define MESSAGE_NTF_PLAYER_LEAVE_CAPTURE_FLAG 10
#define MESSAGE_NTF_PLAYER_ENTER_CAPTURE_FLAG 11
#define MESSAGE_NTF_CAPTURE_FOUR_FLAG 12
#define MESSAGE_NTF_CAPTURE_FLAG_KILL 13
#define SOLDIER_LIST_INITIAL_NUM 4
#define SOLDIER_LIST_MONEY_NUM 3
#define SOLDIER_LIST_VIP_NUM 2
#define INVALID_GRID_POS -1
#define ITEM_BAG_MAX_GRID_NUM 160
#define ITEM_STORE_MAX_GRID_NUM 160
#define ITEM_TYPE_EQUIP 1
#define ITEM_TYPE_CONSUME 2
#define ITEM_TYPE_MATERIAL 3
#define ITEM_TYPE_STONE 4
#define MAX_GAMEPOINT_NUM 2000000000
#define MAX_MONEYPOINT_NUM 2000000000
#define MAX_BIND_MONEYPOINT_NUM 2000000000
#define MAX_SOULPOINT_NUM 2000000000
#define MAX_HONORPOINT_NUM 2000000000
#define MAX_GUILDPOINT_NUM 2000000000
#define MAX_BATTLE_SOUL_POINT_NUM 2000000000
#define MAX_STAR_SOUL_POINT_NUM 2000000000
#define MAX_GROWTH_POINT_NUM 2000000000
#define MAX_GUILD_SCORE_NUM 2000000000
#define MAX_CURRENCY_NUM 2000000000
#define CHAT_INTERVAL_TIME 2
#define CHAT_THRESHOLD_TIME 15
#define DAILY_VIP_TREASURE 7011
#define MAX_INCARNATION_NUM 2000000000
#define MAX_VOID_FIELD_CHESTS_NUM 2000000000
#define BUY_REASON_NORMAL 1
#define BUY_REASON_AUTO 2
#define REWARD_REASON_UNKNOWN 0
#define REWARD_REASON_GM 1
#define REWARD_REASON_USE_ITEM 2
#define REWARD_REASON_CLEAR_DUNGEON 3
#define REWARD_REASON_COMPLETE_TASK 4
#define REWARD_REASON_RACING 5
#define REWARD_REASON_MINING 6
#define REWARD_REASON_RIDE_PET 7
#define REWARD_REASON_ASHURAN 8
#define REWARD_REASON_WORLD_BOSS 9
#define REWARD_REASON_ACHIVE 10
#define REWARD_REASON_TRADE_ORDER 11
#define REWARD_REASON_WING 12
#define REWARD_REASON_RESURGENCE 13
#define REWARD_REASON_ONLINE_REWARD 14
#define REWARD_REASON_NPC_BUY 15
#define REWARD_REASON_HONOR_BUY 16
#define REWARD_REASON_GUILD_BUY 17
#define REWARD_REASON_RAIDS_DUNGEON 18
#define REWARD_REASON_DAY_INVESTMENT 19
#define REWARD_REASON_LEVEL_INVESTMENT 20
#define REWARD_REASON_GUILD_RAND_TURNTABLE 21
#define REWARD_REASON_GUILD_MEMBER_TURNTABLE 22
#define REWARD_REASON_GUILD_REWRAD_PERSONAL_WELFARE 23
#define REWARD_REASON_GUILD_BUY_MEMBER_TURNTABLE 24
#define REWARD_REASON_GUILD_REWARD_VIGOR 25
#define REWARD_REASON_GUILD_BUY_GUILD_POINT 26
#define REWARD_REASON_SUB_DUNGEON_RAIDS_TIME 27
#define REWARD_REASON_RAIDS_SOUL_DUNGEON 28
#define REWARD_REASON_CLEAR_TEAM_DUNGEON 29
#define REWARD_REASON_UPGRADE_JEWEL 30
#define REWARD_REASON_SKILL 31
#define REWARD_REASON_PASSIVE_SKILL 32
#define REWARD_REASON_RAIDS_BABEL 33
#define REWARD_REASON_FOLLOW_PET 34
#define REWARD_REASON_HOROSCOPE 35
#define REWARD_REASON_EQUIP_LEVEL_UP 36
#define REWARD_REASON_RAIDS_MONSTER_DOOR 37
#define REWARD_REASON_RESET_MONSTER_DOOR 38
#define REWARD_REASON_GUILD_CRUSADE_MONSTER 39
#define REWARD_REASON_EQUIP_START_LEVE 40
#define REWARD_REASON_VIP_BUY 41
#define REWARD_REASON_RIDE_ABSORB 42
#define REWARD_REASON_ACTIVITY_REWARD 43
#define REWARD_REASON_LEVEL_ACTIVITY 44
#define REWARD_REASON_GUILD_BOSS_EXP 45
#define REWARD_REASON_GOLDTREE_BUY_COUNT 46
#define REWARD_REASON_TREASURY_BUY_COUNT 47
#define REWARD_REASON_BATTLE_POWER_RANKING_ACTIVITY 48
#define REWARD_REASON_EQUIP_START_CD 49
#define REWARD_REASON_EQUIP_QUALITY 50
#define REWARD_REASON_PLAYER_DOOR_BUY_CHALLENGE_COUNT 51
#define REWARD_REASON_PLAYER_DOOR_KILL_CD 52
#define REWARD_REASON_FIRST_TIME_RECHARGE_ACTIVITY 53
#define REWARD_REASON_DAILY_RECHARGE_ACTIVITY 54
#define REWARD_REASON_UPGRADE_WING_ACTIVITY 55
#define REWARD_REASON_BABEL_RESET 56
#define REWARD_REASON_ANSWER_DOUBLE_NUM 57
#define REWARD_REASON_CREATE_GUILD 58
#define REWARD_REASON_SIGN_MAKEUP 59
#define REWARD_REASON_BUFF 60
#define REWARD_REASON_MICRO_CLIENT_ACTIVITY 61
#define REWARD_REASON_GIFT 62
#define REWARD_REASON_TASK_DAILY_RESET 63
#define REWARD_REASON_TASK_GUARD_BUY 64
#define REWARD_REASON_CHAPTER_ALL_S 65
#define REWARD_REASON_BIND_MONEY_POINT_BUY 66
#define REWARD_REASON_TEAM_DUNGEON_TIMES 67
#define REWARD_REASON_ANSWER 68
#define REWARD_REASON_LIVENESS 69
#define REWARD_REASON_SYNTHETIZE 70
#define REWARD_REASON_SINGLE_ANSWER_CD_TIME 71
#define REWARD_REASON_GAIN_BACK_RESOURCE 72
#define REWARD_REASON_GAIN_BACK_RESOURCE_ALL 73
#define REWARD_REASON_VIP_GIFT 74
#define REWARD_REASON_MAIL_ATTACH 75
#define REWARD_REASON_DISMANT_JEWEL 76
#define REWARD_REASON_FOLLOW_PET_LEVEL_UP 77
#define REWARD_REASON_FOLLOW_PET_SWALLOW 78
#define REWARD_REASON_RIDE_NO_CATCH 79
#define REWARD_REASON_SELL_ITEM 80
#define REWARD_REASON_PLAYER_DOOR 81
#define REWARD_REASON_TREASURY 82
#define REWARD_REASON_CITY_FIGHT 83
#define REWARD_REASON_CITY_SURVIVAL 84
#define REWARD_REASON_PROTECT_SOUL_NUM 85
#define REWARD_REASON_SUB_PROTECT_SOUL_TIME 87
#define REWARD_REASON_STONE_TURN_GAMEPOINT 88
#define REWARD_REASON_GOLDTREE 89
#define REWARD_REASON_THREASURY 90
#define REWARD_REASON_FASHION 91
#define REWARD_REASON_TD 92
#define REWARD_REASON_JEWEL_LEVEL_UP 93
#define REWARD_REASON_JEWEL_SYNTHETIZE 94
#define REWARD_REASON_CONSUME_USE_ITEM 95
#define REWARD_REASON_GUILD_DONATE 96
#define REWARD_REASON_FESTIVAL 97
#define REWARD_REASON_GUILD_ADD_PROMOTE 98
#define REWARD_REASON_MONEY_FASHION_TREASURE 99
#define REWARD_REASON_FASHION_SMELT 100
#define REWARD_REASON_INCARNATON_BUY 101
#define REWARD_REASON_JUMPING_OFF_USE_SKILL 102
#define REWARD_REASON_GUILD_RESET 103
#define REWARD_REASON_SWORD_UPGRADE 104
#define REWARD_REASON_SWORD_ADVANCE 105
#define REWARD_REASON_VOID_FIELD_CHESTS 106
#define REWARD_REASON_VOID_FIELD_DROP 107
#define REWARD_REASON_SINGLE_ANSWER_FINISH 108
#define REWARD_REASON_SHORCUT_REWARD 109
#define REWARD_REASON_WELCOME_REWARD 110
#define REWARD_REASON_PICK_DROP_OBJECT 111
#define REWARD_REASON_PET_FORMATION_UPGRADE 112
#define REWARD_REASON_PET_FORMATION_LOCK 113
#define REWARD_REASON_MULTISERVER_ITEM_BUY 114
#define REWARD_REASON_INVESTMENT_PLAN 115
#define REWARD_REASON_INVESTMENT_PLAN_ADDITIONAL 116
#define REWARD_REASON_OFF_LINE_VIGOR_BUY 117
#define REWARD_REASON_PAY_POINT_LOTTERY_EXCHANGE 118
#define REWARD_REASON_PAY_POINT_LOTTERY_OUTPUT 119
#define REWARD_DONATE 120
#define REWARD_REASON_BAG_GRID_UNLOCK 121
#define REWARD_REASON_VIP_ONLY_DUNGEON 122
#define REWARD_REASON_KILL_MONSTER_DROP 123
#define REWARD_REASON_FACEBOOK_LIKE 124
#define REWARD_REASON_RENAMED_CARD_ID 125
#define REWARD_REASON_USE_FUNCTION_NUMBER_CARD 126
#define REWARD_REASON_BUY_BRAVE_HEART_COUNT 127
#define REWARD_REASON_EGG_REWARD 128
#define REWARD_REASON_SWORD_ACTIVATE 129
#define REWARD_REASON_SWORD_UNLOCK 130
#define REWARD_REASON_BUY_CHEAP 131
#define REWARD_REASON_DAILY_DRAW_FASHION 132
#define REWARD_REASON_DAILY_DRAW_FASHION_CONSUME 133
#define REASON_ITEM_SUB_SELL 1
#define REASON_ITEM_SUB_ADD_LIFE 2
#define REASON_ITEM_SUB_SKILL_FUSION 10
#define REASON_ITEM_SUB_GEM_FUSION 11
#define REASON_ITEM_SUB_GEM_CHANGE_COLOR 20
#define REASON_ITEM_SUB_GEM_ADD_HOLE 21
#define REASON_ITEM_SUB_GEM_SOCKET 22
#define REASON_ITEM_SUB_EQUIP_QUAULITY_UP 30
#define REASON_ITEM_SUB_EQUIP_WASH_UP 31
#define REASON_ITEM_SUB_EQUIP_STAR_UP 32
#define REASON_ITEM_SUB_EQUIP_ENCHANT 33
#define REASON_ITEM_SUB_ALCHEMY 40
#define REASON_ITEM_SUB_DEMPOSE 41
#define REASON_ITEM_SUB_WING_ACTIVATE 51
#define REASON_ITEM_SUB_WING_ADVANCE 52
#define REASON_ITEM_ADD_DROP 1
#define REASON_ITEM_ADD_GM 2
#define REASON_ITEM_ADD_REWARD 3
#define REASON_ITEM_ADD_GEM_UNSOCKET 10
#define REASON_ITEM_ADD_ALCHEMY 20
#define REASON_ITEM_ADD_DEMPOSE 21
#define REWARD_FLAG_NORMAL 1
#define REWARD_FLAG_VIP1 2
#define REWARD_FLAG_VIP2 3
#define REWARD_FLAG_VIP3 4
#define REWARD_FLAG_CARD 5
#define REWARD_FLAG_RANK1 6
#define REWARD_FLAG_RANK2 7
#define SEX_MALE 1
#define SEX_FEMALE 2
#define CAREER_WARRIOR 1
#define CAREER_MAGE 2
#define CAREER_ARCHER 3
#define SCENE_WAITING_ROOM 127
#define OBJ_SCENE 0
#define OBJ_PLAYER 1
#define OBJ_MONSTER 2
#define OBJ_BOSS 3
#define OBJ_PET 5
#define OBJ_OFFLINE_PLAYER 6
#define OBJ_TOWER 7
#define OBJ_TRIGGER 8
#define OBJ_CHECKPOINT 9
#define OBJ_SPAWN 10
#define OBJ_PORT 11
#define OBJ_TOUCH 12
#define OBJ_DROP_OBJECT 13
#define OBJ_SUM 14
#define CHAT_CHANNEL_INTEGRATED 1
#define CHAT_CHANNEL_SYSTEM 2
#define CHAT_CHANNEL_WORLD 3
#define CHAT_CHANNEL_TEAM 4
#define CHAT_CHANNEL_PRIVATE 5
#define CHAT_CHANNEL_GUILD 6
#define CHAT_CHANNEL_MARQUEE 7
#define CHAT_CHANNEL_EMERGENCY 8
#define CHAT_CHANNEL_GMCMD 9
#define CHAT_CHANNEL_DEBUG 10
#define CHAT_CHANNEL_HORN 11
#define CHAT_CHANNEL_PROCLAMATION 12
#define CHAT_CHANNEL_HORN_ITEM 201
#define CHAT_MAX_LENGTH 1000
#define FCM_OFFLINE_5_HOUR 18000
#define FCM_ONLINE_3_HOUR 10800
#define FCM_ONLINE_5_HOUR 18000
#define FCM_HALF_GAIN_RATE 5000
#define FCM_ZERO_GAIN_RATE 0
#define GAIN_SOUL_TIME 1000
#define DAMAGE_TYPE_NORMAL 1
#define DAMAGE_TYPE_CRITICAL 2
#define DAMAGE_TYPE_MISS 3
#define DAMAGE_TYPE_BLOCK 4
#define DAMAGE_TYPE_HEAL 5
#define DAMAGE_TYPE_MANA 6
#define DAMAGE_TYPE_IMMORTAL 7
#define DAMAGE_TYPE_BUFF 8
#define COMBO_KILL_CD 15000
#define PROP_GAMEPOINT 1
#define PROP_SOULPOINT 2
#define PROP_EXP 3
#define PROP_VIGOR 4
#define PROP_HP 5
#define PROP_MP 6
#define PROP_MAXHP 7
#define PROP_MAXMP 8
#define PROP_ATTACK 9
#define PROP_ARMOR 10
#define PROP_CRITICAL_ATTACK 11
#define PROP_HIT_RATE 12
#define PROP_DODGE 13
#define PROP_ATTACK_PER_SEC 14
#define PROP_MOVE_SPEED 15
#define PROP_DAMAGE_REDUCTION 16
#define PROP_CONSUME_MP 17
#define PROP_STRENGTH 19
#define PROP_SPIRIT 20
#define PROP_AGILITY 21
#define PROP_CONSTITUTION 22
#define PROP_SHOW_FLAG 24
#define PROP_TEAM_ID_L 25
#define PROP_TEAM_ID_H 26
#define PROP_GROWTH_POINT 27
#define PROP_ITEM 28
#define PROP_STRENGTH_MUL 29
#define PROP_SPIRIT_MUL 30
#define PROP_AGILITY_MUL 31
#define PROP_CONSTITUTION_MUL 32
#define PROP_HP_REC_RATE 33
#define PROP_MP_REC_RATE 34
#define PROP_REFLECT_DAMAGE 35
#define PROP_REFLECT_DAMAGE_MUL 36
#define PROP_MP_LOSS_RATE 37
#define PROP_SUB_PHYSICS_HURT 38
#define PROP_SUB_MAGIC_HURT 39
#define PROP_FOLLOW_PET 41
#define PROP_MONEYPOINT 45
#define PROP_RIDE_PET 47
#define PROP_EQUIP_ANIMATION 50
#define PROP_ATTACKABLE 51
#define PROP_CAREER 52
#define PROP_LEVEL 53
#define PROP_MAX_EXP 55
#define PROP_BATTLE_POWER 57
#define PROP_GROUP 58
#define PROP_SEASON_POINT 61
#define PROP_WING 62
#define PROP_HONORPOINT 63
#define PROP_VIP 64
#define PROP_MAX_VIGOR 65
#define PROP_VIGOR_BUYTIMES 66
#define PROP_FIRE_DEFENCE 67
#define PROP_ICE_DEFENCE 68
#define PROP_THUNDER_DEFENCE 69
#define PROP_TITLE 70
#define PROP_MAX_FIRE_DEFENCE 71
#define PROP_MAX_ICE_DEFENCE 72
#define PROP_MAX_LIGHTNING_DEFENCE 73
#define PROP_MAX_ATTACK_BLOCK 74
#define PROP_MAX_MAGIC_BLOCK 75
#define PROP_RIDN_PET_TRAIN_FIELED 79
#define PROP_RIDN_PET_TRAIN_NOW 80
#define PROP_RIDN_PET_ABSORB 81
#define PROP_FOLLOW_PET_ABSORB 82
#define PROP_EQUIP_START_LEVEL 83
#define PROP_RESURGENCE_CD 84
#define PROP_MAX_RESURGENCE_CD 85
#define PROP_GUILD_NAME 86
#define PROP_PLAYER_DOOR_BUY_CHALLENGE 87
#define PROP_PLAYER_DOOR_KILL_CD 88
#define PROP_BABEL_RESET 89
#define PROP_ANSWER_DOUBLE_NUM 90
#define PROP_SIGN_MAKEUP 91
#define PROP_SYS_VIGOR 92
#define PROP_BIND_MONEYPOINT 93
#define PROP_TASK_DAILY_RESET 94
#define PROP_TASK_GUARD_BUY 95
#define PROP_ALL_DAMAGE_SUB 96
#define PROP_CRITICAL_DAMAGE_ADDITION 97
#define PROP_KILL_HP_REC 98
#define PROP_KILL_MP_REC 99
#define PROP_KILL_HP_REC_MUL 100
#define PROP_KILL_MP_REC_MUL 101
#define PROP_GUILD_DONATE 102
#define PROP_GUILD_ADDITION_PROMOTE 103
#define PROP_PROJECTILE_DAMAGE_MUL 105
#define PROP_MELEE_DAMAGE_MUL 106
#define PROP_AOE_DAMAGE_MUL 107
#define PROP_ONE_HAND_DAMAGE_MUL 108
#define PROP_TWO_HAND_DAMAGE_MUL 109
#define PROP_DUAL_HAND_DAMAGE_MUL 110
#define PROP_BOW_DAMAGE_MUL 111
#define PROP_SHIELD_ATTACK_BLOCK 112
#define PROP_DUAL_ATTACK_BLOCK 113
#define PROP_DANCE_CARD 114
#define PROP_DANCE 115
#define PROP_FOLLOW_PET_SOUL_LEVE_STEPS 116
#define PROP_FOLLOW_PET_ATTACK 117
#define PROP_FOLLOW_PET_HIT_RATE 118
#define PROP_FOLLOW_PET_CRIT 119
#define PROP_PROTECT_SOUL_NUM 120
#define PROP_PROTECT_SOUL_SUB_TIME 121
#define PROP_STONE_TURN_GOLD_TIMES 122
#define PROP_GUILD_MEMBER_TURNTABLE 123
#define PROP_BABEL_RAIDS 124
#define PROP_INCARNATION_POINT 125
#define PROP_PET_FORMATION_UNLOCK 126
#define PROP_UPGRADE_JEWEL 130
#define PROP_GUILD_SCORE 131
#define PROP_ITEM_PACKAGE 132
#define PROP_FUNCTION_NUMBER 157
#define PROP_FOLLOW_PET_CRIT_DAMAGE 170
#define PROP_FOLLOW_PET_HIT_ADD_PHYSICS 171
#define PROP_FOLLOW_PET_HIT_ADD_FIRE 172
#define PROP_FOLLOW_PET_HIT_ADD_ICE 173
#define PROP_FOLLOW_PET_HIT_ADD_THUNDER 174
#define PROP_DOUBLE_EXP 175
#define PROP_USE_TREASURE_BOX_BY_ID 201
#define PROP_PROTECT_SOUL_TIMES 202
#define PROP_GOLD_TREE_CD_TIMES 203
#define PROP_TREASURY_CD_TIMES 204
#define PROP_USE_TREASURE_BOX_BY_POS 205
#define PROP_BAG_GRID_UNLOCK 206
#define PROP_QUALITY_STONE 246
#define PROP_SINGLE_ANSWER_CD_TIME 247
#define PROP_GBACK_RESOURCE 248
#define PROP_MONEY_FASHION_TREASURE 249
#define PROP_JUMPING_OFF_SKILL 250
#define PROP_OFF_LINE_VIGOR 251
#define PROP_DONATE 252
#define PROP_INTEGRAL_POINT 253
#define PROP_EXPLOIT_POINT 254
#define PROP_ALLIANCE_POINT 255
#define PROP_VIP_ONLY_DUNGEON 257
#define PROP_EXPERIENCE_VIP 258
#define PROP_FASHION_SKILL_ID 259
#define PROP_REFRESH_ALL_SKILL_CD 260
#define PROP_BRAVE_HEART_COUNT 261
#define PROP_SWORD_UNLOCK 262
#define PROP_SWORD 263
#define PROP_DAILY_FASHION 264
#define PROP_BLOCK 265
#define PROP_MAGIC_BLOCK 266
#define PROP_ENERGY_SHIELD 267
#define PROP_CAST_PER_SEC 268
#define PROP_MAX_ENERGY_SHIELD 269
#define PROP_MAXHP_MUL 270
#define PROP_MAXMP_MUL 271
#define PROP_HP_REC_RATE_MUL 272
#define PROP_MP_REC_RATE_MUL 273
#define PROP_ARMOR_MUL 274
#define PROP_DODGE_MUL 275
#define PROP_MAX_ENERGY_SHIELD_MUL 276
#define PROP_HIT_RATE_MUL 277
#define PROP_CRITICAL_ATTACK_MUL 278
#define PROP_CRITICAL_DAMAGE_ADDITION_MUL 279
#define PROP_ATTACK_PER_SEC_MUL 280
#define PROP_CAST_PER_SEC_MUL 281
#define PROP_MOVE_SPEED_MUL 282
#define PROP_FIRE_DEFENCE_MUL 283
#define PROP_ICE_DEFENCE_MUL 284
#define PROP_THUNDER_DEFENCE_MUL 285
#define PROP_BLOCK_MUL 286
#define PROP_MAGIC_BLOCK_MUL 287
#define PROP_PHYSICS_DAMAGE 288
#define PROP_PHYSICS_DAMAGE_MUL 289
#define PROP_FIRE_DAMAGE 290
#define PROP_FIRE_DAMAGE_MUL 291
#define PROP_ICE_DAMAGE 292
#define PROP_ICE_DAMAGE_MUL 293
#define PROP_THUNDER_DAMAGE 294
#define PROP_THUNDER_DAMAGE_MUL 295
#define PROP_POISON_DAMAGE 296
#define PROP_POISON_DAMAGE_MUL 297
#define PROP_MAGIC_DAMAGE_MUL 298
#define PROP_MAGIC_DEFENCE 299
#define PROP_EQUIP_PHYSICS_DAMAGE 300
#define PROP_EQUIP_PHYSICS_DAMAGE_MUL 301
#define PROP_EQUIP_ARMOR 302
#define PROP_EQUIP_ARMOR_MUL 303
#define PROP_EQUIP_EVASION 304
#define PROP_EQUIP_EVASION_MUL 305
#define PROP_EQUIP_ENERGY_SHIELD 306
#define PROP_EQUIP_ENERGY_SHIELD_MUL 307
#define PROP_EQUIP_ATTACK_SPEED 308
#define PROP_EQUIP_ATTACK_BLOCK 309
#define PROP_EQUIP_MAGIC_BLOCK 310
#define PROP_SKILL_ATTACK_REPEAT 400
#define PROP_SKILL_CAST_REPEAT 401
#define PROP_SKILL_BULLET_ADD 402
#define PROP_SKILL_SOURCE_PHYSICS_DAMAGE 403
#define PROP_SKILL_SOURCE_FIRE_DAMAGE 404
#define PROP_SKILL_SOURCE_ICE_DAMAGE 405
#define PROP_SKILL_SOURCE_LIGHTNING_DAMAGE 406
#define PROP_SKILL_SOURCE_POISON_DAMAGE 407
#define PROP_SKILL_HURT_TRIGGER 408
#define PROP_SKILL_DAMAGE_SUB_MUL 409
#define PROP_SKILL_KNOCK_BACK 410
#define PROP_SKILL_PIERCE 411
#define PROP_SKILL_ENDURANCE_CHARGE 412
#define PROP_SKILL_FRENZY_CHARGE 413
#define PROP_SKILL_POWER_CHARGE 414
#define PROP_SKILL_BLEED 415
#define PROP_SKILL_CRITICAL_TRIGGER 416
#define PROP_SKILL_MELEE_TRIGGER 417
#define PROP_SKILL_PROJECTILE_TRIGGER 418
#define PROP_BUFF_ALL_SPEED_MUL 501
#define PROP_BUFF_RELIFE 502
#define PROP_BUFF_REFLECT_DAMAGE 503
#define PROP_BUFF_ARMOR_EVSION_SUB 504
#define SKILL_TYPE_ATTACK 1
#define SKILL_TYPE_MAGIC 2
#define SKILL_FEATURE_MELEE 1
#define SKILL_FEATURE_BOW 2
#define SKILL_FEATURE_ATTACK 4
#define SKILL_FEATURE_SPELL 8
#define SKILL_FEATURE_PROJECTILE 16
#define SKILL_FEATURE_AOE 32
#define SKILL_FEATURE_FIRE 64
#define SKILL_FEATURE_ICE 128
#define SKILL_FEATURE_LIGHTNING 256
#define SKILL_FEATURE_POISON 512
#define SKILL_FEATURE_AURA 1024
#define SKILL_FEATURE_DURATION 2048
#define SKILL_FEATURE_CURSE 4096
#define SKILL_FEATURE_TRIGGER 8192
#define BUY_FASHION 1
#define FASHION_COMPOSE 0
#define FASHION_COMPOSE_BUY 3
#define PROP_PET_MAX_LEVEL 80
#define PROP_POWER_FRUIT 219
#define PROP_AGILE_FRUIT 220
#define PROP_SPIRIT_FRUIT 221
#define PROP_PHYS_FRUIT 222
#define PROP_SKILL_FRUIT 223
#define PROP_FASHION_ITME1 126
#define PROP_FASHION_ITME2 127
#define PROP_AUTOEAT_ORD 217
#define PROP_AUTOEAT_SER 218
#define PROP_GUESS_WIN 224
#define FOLLOW_PET_DAMAGE_SKILL 1
#define FOLLOW_PET_HP_SKILL 2
#define FOLLOW_PET_NOFIGHT 0
#define FOLLOW_PET_FIGHT 1
#define FOLLOW_PET_SEARCH 2
#define FOLLOW_PET_FORMATION 3
#define PET_FORMATION_UPGRADE_TYPE 1
#define PET_FORMATION_UP 1
#define PET_FORMATION_DOWN 2
#define PET_FORMATION_BRAVE 221
#define PET_FORMATION_STRIKE 222
#define PET_FORMATION_STATE_LOCK 0
#define PET_FORMATION_STATE_CAN_LOCK 1
#define PET_FORMATION_STATE_UNLOCK 2
#define PET_FORMATION_HAVE_PET 3
#define PET_FORMATION_SPEND_TYPE_VIP 1
#define PET_FORMATION_SPEND_TYPE_FORMATION_LEVEL 2
#define FOLLOW_PET_UNLOCK 0
#define FOLLOW_PET_RECRUIT 1
#define FOLLOW_PET_CANRECRUIT 2
#define ACTIVATION_LEVEL 1
#define ACTIVATION_TASK 2
#define ACTIVATION_DUGEON 3
#define ACTIVATION_ITEM 4
#define ACTIVATION_TITLE 5
#define ACTIVATION_VIP 6
#define FINISH_CONDITION 1
#define NO_FINISH_CONDITION 2
#define FOLLOW_PET_SHEARS 0
#define FOLLOW_PET_STONE 1
#define FOLLOW_PET_CLOSE 2
#define FOLLOW_PET_SCUESS 3
#define FOLLOW_PET_WIN 0
#define FOLLOW_PET_LOSE 1
#define FOLLOW_PET_DRAW 2
#define FOLLOW_PET_SWALLOW_SENIOR 0
#define FOLLOW_PET_SWALLOW_ORDINARY  1
#define FOLLOW_PET_SEARCH_SENIOR 0
#define FOLLOW_PET_SEARCH_ORDINARY  1
#define FOLLOW_PET_SEARCH_NOTYPE  2
#define FOLLOW_PET_SEARCH_NOSCENE  60000
#define FOLLOW_PET_EXCTING_SENIOR 0
#define FOLLOW_PET_EXCTING_ORDINARY  1
#define FOLLOW_PET_NO_AUOTOEAT 0
#define FOLLOW_PET_AUOTOEAT  1
#define FOLLOW_PET_HANDEAT  3
#define FOLLOW_PET_EXEUNLOCK  1
#define FOLLOW_PET_EXELOCK  2
#define FOLLOW_PET_EXECTING  1
#define FOLLOW_PET_NO_EXEC  2
#define FOLLOW_PET_FINISH_EXEC  3
#define CAN_ACTIVATION  1
#define ALREADY_ACTIVATION  2
#define FREE_INTO_SOUL 1
#define FREE_NO_INTO_SOUL 2
#define FOLLOW_PET_RANOM_EXP  1
#define FOLLOW_PET_ONCE_RANOM_EXP  2
#define FOLLOW_PET_UP_STEPS  3
#define FOLLOW_PET_ITEM_STAR 314
#define FOLLOW_PET_STONE_LEVEL1 315
#define FOLLOW_PET_STONE_LEVEL2 316
#define FOLLOW_PET_STONE_LEVEL3 317
#define FOLLOW_PET_STONE_LEVEL4 318
#define FOLLOW_PET_SOUL_FRAGMENT 320
#define FOLLOW_PET_USE_MONEY 1
#define FOLLOW_PET_USE_ITEM 0
#define FOLLOW_PET_USE_ITEM_RANDOM 7500
#define FOLLOW_PET_ITEM_STONE 307
#define ITEM_ID_ATTACK 204
#define ITEM_ID_DEFENCE 205
#define ITEM_ID_MOVESPEED 206
#define ITEM_ID_HP 200
#define ITEM_ID_MP 203
#define RIDE_PET_FREE_UP  1
#define RIDE_PET_ITME_UP  2
#define RIDE_PET_STONE_UP  3
#define RIDE_PET_ONCE_UP  4
#define RIDE_PET_STONE_ID 227
#define RIDE_PET_FREE 1
#define RIDE_PET_RIDE 2
#define RIDE_PET_REST 3
#define RIDE_PET_MARK 4
#define RIDE_PET_NO_MARK 5
#define RIDE_PET_ORD 1
#define RIDE_PET_DOUBLE 2
#define RIDE_PET_SER 2
#define RIDE_PET_SUPERME 3
#define PRO_RECHAREY 1
#define PRO_SIGN 2
#define SIGN_REWARD_COUNT 5
#define SIGN_SEVEN_DAY 7
#define HONEY 1
#define BUG 2
#define GRASS 3
#define RIDE_PET_FREE_NO 0
#define RIDE_PET_FREE_USED 1
#define RIDE_PET_NO_CAPTURE 1
#define RIDE_PET_CAPTURE 2
#define BEASTEAR_ID 226
#define DUNGEN_FLAG 1
#define TASK_FLAG 2
#define USE_FREE 1
#define NO_FREE 0
#define OPEN 100
#define WAIT_OPEN 101
#define NO_OPEN 0
#define SISTEM_OPEN 1
#define ON_IDLE 6
#define ON_TRAINING 7
#define RIDE_GENERAL_FIELEDS 4
#define FLY_ITEM_TYPE_EQUIP_TO_BAG 1
#define FLY_ITEM_TYPE_BAG_TO_EQUIP 2
#define FLY_ITEM_TYPE_SKILL_TO_BAG 3
#define FLY_ITEM_TYPE_BAG_TO_SKILL 4
#define MAX_EQUIP_QUALITY 5
#define QUALITY_WHITE 0
#define QUALITY_GREEN 1
#define QUALITY_BLUE 2
#define QUALITY_PURPLE 3
#define QUALITY_GOLD 4
#define EQUIP_PART_HEAD 0
#define EQUIP_PART_BODY 1
#define EQUIP_PART_SHOULDER 2
#define EQUIP_PART_HAND 3
#define EQUIP_PART_FOOT 4
#define EQUIP_PART_NECK 5
#define EQUIP_PART_FINGER_L 6
#define EQUIP_PART_FINGER_R 7
#define EQUIP_PART_HAND_L 8
#define EQUIP_PART_HAND_R 9
#define EQUIP_PART_WHOLE_BODY 10
#define EQUIP_TYPE_HEAD 1
#define EQUIP_TYPE_BODY 2
#define EQUIP_TYPE_SHOULDER 3
#define EQUIP_TYPE_HAND 4
#define EQUIP_TYPE_FOOT 5
#define EQUIP_TYPE_NECK 6
#define EQUIP_TYPE_FINGER 7
#define EQUIP_TYPE_TWO_HAND 8
#define EQUIP_TYPE_ONE_HAND 9
#define EQUIP_TYPE_DEPUTY_HAND 10
#define EQUIP_OPT_INSTALL 1
#define EQUIP_OPT_UNINSTALL 2
#define EQUIP_OPT_SWAP 3
#define EQUIP_ANIMATION_JD 1
#define EQUIP_ANIMATION_SC 2
#define EQUIP_ANIMATION_SJ 3
#define EQUIP_ANIMATION_SZ 4
#define EQUIP_ANIMATION_GJ 5
#define EQUIP_SUB_TYPE_1 101
#define EQUIP_SUB_TYPE_2 102
#define EQUIP_SUB_TYPE_3 103
#define EQUIP_SUB_TYPE_4 104
#define EQUIP_SUB_TYPE_5 105
#define EQUIP_SUB_TYPE_6 106
#define EQUIP_SUB_TYPE_7 107
#define EQUIP_SUB_TYPE_8 108
#define EQUIP_SUB_TYPE_9 109
#define EQUIP_SUB_TYPE_10 110
#define EQUIP_SUB_TYPE_11 111
#define EQUIP_SUB_TYPE_12 112
#define EQUIP_SUB_TYPE_13 113
#define EQUIP_SUB_TYPE_14 114
#define EQUIP_HOLE_MAX 4
#define EQUIP_HOLE_TYPE_1 1
#define EQUIP_HOLE_TYPE_2 2
#define EQUIP_HOLE_TYPE_3 3
#define EQUIP_HOLE_TYPE_4 4
#define STONE_SUB_TYPE_SKILL 401
#define STONE_SUB_TYPE_RUNE 402
#define STONE_SUB_TYPE_GEM 403
#define STONE_SUB_TYPE_TALENT 404
#define ITEM_EFFECT_GAMEPOINT 1
#define ITEM_EFFECT_SOULPOINT 2
#define ITEM_EFFECT_EXP 3
#define ITEM_EFFECT_HP 5
#define ITEM_EFFECT_MP 6
#define MATERIAL_SUB_TYPE_MINERAL 301
#define MATERIAL_SUB_TYPE_CLOTH 302
#define MATERIAL_SUB_TYPE_SEED 303
#define MATERIAL_SUB_TYPE_GEM_EVOLUTE 304
#define MATERIAL_SUB_TYPE_ADD_HOLE 305
#define EFFECT_TYPE_PROP 1
#define EFFECT_TYPE_PACKAGE 2
#define EFFECT_TYPE_SKILL 3
#define EFFECT_TYPE_BUFF 4
#define ITEM_OPT_ADD 1
#define ITEM_OPT_SUB 2
#define ITEM_OPT_MOVE 3
#define ITEM_OPT_SWAP 4
#define ITEM_OPT_SELL 5
#define ITEM_OPT_UPDATE 6
#define ITEM_OPT_USE 7
#define PLACE_BAG 1
#define PLACE_ROLE_EQUIP 2
#define PLACE_ROLE_SKILL 3
#define PLACE_EQUIP_GEM 4
#define PLACE_SOLDIER_EQUIP 5
#define PLACE_SOLDIER_SKILL 6
#define PLACE_SOLDIER_TALENT 7
#define PLACE_STORE 8
#define ITEM_COND_LEVEL 1
#define ITEM_COND_GAMEPOINT 2
#define ITEM_COND_SOULPOINT 3
#define ITEM_COND_MONEYPOINT 4
#define ITEM_COND_VIP 5
#define ITEM_COND_USED_TIME_WITH_TID 6
#define ITEM_COND_USED_TIME_WITH_TYPE 7
#define DATA_LEN_1 1
#define DATA_LEN_2 32
#define PHYSICAL_RADIUS 50
#define MAX_SEND_MOVE_NUM 200
#define PLAYER_ACCOUNT_LEN 128
#define PLAYER_NAME_LEN 128
#define PLAYER_TOKEN_LEN 1024
#define MAIL_RECEIVER_CONDITION_LEN 4096
#define GUILD_NAME_LEN 128
#define GUILD_BULLETIN_LEN 512
#define NAME_MAX_LEN 16
#define SERVER_NAME_MAX_LEN 24
#define NAME_MIN_LEN 3
#define GUILD_NAME_MIN_LEN 4
#define GUILD_OFFICE_CHAIRMAN 1
#define GUILD_OFFICE_VICE_CHAIRMAN 2
#define GUILD_OFFICE_ELITE 3
#define GUILD_OFFICE_MEMBER 4
#define GUILD_NOTICE_TYPE_ADD 1
#define GUILD_NOTICE_TYPE_QUIT 2
#define GUILD_NOTICE_TYPE_EXPEL 3
#define GUILD_NOTICE_TYPE_PROMOTE 4
#define GUILD_NOTICE_TYPE_DEMOTE 5
#define GUILD_NOTICE_TYPE_INHERIT 6
#define GUILD_NOTICE_TYPE_DISMISS 7
#define GUILD_BOSS_CREATE_TIME_FLAG 1
#define GUILD_BOSS_DEAD_TIME_FLAG 2
#define GUILD_APPLY_FLAG 1
#define GUILD_LIST_PAGE_COUNT 9
#define GUILD_APPLY_LIST_MAX_COUNT 50
#define GUILD_AUTO_JOIN_FLAG 1
#define GUILD_MEMBER_OFFLINE_FLAG 0
#define GUILD_MEMBER_ONLINE_FLAG 1
#define GUILD_START_ROTATE_FLAG 1
#define GUILD_NO_ROTATE_FLAG 0
#define GUILD_TOKEN_ID 202
#define GUILD_ADDITION_PLAYER_DOOR_HONORPOINT 0
#define GUILD_ADDITION_GOLD_TREE 1
#define GUILD_ADDITION_TREASURY 2
#define GUILD_ADDITION_MOUNT_TRAIN_EXP 3
#define GUILD_ADDITION_TEAM_DUNGEON_SURMOUNT_RIME 4
#define GUILD_ADDITION_TEAM_DUNGEON_PET_STAR 5
#define GUILD_ADDITION_MONSTER_DOOR_CALLRIDEPET_STONE 6
#define GUILD_ADDITION_STONE_TURN_GOLD 7
#define GUILD_ADDITION_SINGLE_ANSWER_SOUL 8
#define GUILD_ADDITION_SUM 9
#define VIP_CARD_1 1
#define VIP_CARD_2 2
#define VIP_CARD_3 3
#define VIP_0 0
#define VIP_1 1
#define VIP_2 2
#define VIP_3 3
#define VIP_4 4
#define VIP_5 5
#define VIP_6 6
#define VIP_7 7
#define VIP_8 8
#define VIP_9 9
#define VIP_10 10
#define VIP_GIFT_GET_REWARD 1
#define VIP_GIFT_NO_GET_REWARD 0
#define VIP_GIFT_FlAG_LEN 10
#define VIP_PRIVILEGE_0 0
#define VIP_PRIVILEGE_1 1
#define VIP_PRIVILEGE_2 2
#define VIP_PRIVILEGE_3 3
#define VIP_PRIVILEGE_4 4
#define VIP_PRIVILEGE_5 5
#define VIP_PRIVILEGE_6 6
#define VIP_PRIVILEGE_7 7
#define VIP_PRIVILEGE_8 8
#define VIP_PRIVILEGE_9 9
#define VIP_PRIVILEGE_10 10
#define VIP_PRIVILEGE_11 11
#define VIP_PRIVILEGE_12 12
#define VIP_PRIVILEGE_13 13
#define VIP_PRIVILEGE_14 14
#define VIP_PRIVILEGE_15 15
#define VIP_PRIVILEGE_16 16
#define VIP_PRIVILEGE_17 17
#define VIP_PRIVILEGE_18 18
#define VIP_PRIVILEGE_19 19
#define VIP_PRIVILEGE_20 20
#define VIP_PRIVILEGE_21 21
#define VIP_PRIVILEGE_22 22
#define VIP_PRIVILEGE_23 23
#define VIP_PRIVILEGE_24 24
#define VIP_PRIVILEGE_25 25
#define VIP_PRIVILEGE_26 26
#define VIP_PRIVILEGE_27 27
#define VIP_PRIVILEGE_28 28
#define VIP_PRIVILEGE_29 29
#define VIP_PRIVILEGE_30 30
#define VIP_PRIVILEGE_31 31
#define VIP_PRIVILEGE_32 32
#define VIP_PRIVILEGE_33 33
#define VIP_PRIVILEGE_34 34
#define VIP_PRIVILEGE_35 35
#define VIP_PRIVILEGE_36 36
#define VIP_PRIVILEGE_37 37
#define VIP_PRIVILEGE_38 38
#define VIP_PRIVILEGE_39 39
#define VIP_PRIVILEGE_40 40
#define VIP_PRIVILEGE_41 41
#define VIP_PRIVILEGE_42 42
#define VIP_PRIVILEGE_43 43
#define VIP_PRIVILEGE_44 44
#define VIP_PRIVILEGE_45 45
#define VIP_PRIVILEGE_46 46
#define VIP_PRIVILEGE_47 47
#define VIP_PRIVILEGE_48 48
#define VIP_PRIVILEGE_49 49
#define VIP_PRIVILEGE_50 50
#define VIP_PRIVILEGE_51 51
#define VIP_PRIVILEGE_52 52
#define VIP_PRIVILEGE_53 53
#define VIP_PRIVILEGE_54 54
#define VIP_PRIVILEGE_55 55
#define VIP_PRIVILEGE_56 56
#define VIP_PRIVILEGE_57 57
#define VIP_PRIVILEGE_58 58
#define VIP_PRIVILEGE_59 59
#define VIP_PRIVILEGE_60 60
#define VIP_PRIVILEGE_61 61
#define VIP_PRIVILEGE_62 62
#define VIP_PRIVILEGE_63 63
#define VIP_PRIVILEGE_64 64
#define VIP_PRIVILEGE_65 65
#define VIP_PRIVILEGE_66 66
#define VIP_PRIVILEGE_999 999
#define VIP_MAX_VIP_LEVEL 10
#define GUILD_ACTIVITY_GUARD_GODDESS 1
#define GUILD_ACTIVITY_TRIAL_LAND 2
#define GUILD_ACTIVITY_CRUSADE_BOSS 3
#define GUILD_ACTIVITY_TWILIGHT_WAR 4
#define GUILD_ACTIVITY_GUARD_TREASURY 5
#define GUILD_ACTIVITY_WINNER_KING 6
#define GUILD_ACTIVITY_CONTEST_STRONGHOLD 7
#define GUILD_ACTIVITY_MOUNTAIN_KING 8
#define GUILD_ACTIVITY_TOP_OF_WORLD 9
#define GUILD_ACTIVITY_PLANT_FIELD 10
#define GUILD_ACTIVITY_CITY_FIGHT 11
#define GUILD_TWAR_BATTLE_TYPE_ENTER 1
#define GUILD_TWAR_BATTLE_TYPE_LEAVE 2
#define GUILD_TWAR_BATTLE_TYPE_KILL 3
#define TASK_TYPE_MAIN 1
#define TASK_TYPE_BRANCH 2
#define TASK_TYPE_DAILY 3
#define TASK_TYPE_CRUSADE 4
#define TASK_TYPE_GUARD 5
#define TASK_TYPE_GUILD 6
#define TASK_TYPE_ACHIVE 7
#define TASK_TYPE_FESTIVAL 20
#define TASK_FESTIVE_BASE_ID 500000
#define DAILY_TASK_FLUSH_TIME 0
#define TASK_PRECOND_MAIN_TASKID 1
#define TASK_PRECOND_LEVEL 2
#define TASK_PRECOND_BRANCH_TASKID 3
#define TASK_PRECOND_LESS_LEVEL 4
#define TASK_ID_BASE_MOD 10000
#define TASK_MAIN_ID_MOD 1
#define TASK_BRANCH_ID_MOD 2
#define TASK_GUARD_ID_MOD 5
#define MAX_BRANCH_TASK_NUM 6
#define MAX_DAILY_TASK_LIST_NUM 5
#define MAX_DAILY_TASK_NUM 10
#define MAX_DAILY_TASK_RESET_NUM 1
#define MAX_CRUSADE_CANTAKE_TASK_NUM 5
#define MAX_CRUSADE_TASK_LIST_NUM 3
#define MAX_CRUSADE_TASK_NUM 20
#define MAX_GUARD_TASK_NUM 3
#define MAX_GUARD_TASK_LIST 1
#define GUARD_MAX_QUALITY_NUM 24
#define TASK_BRANCH_TASK_FLAG_LEN 64
#define TASK_TARGET_1 1
#define TASK_TARGET_3 3
#define TASK_TARGET_4 4
#define TASK_TARGET_6 6
#define TASK_TARGET_7 7
#define TASK_TARGET_8 8
#define TASK_TARGET_9 9
#define TASK_TARGET_10 10
#define TASK_TARGET_11 11
#define TASK_TARGET_12 12
#define TASK_TARGET_13 13
#define TASK_TARGET_14 14
#define TASK_TARGET_15 15
#define TASK_TARGET_17 17
#define TASK_TARGET_20 20
#define TASK_TARGET_23 23
#define TASK_TARGET_24 24
#define TASK_TARGET_25 25
#define TASK_TARGET_26 26
#define TASK_TARGET_27 27
#define TASK_TARGET_28 28
#define TASK_TARGET_29 29
#define TASK_TARGET_30 30
#define TASK_TARGET_31 31
#define TASK_TARGET_32 32
#define TASK_TARGET_33 33
#define TASK_TARGET_34 34
#define TASK_TARGET_36 36
#define TASK_TARGET_37 37
#define TASK_TARGET_38 38
#define TASK_TARGET_39 39
#define TASK_TARGET_41 41
#define TASK_TARGET_42 42
#define TASK_TARGET_43 43
#define TASK_TARGET_44 44
#define TASK_TARGET_45 45
#define TASK_TARGET_46 46
#define TASK_TARGET_47 47
#define TASK_TARGET_48 48
#define TASK_TARGET_49 49
#define TASK_TARGET_50 50
#define TASK_TARGET_51 51
#define TASK_TARGET_52 52
#define TASK_TARGET_53 53
#define TASK_TARGET_54 54
#define TASK_TARGET_55 55
#define TASK_TARGET_56 56
#define TASK_TARGET_57 57
#define TASK_TARGET_58 58
#define TASK_TARGET_59 59
#define TASK_TARGET_61 61
#define TASK_TARGET_62 62
#define TASK_TARGET_63 63
#define TASK_TARGET_64 64
#define TASK_TARGET_65 65
#define TASK_TARGET_66 66
#define TASK_TARGET_69 69
#define TASK_TARGET_70 70
#define TASK_TARGET_71 71
#define TASK_TARGET_72 72
#define TASK_TARGET_73 73
#define TASK_TARGET_74 74
#define TASK_TARGET_75 75
#define TASK_TARGET_76 76
#define TASK_TARGET_77 77
#define TASK_TARGET_78 78
#define TASK_TARGET_79 79
#define TASK_TARGET_80 80
#define TASK_TARGET_81 81
#define TASK_TARGET_82 82
#define TASK_TARGET_83 83
#define TASK_TARGET_85 85
#define TASK_TARGET_86 86
#define TASK_TARGET_87 87
#define TASK_TARGET_88 88
#define TASK_TARGET_89 89
#define TASK_TARGET_90 90
#define TASK_TARGET_91 91
#define TASK_TARGET_92 92
#define TASK_TARGET_93 93
#define TASK_TARGET_94 94
#define TASK_TARGET_95 95
#define TASK_TARGET_96 96
#define TASK_TARGET_97 97
#define TASK_TARGET_98 98
#define TASK_TARGET_99 99
#define TASK_TARGET_100 100
#define TASK_TARGET_101 101
#define TASK_TARGET_102 102
#define TASK_TARGET_103 103
#define TASK_TARGET_104 104
#define TASK_TARGET_105 105
#define TASK_TARGET_106 106
#define TASK_TARGET_107 107
#define TASK_TARGET_108 108
#define TASK_TARGET_109 109
#define TASK_TARGET_110 110
#define TASK_TARGET_111 111
#define TASK_TARGET_112 112
#define TASK_TARGET_113 113
#define TASK_TARGET_114 114
#define TASK_TARGET_115 115
#define TASK_TARGET_116 116
#define TASK_TARGET_117 117
#define TASK_TARGET_118 118
#define TASK_TARGET_119 119
#define TASK_TARGET_120 120
#define TASK_TARGET_121 121
#define TASK_TARGET_122 122
#define TASK_TARGET_123 123
#define TASK_TARGET_124 124
#define TASK_TARGET_125 125
#define TASK_TARGET_126 126
#define TASK_TARGET_127 127
#define TASK_TARGET_128 128
#define TASK_TARGET_129 129
#define TASK_TARGET_130 130
#define TASK_TARGET_131 131
#define TASK_TARGET_132 132
#define TASK_STATE_CANTAKE 1
#define TASK_STATE_HAVETAKE 2
#define TASK_STATE_COMPLETE 3
#define TASK_STATE_REWARD 4
#define TASK_STATE_FESTIVE_REWARD 5
#define TASK_NPC_BL_SHOW 1
#define TASK_NPC_GE_SHOW 2
#define TASK_UPGRADE_STONE 212
#define TASK_COMPLETE_STONE 213
#define TASK_REFRESH_STONE 214
#define TASK_CHANGE_STONE 215
#define TASK_DAILY_BOX_TEN 1
#define TASK_DAILY_BOX_VIP 2
#define TASK_CRUSADE_BOX_TWENTY 3
#define TASK_DAILY_RESET_MONEY 100
#define TASK_GUARD_BUY_MONEY 150
#define FESTIVAL_7TH_LOGIN_GOAL_BEGIN_ID 1
#define FESTIVAL_7TH_LOGIN_GOAL_END_ID 7
#define FESTIVAL_FIRST_RECHARGE_ID 10
#define FESTIVAL_BATTLE_POWER_RANKING_ID 11
#define FESTIVAL_MICRO_CLIENT_ID 12
#define FESTIVAL_VIP_LIMITED_PURCHASING_ID 13
#define FESTIVAL_PAY_POINT_LOTTERY_ID 14
#define FESTIVAL_INVESTMENT_PLAN_ID 15
#define FESTIVAL_DONATE_ID 16
#define FESTIVAL_FESTIVAL_ID 201
#define FESTIVAL_AUTUMN_ID 203
#define FESTIVAL_WHEEL_OF_FORTUNE_ID 301
#define FESTIVAL_VOID_FIELD_BOSS_PARTICIPATE_ID 302
#define FESTIVAL_VOID_FIELD_MOONLESS_PARTICIPATE_ID 303
#define FESTIVAL_VOID_FIELD_BOSS_KILL_ID 304
#define FESTIVAL_VIP_STATISTICS_ID 305
#define FESTIVAL_RECHARGE_RANK_ID 306
#define FESTIVAL_ADD_RECHARGE_ID 1025
#define FESTIVAL_DAILY_RECHARGE_BEGIN_ID 1003
#define FESTIVAL_DAILY_RECHARGE_END_ID 1009
#define FESTIVAL_FASHION_TREASURE_ID 400
#define FESTIVAL_FASHION_SPLINTERS_ID 401
#define FESTIVAL_ACTIVITY_EGG_ID 402
#define FESTIVAL_BUY_CHEAP_ID 403
#define FESTIVAL_DAILY_FASHION_ID 404
#define FESTIVAL_SEVEN_DAY_LEVEL_ID 501
#define FESTIVAL_SEVEN_DAY_WING_ID 502
#define FESTIVAL_SEVEN_DAY_PET_ID 503
#define FESTIVAL_SEVEN_DAY_FASHION_ID 504
#define FESTIVAL_SEVEN_DAY_BATTLE_ID 505
#define FESTIVAL_SEVEN_DAY_OFFLINE_PLAYER_ID 506
#define FESTIVAL_SEVEN_DAY_MOUNT_ID 507
#define GM_UPDATE_DB_FESTIVAL 1
#define GM_UPDATE_DB_MALL 2
#define RACING_MAX_COUNT 3
#define RACING_ZERO 0
#define RACING_FIVE 5
#define RACING_TEN 10
#define RACING_TWENTY 20
#define MAX_TREASURY_COUNT 3
#define MAX_GOLDTREE_COUNT 3
#define GOLDTREE_TESSERA 239
#define REGULAR_SCORE_S 4
#define REGULAR_SCORE_A 3
#define REGULAR_SCORE_B 2
#define REGULAR_SCORE_C 1
#define REGULAR_SCORE_F 0
#define REGULAR_SCORE_EMPTY 100
#define SHOW_FLAG_NEED_TALK 1
#define SHOW_FLAG_DISAPPEAR 2
#define BOF_REAL_PLAYER_FLAG 1
#define BOF_HAVE_BATTLE_FLAG 2
#define MAX_BOF_PLAYER_NUM 5
#define BOF_POWER_SEGMENT_SCORE 1000
#define LCITY_FLAG_BEING_EMPTY 0
#define LCITY_FLAG_BEING_PRODUCED 1
#define LCITY_FLAG_BEING_BUILD 2
#define LCITY_BUILDING_KINDOM 1
#define LCITY_BUILDING_BRAVESTATUE 2
#define LCITY_BUILDING_CITYDEFENCE 3
#define LCITY_BUILDING_ARMORY 4
#define LCITY_BUILDING_AIRSHIP 5
#define LCITY_BUILDING_LEFT_TOWER 6
#define LCITY_BUILDING_RIGHT_TOWER 7
#define MAX_PLAYER_MAIL_NUM 100
#define MAIL_DIRTY_FLAG 128
#define MAX_MAIL_TITLE_LEN 128
#define MAX_MAIL_CONTENT_LEN 2048
#define MAIL_TYPE_PLAYER 1
#define MAIL_TYPE_PLAYER_SYS 2
#define MAIL_TYPE_SYSTEM 3
#define MAIL_TYPE_GROUP 4
#define MAIL_FLAG_NEW 0
#define MAIL_FLAG_READED 1
#define MAIL_FLAG_DELETED 2
#define MAIL_ATTACH_FLAG_TAKE 1
#define MAIL_GROUP_CREATE_PLAYER 1
#define MAIL_GROUP_GUILD_MEMBER 2
#define MAIL_EXPIRED_DAYS 30
#define MAIL_MESSAGE_TYPE_WORLD_BOSS 1
#define MAIL_MESSAGE_TYPE_ASHURA 2
#define MAIL_MESSAGE_TYPE_OFFLINE_PK 3
#define MAIL_MESSAGE_TYPE_VIP 4
#define MAIL_MESSAGE_TYPE_FRIEND 5
#define MAIL_MESSAGE_TYPE_CRUSADE 6
#define MAIL_MESSAGE_TYPE_TWILIGHT_WAR 7
#define MAIL_MESSAGE_TYPE_CITY_FIGHT 8
#define MAIL_MESSAGE_TYPE_SYSTEM_MAINTENANCE 9
#define MAIL_MESSAGE_TYPE_CITY_SURVIVAL 10
#define MAIL_MESSAGE_TYPE_BATTLE_POWER_RANKING 11
#define MAIL_MESSAGE_TYPE_BAG_FULL 12
#define MAIL_MESSAGE_TYPE_DONATE 13
#define MAIL_MESSAGE_TYPE_CHAOS_FACTION 14
#define MAIL_MESSAGE_TYPE_SEASON_REWARD 15
#define MAX_ADVENTURE_LIST_NUM 5
#define STONE_TURN_GOLD_ONCE 1
#define STONE_TURN_GOLD_NO_ONCE 0
#define RIDE_LEVE_UP_USE_ITEM_ONCE 1
#define RIDE_LEVE_UP_USE_ITEM_NO_ONCE 0
#define MINING_TYPE_GENERAL 1
#define MINING_TYPE_ADVANCED 2
#define LOCK 1
#define DEBLOCKING 2
#define ORD_ADVANCE 1
#define ONCE_ADVANCE 2
#define AUTO_ADVANCE 3
#define WING_CARD 228
#define WING_FEATHER_STAR 225
#define HOROSEO_ITEM_STAR 326
#define LEVE_UP 1
#define ONCE_LEVE_UP 2
#define WING_START_NUM 5
#define SWORD_UPGRADE_ITEMID 708
#define SWORD_ADVANCE_ITEMID 709
#define SWORD_ORD_UPGRADE 1
#define SWORD_ONCE_UPGRADE 2
#define SWORD_ORD_ADVANCE 1
#define SWORD_NCE_ADVANCE 2
#define SWORD_LEVEL_STEP 0
#define SWORD_LEVEL_UPGRADE 1
#define FLAG_MICRO_CLIENT 100
#define FLAG_WELCOME_REWARD 101
#define ACTIVITY_TYPE_ANSWER_QUESTION 1
#define ACTIVITY_TYPE_MINING 2
#define ACTIVITY_TYPE_WORLD_BOSS 3
#define ACTIVITY_TYPE_FACTION_PK 4
#define ACTIVITY_TYPE_TOWER_DEFENCE 5
#define ACTIVITY_TYPE_ASHURA 6
#define ACTIVITY_TYPE_TIMING_TRIGGER 7
#define ACTIVITY_TYPE_CITY_FIGHT 8
#define ACTIVITY_TYPE_TWILIGHT_WAR 9
#define ACTIVITY_TYPE_CITY_SURVIVAL 10
#define ACTIVITY_TYPE_CAPTURE_FLAG 11
#define ACTIVITY_STATUS_ABOUT_BEGIN 1
#define ACTIVITY_STATUS_UNDERWAY 2
#define ACTIVITY_STATE_CLOSED 1
#define ACTIVITY_STATE_START 2
#define ACTIVITY_INTO 1
#define ACTIVITY_LEAVE 0
#define PERIOD_DAY 1
#define PERIOD_WEEK 2
#define PERIOD_MONTH 3
#define TIMING_TRIGGER_DAILY_REFRESH 1
#define TIMING_TRIGGER_EIGHT_REFRESH 8
#define HAVE_NO_REWARD 0
#define HAVE_REWARD 1
#define REASON_INIT 0
#define REASON_FISRT 1
#define FINISH_ACHIVE 1
#define NO_FINISH_ACHIVE 0
#define AHIVE_WIN 1
#define AHIVE_LOSE 0
#define ACHIVE_1 20051
#define ACHIVE_2 20052
#define ACHIVE_BATTLE 3
#define ACHIVE_KILLBOSS 7
#define ACHIVE_MONEYTREE 8
#define ACHIVE_TREASURY 9
#define ACHIVE_TEAM_DHARD 10
#define ACHIVE_TEAM_HELL 11
#define ACHIVE_DAILY_DUNGE 12
#define ACHIVE_LANDER 13
#define ACHIVE_CRUSADE_ORDER_LOW 14
#define ACHIVE_WORLD_BOSS 15
#define ACHIVE_OFF_LINE_PK 16
#define ACHIVE_ON_LINE_PK 17
#define ACHIVE_ASHURA 18
#define ACHIVE_HOSERUING 19
#define ACHIVE_FARM_WORK 20
#define ACHIVE_GUARD 21
#define ACHIVE_TOWER 22
#define ACHIVE_BOSS_CHALLENGE 23
#define ACHIVE_ADVENTUER 24
#define ACHIVE_MINIG 25
#define ACHIVE_ANSWERING 26
#define ACHIVE_REASON_ALL 100
#define ACHIVE_REASON_ONE 101
#define ACHIVE_REASON_ONCE 102
#define ACHIVE_REASON_FIRST 1
#define ACHIVE_REASON_LAST 10
#define ACHIVE_REASON_WIN 1001
#define ACHIVE_REASON_LOSE 1002
#define TASK_TYPE_ORDIARY 1
#define ACTIVITY_TITLE 1
#define ORDINARY_TITLE 2
#define ACHIVE_TITLE 3
#define TITLE_MAX_NUM 3
#define HAVE_TITLE 1
#define HAVE_NO_TITLE 0
#define KILL_FLAG 1
#define DEAD_FLAG 2
#define ALL_PLAYER_REASON 100
#define WORLD_BOSS_TITLE 1
#define ANSWING_TITLE 2
#define OFF_LINE_TITLE 3
#define ASHURA_TITLE 4
#define FOLLOW_TITLE 11
#define TASK_TITLE 10
#define TOWER_LIGHT_TITLE 5
#define GUID_BOSS_TITLE 6
#define USEITEM_TITLE 7
#define HOSERUNING_TITLE 12
#define VIP_TITLE 13
#define GUILD_RANK_TITLE 14
#define BATTLE_RANK_TITLE 15
#define HOROSCOPE_RANK_TITLE 16
#define ASHURA_RANK_TITLE 17
#define GET_VIP_REWARD_TITLE 18
#define WING_RANK_TITLE 19
#define PET_RANK_TITLE 20
#define RIDE_RANK_TITLE 21
#define FB_LIKE_TITLE 22
#define RANKING_PAGE_LINE_NUM 10
#define RANKING_TYPE_ALL_FIRST 100
#define RANKING_TYPE_BATTLE_POWER 1
#define RANKING_TYPE_HOROSCOPE 2
#define RANKING_TYPE_GAME_POINT 3
#define RANKING_TYPE_OFFLINE_BATTLE 4
#define RANKING_TYPE_ASHURA 5
#define RANKING_TYPE_GUILD 6
#define RANKING_TYPE_MONEY_POINT_PAY 7
#define RANKING_TYPE_MONEY_POINT_TRADE 8
#define RANKING_TYPE_FOLLOW_PET 9
#define RANKING_TYPE_RIDE_PET 10
#define RANKING_TYPE_PLAYER_LEVEL 11
#define RANKING_TYPE_TITLE_OFF_LINE_RANK 12
#define RANKING_TYPE_OLD_OFFLINE_BATTLE 13
#define RANKING_TYPE_BATTLEHALL 14
#define RANKING_TYPE_WING 15
#define RANKING_TYPE_FASHION 16
#define RANKING_TYPE_DAILY_REFRESH 1003
#define RANKING_TYPE_PLOT_DUNGON_SCORE 17
#define RANKING_TYPE_ACHIVE_COUNT 18
#define MAINTAIN_TYPE_DEL_EXPIRED_MAIL 1
#define MAINTAIN_TYPE_DEL_EXPIRED_DAILY_RECHARGE 2
#define RANKING_SEASON_PLAYER_DOOR_INFO 1
#define RANKING_TITLE_OFF_LINE_RANK_INFO 2
#define RANKING_SEASON_OLD_OFF_LINE_RANK_INFO 3
#define RANKING_TITLE_RANK_INFO 4
#define RESURGENCE_TYPE_DIRECT 1
#define RESURGENCE_TYPE_ITEM 2
#define RESURGENCE_ITEM 238
#define DEAD_ACTION_GOHOME 0
#define DEAD_ACTION_DIRECT_RESURGENCE 1
#define DEAD_ACTION_ITEM_RESURGENCE 2
#define PASSIVE_SKILL_TYPE_FIRE_DEFENCE 1
#define PASSIVE_SKILL_TYPE_ICE_DEFENCE 2
#define PASSIVE_SKILL_TYPE_THUNDER_DEFENCE 3
#define PASSIVE_SKILL_TYPE_FIRE_UP 4
#define PASSIVE_SKILL_TYPE_ICE_UP 5
#define PASSIVE_SKILL_TYPE_THUNDER_UP 6
#define PASSIVE_SKILL_TYPE_Q_CD 7
#define PASSIVE_SKILL_TYPE_W_CD 8
#define PASSIVE_SKILL_TYPE_E_CD 9
#define PASSIVE_SKILL_TYPE_R_CD 10
#define PASSIVE_SKILL_TYPE_HP_CD 11
#define PASSIVE_SKILL_TYPE_MP_CD 12
#define PASSIVE_SKILL_TYPE_MAX_HP 13
#define PASSIVE_SKILL_TYPE_ADD_HP 14
#define PASSIVE_SKILL_TYPE_RES_HP 15
#define PASSIVE_SKILL_TYPE_MAX_MP 16
#define PASSIVE_SKILL_TYPE_ADD_MP 17
#define PASSIVE_SKILL_TYPE_RES_MP 18
#define PASSIVE_SKILL_TYPE_CONTROL_RED 19
#define PASSIVE_SKILL_TYPE_VAMPIRE 20
#define PASSIVE_SKILL_TYPE_MEDICINE_VAL 21
#define PASSIVE_SKILL_TYPE_MEDICINE_CD 22
#define AUTO_FIGHT_SETTING_ENUM_HP 1
#define AUTO_FIGHT_SETTING_ENUM_HP_ORDER 2
#define AUTO_FIGHT_SETTING_ENUM_MP 3
#define AUTO_FIGHT_SETTING_ENUM_MP_ORDER 4
#define AUTO_FIGHT_SETTING_ENUM_SKILLS 5
#define AUTO_FIGHT_SETTING_ENUM_AUTO_REVIVAL 6
#define AUTO_FIGHT_SETTING_ENUM_AUTO_FIGHT 7
#define AUTO_FIGHT_SETTING_ENUM_AUTO_USE_ATTACK_DRUG 8
#define AUTO_FIGHT_SETTING_ENUM_AUTO_USE_DEFENCE_DRUG 9
#define AUTO_FIGHT_SETTING_ENUM_AUTO_USE_SPEED_DRUG 10
#define AUTO_FIGHT_SETTING_ENUM_AUTO_BUY_ATTACK_DRUG 11
#define AUTO_FIGHT_SETTING_ENUM_AUTO_BUY_DEFENCE_DRUG 12
#define AUTO_FIGHT_SETTING_ENUM_AUTO_BUY_SPEED_DRUG 13
#define AUTO_FIGHT_SETTING_ENUM_AUTO_BUY_HP_DRUG 14
#define AUTO_FIGHT_SETTING_ENUM_AUTO_BUY_MP_DRUG 15
#define FIGHT_MODE_PEACE 1
#define FIGHT_MODE_KILLEVIL 2
#define FIGHT_MODE_GUILD 3
#define FIGHT_MODE_MASSACRE 4
#define ENEMY_RECORD_STATE_ATTACK 1
#define ENEMY_RECORD_STATE_KILLED 2
#define SYSTEM_VERSION_ID_MALL 1
#define SYSTEM_SETTING_ENUM_VOLUME 1
#define SYSTEM_SETTING_ENUM_SE_VOLUME 2
#define SYSTEM_SETTING_ENUM_SHOW_PLAYER 3
#define SYSTEM_SETTING_ENUM_SHOW_PET 4
#define SYSTEM_SETTING_ENUM_SHOW_SHADOW 5
#define SYSTEM_SETTING_ENUM_SHOW_PARTICLE 6
#define SYSTEM_SETTING_ENUM_MIPMAP 7
#define SYSTEM_SETTING_ENUM_VARIABILITY 8
#define SYSTEM_SETTING_ENUM_RIDE_PET 9
#define SYSTEM_SETTING_ENUM_ILLUMINATION 10
#define SYSTEM_SETTING_ENUM_LIGHT 11
#define SYSTEM_SETTING_ENUM_EFFECT_LEVEL 12
#define SYSTEM_SETTING_ENUM_FOG 13
#define SYSTEM_SETTING_ENUM_FRAME 14
#define SYSTEM_SETTING_STATE_HIGH 97
#define SYSTEM_SETTING_STATE_MIDDLE 98
#define SYSTEM_SETTING_STATE_LOW 99
#define SYSTEM_SETTING_ENUM_VARIABILITY_FULL_SCREEN 13
#define SYSTEM_SETTING_ENUM_VARIABILITY_HIGHT 14
#define SYSTEM_SETTING_ENUM_VARIABILITY_MIDDLE 15
#define SYSTEM_SETTING_ENUM_VARIABILITY_LOW 16
#define AUTOBUY_SETTING_ENUM_BOOM_STONE 0
#define AUTOBUY_SETTING_ENUM_QUALITY_STONE 1
#define AUTOBUY_SETTING_ENUM_POWER_FRUIT 2
#define AUTOBUY_SETTING_ENUM_AGILE_FRUIT 3
#define AUTOBUY_SETTING_ENUM_SPIRIT_FRUIT 4
#define AUTOBUY_SETTING_ENUM_PHYS_FRUIT 5
#define AUTOBUY_SETTING_ENUM_STAR_FEATHER 6
#define AUTOBUY_SETTING_ENUM_GUILD_POINT 7
#define AUTOBUY_SETTING_ENUM_VIGOR 8
#define AUTOBUY_SETTING_ENUM_UPGRADE_STONE 9
#define AUTOBUY_SETTING_ENUM_COMPLETE_STONE 10
#define AUTOBUY_SETTING_ENUM_CHANGE_STONE 11
#define AUTOBUY_SETTING_ENUM_REFRESH_STONE 12
#define AUTOBUY_SETTING_ENUM_PLAYER_DOOR_CHALLENGE 13
#define AUTOBUY_SETTING_ENUM_PLAYER_DOOR_KILL_CD 14
#define AUTOBUY_SETTING_ENUM_MONSTER_DOOR_RESET 15
#define AUTOBUY_SETTING_ENUM_BABEL_RESET 16
#define AUTOBUY_SETTING_ENUM_SIGN_MAKEUP 17
#define AUTOBUY_SETTING_ENUM_TREASURE_KILL_CD 18
#define AUTOBUY_SETTING_ENUM_EARNINGCOINS_KILl_CD 19
#define AUTOBUY_SETTING_ENUM_CALLRIDEPET_STONE 20
#define AUTOBUY_SETTING_ENUM_EQUIP_UPSTAR_KILL_CD 21
#define AUTOBUY_SETTING_ENUM_EQUIP_UPSTAR_STONE 22
#define AUTOBUY_SETTING_ENUM_TREASURE_COUNT 23
#define AUTOBUY_SETTING_ENUM_EARNINGCOINS_COUNT 24
#define AUTOBUY_SETTING_ENUM_GUILD_BOSS_EXP 25
#define AUTOBUY_SETTING_ENUM_REVIVAL_ITEM 26
#define AUTOBUY_SETTING_ENUM_MONSTER_DOOR_AUTO_KILL_CD 27
#define AUTOBUY_SETTING_ENUM_EQUIP_JEWEL_COMPOSE 28
#define AUTOBUY_SETTING_ENUM_EQUIP_INLAY_PERFORATION 29
#define AUTOBUY_SETTING_ENUM_PET_STAR 30
#define AUTOBUY_SETTING_ENUM_PET_SURMOUNT_RIME_1 31
#define AUTOBUY_SETTING_ENUM_PET_SURMOUNT_RIME_2 32
#define AUTOBUY_SETTING_ENUM_PET_SURMOUNT_RIME_3 33
#define AUTOBUY_SETTING_ENUM_PET_SURMOUNT_RIME_4 34
#define AUTOBUY_SETTING_ENUM_PET_SOUL_CHIP 35
#define AUTOBUY_SETTING_ENUM_STAR_SOUL 36
#define AUTOBUY_SETTING_ENUM_PROTECT_SOUL_BUY_TIMES 37
#define AUTOBUY_SETTING_ENUM_ANSWER_DOUBLE_BUY 38
#define AUTOBUY_SETTING_ENUM_PASSIV_SKILL_BUY 39
#define AUTOBUY_SETTING_ENUM_WING_FEATHER_BUY 40
#define AUTOBUY_SETTING_ENUM_AKEY_BOOM_STONE 41
#define AUTOBUY_SETTING_ENUM_AKEY_MIDASTOUCH 42
#define AUTOBUY_SETTING_ENUM_AKEY_HORN 43
#define AUTOBUY_SWORD_URGRADE 44
#define AUTOBUY_SWORD_ADVANCE 45
#define AUTOBUY_GUILD_TASK_REFRESH 46
#define AUTOBUY_GUILD_USE_RESURGENCE 47
#define AUTOBUY_GUILD_BUY_RESURGENCE 48
#define AUTOBUY_SETTING_ENUM_BUY_BLUE 49
#define AUTOBUY_SETTING_ENUM_BUY_RED 50
#define AUTOBUY_SETTING_ENUM_AUTO_VOIDFIELD_TYPE 51
#define AUTOBUY_SETTING_ENUM_CURRENT_RESUREGECE 52
#define AUTOBUY_PETFORMATION 53
#define AUTOBUY_SETTING_ENUM_TREASURE_CARD 54
#define AUTOBUY_SETTING_ENUM_SUM 55
#define PLAYER_SETTING_ENUM_HP 1
#define PLAYER_SETTING_ENUM_MP 2
#define VOID_FIELD_SETTING_ENUM_USE_REVIVAL 2
#define VOID_FIELD_SETTING_ENUM_BUY_REVIVAL 3
#define VOID_FIELD_SETTING_ENUM_CURRENT_REVIVAL 4
#define VOID_FIELD_SETTING_ENUM_RECONNECT_ON_LOSS 5
#define BUFF_ITEM_CD 2999
#define BUFF_RIDE_REST 10002
#define SPECIAL_ACTIVITY_FIRST_TIME_RECHARGE 0
#define SPECIAL_ACTIVITY_PLAYER_LEVEL 1
#define SPECIAL_ACTIVITY_BATTLE_POWER_RANKING 2
#define SPECIAL_ACTIVITY_DAILY_RECHARGE 3
#define SPECIAL_ACTIVITY_UPGRADE_WING 4
#define SPECIAL_ACTIVITY_MICRO_CLIENT 5
#define RECHARGE_ID_TOTAL_RECHARGE 1
#define RECHARGE_ID_DAILY_RECHARGE 2
#define MAX_RECHARGE_DAILY_COUNT 14
#define NO_REWARD 0
#define ACCEPTED_REWARD 1
#define CAN_ACCEPT_REWARD 2
#define ONLINE_GROW_REWARD 1
#define ONLINE_FIXED_REWARD 2
#define MAZE_GRID_EMPTY 0
#define MAZE_GRID_EXIT 1
#define MAZE_GRID_EVENT 2
#define MAZE_GRID_TREASURE_BOX 3
#define MAZE_GRID_BARRIER 4
#define MAZE_GRID_REWARD_ENERGY 5
#define MAZE_GRID_FIGHT 6
#define FORMULA_ID_CALC_PLAYER_ATTACK 10
#define FORMULA_ID_CALC_PLAYER_DEFENCE 11
#define FORMULA_ID_CALC_PLAYER_CRITICAL_ATTACK 12
#define FORMULA_ID_CALC_PLAYER_CRITICAL_DAMAGE_ADDITION 13
#define FORMULA_ID_CALC_PLAYER_HIT_RATE 14
#define FORMULA_ID_CALC_PLAYER_DODGE 15
#define FORMULA_ID_CALC_PLAYER_MAXHP 16
#define FORMULA_ID_CALC_PLAYER_MAXMP 17
#define FORMULA_ID_CALC_FINISH_STAR_CD_PRICE 48
#define FORMULA_ID_FOLLOW_PRO 49
#define FORMULA_ID_CALC_WING_EXP 50
#define FORMULA_ID_CALC_DUNGEON_POINT 51
#define FORMULA_ID_CALC_CRITICAL_DAMAGE_ADDITION_PERCENT 52
#define FORMULA_ID_CALC_CRITICAL_ATTACK_PERCENT 53
#define FORMULA_ID_CALC_DODGE_PERCENT 54
#define FORMULA_ID_CALC_CRITICAL_ATTACK_REDUCTION_PERCENT 55
#define FORMULA_ID_CALC_CRITICAL_DAMAGE_REDUCTION_PERCENT 56
#define FORMULA_ID_CALC_VAMPIRE 57
#define FORMULA_ID_CALC_VAMPIRE_DEFENCE 58
#define FORMULA_ID_CALC_CONTROL_REDUCTION 59
#define FORMULA_ID_CALC_CITY_SURVIVAL_REWARD_MONEY 60
#define FORMULA_ID_CALC_CITY_SURVIVAL_REWARD_SOUL 61
#define FORMULA_ID_CALC_STONE_TURN_GOLD 70
#define FORMULA_ID_CALC_RESET_TURNTABLE_COST 71
#define FORMULA_ID_CALC_WORLD_BOSS_REWARD 72
#define FORMULA_ID_CALC_SWORD_EXP 73
#define FORMULA_ID_CALC_REVIVAL_TIME 74
#define LOG_STR_MAX_LEN 256
#define LOG_CLIENT_UDP 1
#define LOG_CLIENT_TCP 2
#define LOG_LOGIN 3
#define LOG_TRADE 4
#define LOG_TASK 5
#define LOG_GAMEPOINT 6
#define LOG_BINDMONEYPOINT 7
#define LOG_ACTIVITY 8
#define LOG_DUNGEON 9
#define LOG_PLAYER_STATE 10
#define LOG_SOUL_POINT 11
#define LOG_ITEM 12
#define LOG_BEHAVIOR 13
#define LOG_PAY 14
#define LOG_EXP 15
#define LOG_SERVICE 16
#define LOG_CREATE_PLAYER 17
#define LOG_PCU 18
#define LOG_DEBUG 19
#define LOG_PlAY_SYSTEM 20
#define LOG_GUILD 21
#define LOG_WEALTH 22
#define ITEM_SUB 1
#define ITEM_ADD 0
#define ITEM_DISCARD 2
#define SOUL_POINT_SUB 1
#define SOUL_POINT_ADD 0
#define DUNGEON_STATE_INTO 1
#define DUNGEON_STATE_LEVE 0
#define FORMULA_ID_CALC_HIT_RATE 101
#define FORMULA_ID_CALC_NORMAL_ATTACK 103
#define FORMULA_ID_CALC_SKILL_ATTACK 104
#define FORMULA_ID_CALC_CRI_ATT_PRO 105
#define FORMULA_ID_CALC_CRI_ATT_DAM 106
#define FORMULA_ID_CALC_VAMPIRE_PRO 107
#define FORMULA_ID_CALC_VAMPIRE_NUM 108
#define FORMULA_ID_CALC_BATTLE_POWER 109
#define FORMULA_ID_CALC_TIPS_DAMAGE 110
#define FORMULA_ID_CALC_PHYSICS_ATTACK 111
#define FORMULA_ID_CALC_MAGIC_ATTACK 112
#define FORMULA_ID_GUILD_BOSS_HP 201
#define FORMULA_ID_GUILD_BOSS_ATTACK 202
#define FORMULA_ID_GUILD_BOSS_DEFENCE 203
#define FORMULA_ID_WORLD_BOSS_HP 204
#define FORMULA_ID_WORLD_BOSS_ATTACK 205
#define FORMULA_ID_WORLD_BOSS_DEFENCE 206
#define FORMULA_ID_PVP_CUT_DOWN_PER 207
#define FORMULA_ID_VOID_FIELD_BOSS_HP 208
#define FORMULA_ID_VOID_FIELD_BOSS_ATTACK 209
#define FORMULA_ID_VOID_FIELD_BOSS_DEFENCE 210
#define FORMULA_ID_VOID_FIELD_SOLO_BOSS_HP 211
#define FORMULA_ID_VOID_FIELD_SOLO_BOSS_ATTACK 212
#define FORMULA_ID_VOID_FIELD_SOLO_BOSS_DEFENCE 213
#define DANCE_TYPE_NONE 0
#define DANCE_TYPE_1 1
#define DANCE_TYPE_2 2
#define DANCE_TYPE_3 3
#define ASHURA_RANK_TYPE_KILL 1
#define ASHURA_RANK_TYPE_DEAD 2
#define TD_ENTER 1
#define TD_LEAVE 2
#define WORLD_BOSS_MAP 5201
#define GROUP_PK_MAP 8001
#define FACTION_PK_RED 5
#define FACTION_PK_BLUE 4
#define FACTION_PK_TYPE_KILL 1
#define FACTION_PK_TYPE_COMBO 2
#define FACTION_PK_TYPE_STOP_COMBO 3
#define FACTION_PK_TYPE_TIME 4
#define FACTION_PK_READY_TIME 180000
#define CITY_FIGHT_FLAG_UNOCCUPY 1
#define CITY_FIGHT_FLAG_OCCUPY 2
#define CITY_FIGHT_FLAG_COMBAT 3
#define OFF_PLAYER_REASON_DEFAULT 0
#define OFF_PLAYER_REASON_RANK 1
#define OFF_PLAYER_REASON_SHOW 2
#define BACK_RESOURCE_STATE_UNCLAIMED 0
#define BACK_RESOURCE_STATE_CLAIMED 1
#define BACK_RESOURCE_STATE_NO_OPEN 2
#define BACK_RESOURCE_USE_GAMEPOINT 0
#define BACK_RESOURCE_USE_MONEYPOINT 1
#define NOT_MEAL_TIME 7500
#define GOT_MEAL_VIGOR 7501
#define GET_MEAL_VIGOR_SUCCESS 7502
#define CORPSESURVIVAL_UNLOCK 1
#define CORPSESURVIVAL_LOCK 0
#define CORPSESURVIVAL_STATE_SIMPLE 1
#define CORPSESURVIVAL_STATE_ORDINARY 2
#define CORPSESURVIVAL_STATE_DIFFICULT 3
#define TREASURE_BRONZE_LEN 8
#define TREASURE_BRONZE_FIRST 4
#define TREASURE_GOLD_FIRST 5
#define TREASURE_BRONZE 2
#define TREASURE_BRONZE_TEN 3
#define TREASURE_GOLD 4
#define TREASURE_GOLD_TEN 5
#define TREASURE_PLATINUM_GOLD 6
#define TREASURE_EXTREME_GOLD 7
#define FASHION_SMELT_NONE 1
#define FASHION_SMELT_ALL 2
#define JOINT_TYPE_FASHION 1
#define JOINT_TYPE_PET 2
#define FASHION_ACTIVATE_TYPE_SIGNIN 1
#define FASHION_ACTIVATE_TYPE_LANDING 2
#define FASHION_ACTIVATE_TYPE_VIP 3
#define FASHION_ACTIVATE_TYPE_LEVEL 4
#define FASHION_SKILL_OPEN_TYPE_ID 1
#define FASHION_SKILL_OPEN_TYPE_NUM 2
#define FASHION_SKILL_OPEN_TYPE_LEVEL 3
#define FASHION_SKILL_OPEN_TYPE_STAR 4
#define BH_TYPE_NORMAL 0
#define BH_TYPE_NIGHTMARE 1
#define BH_TYPE_HELL 2
#define BH_TYPE_SUM 3
#define BH_STAGE_MAX 9
#define BRAVE_HEART_CARD_ID 261
#define PACKAGE_TYPE_INCARNATION 1
#define PACKAGE_TYPE_ITEM_REWARD 2
#define PACKAGE_TYPE_PAY_POINT_LOTTERY 3
#define MULTISERVER_BATTLE_APPLY_ONE 1
#define MULTISERVER_BATTLE_APPLY_THREE 3
#define MULTISERVER_BATTLE_APPLY_ENTER 1
#define MULTISERVER_BATTLE_APPLY_TIME_OUT 2
#define DUNGEON_CROSS_TEAM_ID 5031
#define MULTISERVER_BATTLE_APPLY_QUIT 3
#define MULTISERVER_BATTLE_APPLY_ONE_NUM 2
#define MULTISERVER_BATTLE_MATCH_NUM 3
#define WORLD_MAP_ONLINE_LINE 1
#define WORLD_MAP_OFFLINE_LINE 0
#define WORLD_MAP_START_DUGEON_ID 1004
#define WORLD_MAP_END_DUGEON_ID 1009
#define SHORCUT_TYPE_SHORCUT 1
#define SHORCUT_TYPE_TASTE_VIP 2
#define SHORCUT_TYPE_LIKE 3
#define INVESTMENT_PLAN_GAMEPOINT 1
#define INVESTMENT_PLAN_SOULPOINT 2
#define INVESTMENT_PLAN_WING 3
#define INVESTMENT_PLAN_PET 4
#define GAME_SETTING_TYPE_CHANNEL_NUM 1
#define GAME_SETTING_TYPE_SERVER_OPEN_TIME 3
#define GAME_SETTING_TYPE_WORLD_BOSS_MAX_PLAYER 4
#define GAME_SETTING_TYPE_FACTION_PK_MAX_PLAYER 8
#define GAME_SETTING_TYPE_ASHURA_MAX_PLAYER 9
#define GAME_SETTING_TYPE_CHAT_WORLD_LEVEL 10
#define GAME_SETTING_TYPE_CHAT_TEAM_LEVEL 11
#define GAME_SETTING_TYPE_CHAT_PRIVATE_LEVEL 12
#define GAME_SETTING_TYPE_CHAT_HORN_LEVEL 13
#define GAME_SETTING_TYPE_CHAT_GUILD_LEVEL 14
#define GAME_SETTING_TYPE_SCREEN_PARAMETER 15
#define GAME_SETTING_TYPE_QUALITY_STATE 16
#define GAME_SETTING_TYPE_VIP_LIMITED_PURCHASING_TIME 17
#define GAME_SETTING_TYPE_MULTISERVER_ENTER_NUM 18
#define GAME_SETTING_TYPE_MULTISERVER_YESTERDAY_NUM 19
#define GAME_SETTING_TYPE_MULTISERVER_YESTERDAY_3V3_NUM 20
#define GAME_SETTING_TYPE_TURNTABLE 24
#define GAME_SETTING_TYPE_INVESTMENT_PLAN 25
#define GAME_SETTING_TYPE_VIP_STATISTICS_PLAN 26
#define GAME_SETTING_TYPE_DONATE 27
#define GAME_SETTING_TYPE_VOID_FIELD_MULTI 33
#define GAME_SETTING_TYPE_VOID_FIELD_SOLO 34
#define GAME_SETTING_TYPE_BUY_CHEAP 35
#define GAME_SETTING_TYPE_DAILY_DRAW_FASHION 36
#define GAME_SCREEN_PARAMETER_1 13
#define GAME_SCREEN_PARAMETER_2 14
#define GAME_SCREEN_PARAMETER_3 15
#define GAME_SCREEN_PARAMETER_4 16
#define CHAOS_BATTLE_INFO_TYPE_KILL 1
#define CHAOS_BATTLE_INFO_TYPE_COMBO 2
#define CHAOS_BATTLE_INFO_TYPE_STOP_COMBO 3
#define CHAOS_KILL_INFO_TYPE_PORO_KILL_PORO 1
#define CHAOS_KILL_INFO_TYPE_PORO_KILL_TOWER 2
#define CHAOS_KILL_INFO_TYPE_PORO_KILL_PLAYER 3
#define CHAOS_KILL_INFO_TYPE_PLAYER_KILL_TOWER 4
#define CHAOS_KILL_INFO_TYPE_PLAYER_KILL_PORO 5
#define CHAOS_KILL_INFO_TYPE_TOWER_KILL_PORO 6
#define CHAOS_KILL_INFO_TYPE_TOWER_KILL_PLAYER 7
#define CHAOS_KILL_INFO_TYPE_PORO_SUMMON 8
#define CHAOS_PLAYER_STATE_OUT 1
#define CHAOS_PLAYER_STATE_IN 2
#define TOP_UP_RANK_QUERY_TOTAL_RECHARGE_LINE 1000
#define TOP_UP_RANK_QUERY_UPDATE_INTERVAL 600000
#define TOP_UP_RANK_1ST_BEGIN 1
#define TOP_UP_RANK_1ST_END 1
#define TOP_UP_RANK_2ND_BEGIN 2
#define TOP_UP_RANK_2ND_END 5
#define TOP_UP_RANK_3RD_BEGIN 6
#define TOP_UP_RANK_3RD_END 20
#define OFF_EVENT_RECHARGE_BEGIN 1000000
#define OFF_EVENT_CHAOS_REWARD 1000001
#define OFF_EVENT_RECHARGE_ONE 1040103
#define OFF_EVENT_RECHARGE_END 1009999
#define OFF_EVENT_SINGLE_RECHARGE_COINS 1040111
#define MSG_PLAYER_BASE_BEGIN 1100
#define MSG_PLAYER_BASE_END 1199
#define MSG_CHANGE_MAP_BEGIN 1200
#define MSG_CHANGE_MAP_END 1299
#define MSG_PROTECT_SOUL_BEIGN 1280
#define MSG_PROTECT_SOUL_END 1299
#define MSG_SKILL_BEGIN 1300
#define MSG_SKILL_END 1399
#define MSG_BATTLE_BEGIN 1400
#define MSG_BATTLE_END 1499
#define MSG_ITEM_BEGIN 1500
#define MSG_ITEM_END 1599
#define MSG_EQUIP_BEGIN 1600
#define MSG_EQUIP_END 1699
#define MSG_TASK_BEGIN 1700
#define MSG_TASK_END 1799
#define MSG_TRIGGER_BEGIN 1800
#define MSG_TRIGGER_END 1899
#define MSG_RANDOM_PACKAGE_BEGIN 1900
#define MSG_RANDOM_PACKAGE_END 1999
#define MSG_RANK_BEGIN 2000
#define MSG_RANK_END 2099
#define MSG_VIP_BEGIN 2100
#define MSG_VIP_END 2199
#define MSG_HOROSCOPE_BEGIN 2200
#define MSG_HOROSCOPE_END 2299
#define MSG_FRIEND_BEGIN 2300
#define MSG_FRIEND_END 2399
#define MSG_CHAT_BEGIN 2400
#define MSG_CHAT_END 2499
#define MSG_SALE_BEGIN 2500
#define MSG_SALE_END 2599
#define MSG_ASHURA_BEGIN 2600
#define MSG_ASHURA_END 2699
#define MSG_TEAM_BEGIN 2800
#define MSG_TEAM_END 2899
#define MSG_MAIL_BEGIN 2900
#define MSG_MAIL_END 2999
#define MSG_ANSWER_QUESTION_BEGIN 3000
#define MSG_ANSWER_QUESTION_END 3099
#define MSG_GUILD_BEGIN 3100
#define MSG_GUILD_END 3199
#define MSG_SIGN_BEGIN 3200
#define MSG_SIGN_END 3299
#define MSG_WORLD_BOSS_BEGIN 3300
#define MSG_WORLD_BOSS_END 3399
#define MSG_RACING_BEGIN 3400
#define MSG_RACING_END 3499
#define MSG_MINING_BEGIN 3500
#define MSG_MINING_END 3599
#define MSG_ACTIVITY_BEGIN 3600
#define MSG_ACTIVITY_END 3699
#define MSG_TREASURY_BEGIN 3700
#define MSG_TREASURY_END 3799
#define MSG_ADVENTURE_BEGIN 3800
#define MSG_ADVENTURE_END 3899
#define MSG_WING_BEGIN 3900
#define MSG_WING_END 3999
#define MSG_ONLINE_REWARD_BEGIN 4000
#define MSG_ONLINE_REWARD_END 4099
#define MSG_ACHIVE_BEGIN 4100
#define MSG_ACHIVE_END 4199
#define MSG_MALL_BEGIN 4200
#define MSG_MALL_END 4299
#define MSG_RANKING_LIST_BEGIN 4300
#define MSG_RANKING_LIST_END 4399
#define MSG_TITLE_BEGIN 4400
#define MSG_TITLE_END 4499
#define MSG_FCM_BEGIN 4500
#define MSG_FCM_END 4599
#define MSG_ACTIVATION_CODE_BEGIN 4600
#define MSG_ACTIVATION_CODE_END 4699
#define MSG_TRADE_ORDER_BEGIN 4700
#define MSG_TRADE_ORDER_END 4799
#define MSG_PAY_ORDER_BEGIN 4800
#define MSG_PAY_ORDER_END 4899
#define MSG_RIDE_PET_BEGIN 5000
#define MSG_RIDE_PET_END 5049
#define MSG_PET_BEGIN 5050
#define MSG_PET_END 5099
#define MSG_GOLDTREE_BEGIN 5100
#define MSG_GOLDTREE_END 5199
#define MSG_PLAYER_RESURGENCE_BEGIN 5200
#define MSG_PLAYER_RESURGENCE_END 5299
#define MSG_DAY_INVESTMENT_BEGIN 5300
#define MSG_DAY_INVESTMENT_END 5399
#define MSG_PASSIVE_SKILL_BEGIN 5400
#define MSG_PASSIVE_SKILL_END 5499
#define MSG_SETTING_BEGIN 5500
#define MSG_SETTING_END 5599
#define MSG_LEVEL_INVESTMENT_BEGIN 5600
#define MSG_LEVEL_INVESTMENT_END 5699
#define MSG_INVESTMENT_MANAGER_BEGIN 5700
#define MSG_INVESTMENT_MANAGER_END 5799
#define MSG_LEVEL_ACTIVITY_MANAGER_BEGIN 5800
#define MSG_LEVEL_ACTIVITY_MANAGER_END 5899
#define MSG_SPECIAL_ACTIVITY_MANAGER_BEGIN 5900
#define MSG_SPECIAL_ACTIVITY_MANAGER_END 5999
#define MSG_DANCE_BEGIN 6000
#define MSG_DANCE_END 6099
#define MSG_FACTION_BEGIN 6100
#define MSG_FACTION_END 6199
#define MSG_LIVENESS_BEGIN 6200
#define MSG_LIVENESS_END 6299
#define MSG_TD_BEGIN 6300
#define MSG_TD_END 6399
#define MSG_TIMING_TRIGGER_BEGIN 6400
#define MSG_TIMING_TRIGGER_END 6499
#define MSG_CITY_FIGHT_BEGIN 6500
#define MSG_CITY_FIGHT_END 6599
#define MSG_GAME_NOTIFY_BEGIN 6600
#define MSG_GAME_NOTIFY_END 6699
#define MSG_CONTRAST_BEGIN 6700
#define MSG_CONTRAST_END 6799
#define MSG_CITY_SURVIVAL_BEGIN 6800
#define MSG_CITY_SURVIVAL_END 6899
#define MSG_TOUCH_BEGIN 6900
#define MSG_TOUCH_END 6999
#define MSG_STONE_TURN_GOLD_BEGIN 7000
#define MSG_STONE_TURN_GOLD_END 7099
#define MSG_SINGLE_ANSWER_BEGIN 7100
#define MSG_SINGLE_ANSWER_END 7199
#define MSG_GAIN_BACK_RESOURCE_BEGIN 7400
#define MSG_GAIN_BACK_RESOURCE_END 7499
#define MSG_VIGOR_BEGIN 7500
#define MSG_VIGOR_END 7599
#define MSG_FASHION_BEGIN 7600
#define MSG_FASHION_END 7699
#define MSG_CROSS_TEAM_BEGIN 7700
#define MSG_CROSS_TEAM_END 7799
#define MSG_JUMPING_OFF_BEGIN 8000
#define MSG_JUMPING_OFF_END 8099
#define MSG_ENEMY_BEGIN 8100
#define MSG_ENEMY_END 8199
#define MSG_VOID_FIELD_BEGIN 8200
#define MSG_VOID_FIELD_END 8249
#define MSG_VOID_FIELD_SOLO_BEGIN 8250
#define MSG_VOID_FIELD_SOLO_END 8299
#define MSG_BH_BEGIN 8300
#define MSG_BH_END 8399
#define MSG_SWORD_BEGIN 8400
#define MSG_SWORD_END 8499
#define MSG_ZOMBIE_BEGIN 8500
#define MSG_ZOMBIE_END 8599
#define MSG_TEASER_BEGIN 8600
#define MSG_TEASER_END 8699
#define MSG_GLOBAL_SETTING_BEGIN 8800
#define MSG_GLOBAL_SETTING_END 8899
#define MSG_PROCLAMATION_BEGIN 8900
#define MSG_PROCLAMATION_END 8999
#define MSG_SHORCUT_BEGIN 9000
#define MSG_SHORCUT_END 9099
#define MSG_GAME_SETTING_BEGIN 9100
#define MSG_GAME_SETTING_END 9199
#define MSG_MULTISERVER_BATTLE_BEGIN 9200
#define MSG_MULTISERVER_BATTLE_END 9299
#define MSG_FIELD_BOSS_BEGIN 9300
#define MSG_FIELD_BOSS_END 9399
#define MSG_INVESTMENT_PLAN_BEGIN 9400
#define MSG_INVESTMENT_PLAN_END 9499
#define MSG_PAY_POINT_LOTTERY_BEGIN 9500
#define MSG_PAY_POINT_LOTTERY_END 9599
#define MSG_OFFLINE_EVENT_BEGIN 9600
#define MSG_OFFLINE_EVENT_END 9699
#define MSG_DONATE_BEGIN 9700
#define MSG_DONATE_END 9799
#define MSG_VIP_STATISTICS_BEGIN 9800
#define MSG_VIP_STATISTICS_END 9899
#define MSG_CHAOS_BEGIN 9900
#define MSG_CHAOS_END 9999
#define MSG_TOP_UP_RANK_BEGIN 10000
#define MSG_TOP_UP_RANK_END 10099
#define MSG_VIP_ONLY_DUNGEON_BEGIN 10100
#define MSG_VIP_ONLY_DUNGEON_END 10199
#define MSG_EGG_BEGIN 10200
#define MSG_EGG_END 10299
#define MSG_BUY_CHEAP_BEGIN 10300
#define MSG_BUY_CHEAP_END 10399
#define MSG_DAILY_FASHION_BEGIN 10400
#define MSG_DAILY_FASHION_END 10499
#define MSG_HEAD_PORTRAIT_BEGIN 10500
#define MSG_HEAD_PORTRAIT_END 10599
#define MSG_SKILL_STRENGTHEN_BEGIN 10600
#define MSG_SKILL_STRENGTHEN_END 10699
#define MSG_ALCHEMY_BEGIN 10800
#define MSG_ALCHEMY_END 10899
#define MSG_DECOMPOSE_BEGIN 10900
#define MSG_DECOMPOSE_END 10999
#define GAME_ACTIVE_CODE 0
#define NOVICE_GIFT_CODE 1
#define HTTP_PARAM_STATUS "status"
#define HTTP_PARAM_MSG "msg"
#define HTTP_PARAM_CONTENT "content"
#define HTTP_PARAM_ERRORCODE "errorcode"
#define FUNCTION_CARD_BABEL 100
#define FUNCTION_CARD_MONSTER_DOOR 101
#define FUNCTION_CARD_PROTECTSOUL_NATURAL 102
#define FUNCTION_CARD_PROTECTSOUL_ARCTIC 103
#define FUNCTION_CARD_PROTECTSOUL_HURRICANE 104
#define FUNCTION_CARD_PROTECTSOUL_HOT 105
#define FUNCTION_CARD_PROTECT 106
#define FUNCTION_CARD_PROTECT_RADISH 107
#define FUNCTION_CARD_PLAYER_DOOR 108
#define FUNCTION_CARD_BRAVE_HEART 109
#define EGG_TYPE_NORMAL 1
#define EGG_TYPE_SILVER 2
#define EGG_TYPE_GLOD 3
#define EGG_ONE_KEY_GET 999
#define ERR_SUCCEED 0
#define ERR_FAILED 1
#define ERR_UNFOUND_CONFIG 2
#define ERR_SERVER_ACTIVATED 3
#define ERR_GATESVR_CLOSE 6
#define ERR_GAMESVR_CLOSE 7
#define ERR_CENTERSVR_CLOSE 8
#define ERR_CHANGE_SCENE_FAILED 9
#define ERR_KICKOUT_PLAYER 10
#define ERR_EXCEED_DISTANCE 11
#define ERR_UNFOUND_LEVELUP 12
#define ERR_UNFOUND_EQUIP 13
#define ERR_MAX_EQUIP_QUALITY 14
#define ERR_NO_ENOUGH_SOUL 15
#define ERR_NO_ENOUGH_LVUPSTONE 16
#define ERR_MAX_EQUIP_LEVEL 17
#define ERR_MAX_EQUIP_STAR 18
#define ERR_UNFOUND_TASK 19
#define ERR_TASK_UNFINSH 20
#define ERR_MAX_BUILD_LEVEL 21
#define ERR_BUILD_NOREACH_TIME 22
#define ERR_PRODUCE_NOREACH_TIME 23
#define ERR_NO_ENOUGH_GAMEPOINT 24
#define ERR_NO_REACH_TIME 25
#define ERR_GREATER_KINDOM_LEVEL 26
#define ERR_LOGIN_ONLY_ONE_BUILD 27
#define ERR_SAME_NAME_PLAYER 28
#define ERR_MAX_FRIEND_NUM 29
#define ERR_NO_ENOUGH_BAGPOS 30
#define ERR_DUPLICATE_PLAYER_NAME 31
#define ERR_UNFOUND_ITEM 32
#define ERR_MAX_FOLLOW_PET_LEVEL 33
#define ERR_NO_ENOUGH_VIGOR 34
#define ERR_NO_ENOUGH_MP 35
#define ERR_ITEM_CANT_USE 36
#define ERR_MAX_RUNE_LEVEL 37
#define ERR_MAX_TEAM_MEMBER 38
#define ERR_BOX_COMPLETE_NUM_LACK 39
#define ERR_NO_ENOUGH_PLAYER_LEVEL 40
#define ERR_MAIL_SEND_FAILED 41
#define ERR_MAIL_ATTACH_TAKE 42
#define ERR_PLAYER_NOTONLINE 44
#define ERR_NO_ENOUGH_VIP 46
#define ERR_NO_ENOUGH_MONEYPOINT 47
#define ERR_NO_ENOUGH_HONOR 48
#define ERR_NO_ENOUGH_STAR_SOUL_POINT 49
#define ERR_UNFOUND_PLAYER 50
#define ERR_REPEAT_LOGIN 51
#define ERR_VERIFY_LOGIN 52
#define ERR_OTHER_LOGIN 53
#define ERR_ACCOUNT_INGAME 54
#define ERR_VERSION_ERROR 55
#define ERR_SERVER_NO_READY 56
#define ERR_BAN_ACCOUNT_LOGIN 57
#define ERR_PLAYER_NOT_EXIST_LOGIN 58
#define ERR_ADD_ACCOUNT_LOGIN 59
#define ERR_KUNLUN_EVENT_LOGIN 60
#define ERR_LOAD_DB_LOGIN 61
#define ERR_PLAYER_NOT_EXIT 62
#define ERR_FUNCT_NOT_OPEN 63
#define ERR_RECEIVER_FUNCT_NOT_OPEN 64
#define ERR_FIRST_NAME_CHAR_DIGIT 70
#define ERR_USE_ILLEGAL_NAME_CHAR 71
#define ERR_LESS_MIN_NAME_LENGTH 72
#define ERR_MORE_MAX_NAME_LENGTH 73
#define ERR_HAVE_EXIST_PLAYER_NAME 74
#define ERR_CREATE_PLAYER_FAILED 75
#define ERR_LACK_USERNAME 80
#define ERR_LACK_QID 81
#define ERR_LACK_SERVERID 82
#define ERR_LACK_TIME 83
#define ERR_LACK_SIGN 84
#define ERR_LACK_ISADULT 85
#define ERR_LACK_FCM 86
#define ERR_MISMATCH_SIGN 87
#define ERR_DUNGEON_NOT_EXIST 88
#define ERR_NOENOUG_HUNAG 112
#define ERR_QUALITY 113
#define ERR_FIELDNUM_FULL 114
#define ERR_CAN_SEARCH 115
#define ERR_TRAIN_MODELS_NO_OPEN 116
#define ERR_ITEM_PET_START 117
#define ERR_ITEM_PET_STONE 118
#define ERR_ITEM_PET_SOUL_FRAGAMENT 119
#define ERR_LEVE_UP_BEFOR_STEP 120
#define ERR_MAX_STEP 121
#define ERR_MAX_PLAYER 122
#define ERR_CAN_NOT_LOCK 123
#define ERR_RIDE_ABOB 124
#define ERR_PET_MAX_LEVEL 125
#define ERR_NO_CLEAR_MARK_RIDE 126
#define ERR_RSKILL_INCD 127
#define ERR_VIP_OPERATION 130
#define ERR_SUCCEED_SWAP 150
#define ERR_BAG_NO_ITME 151
#define ERR_NO_MATERIAL 153
#define ERR_BAG_FULL 154
#define ERR_ITEM_NO_ENOUGH_USE_TIME 155
#define ERR_CHAT_FREQUENTLY 160
#define ERR_CHAT_WORLD_LEVEL 161
#define ERR_CHAT_TEAM_LEVEL 162
#define ERR_CHAT_PRIVATE_LEVEL 163
#define ERR_CHAT_HORN_LEVEL 164
#define ERR_CHAT_GUILD_LEVEL 165
#define ERR_MAX_GUILD_MEMBERNUM 170
#define ERR_HAVE_GUILD 171
#define ERR_HAVENT_GUILD 172
#define ERR_UNFOUND_GUILD 173
#define ERR_MAX_GUILD_LEVEL 174
#define ERR_MAX_GUILD_TURNTABLE_NUM 175
#define ERR_NO_ENOUGH_GUILDPOINT 176
#define ERR_CRUSADE_MONSTER_CLOSE 177
#define ERR_GUILD_DUNGEON_CLOSE 178
#define ERR_GUILD_BOSS_KILLED 179
#define ERR_TWILIGHT_WAR_CLOSE 180
#define ERR_TWILIGHT_WAR_BOSS_DEAD 181
#define ERR_CANT_JOIN_NEW_GUILD 182
#define ERR_MAX_GUILD_MEMBER_TURNTABLE_BUY_TIMES 183
#define ERR_INVITE_PLAYER_HAVE_GUILD 184
#define ERR_GUILD_DUPLICATE_GUILD_NAME 185
#define ERR_GUILD_DISMISS 186
#define ERR_GUILD_VICE_PRESIDENT_MAX 187
#define ERR_GUILD_ADD_GAMEPOINT_TIME_LIMIT 188
#define ERR_GUILD_ADD_MONEYPOINT_TIME_LIMIT 189
#define ERR_GUILD_ADD_GUILD_LEVEL_LIMIT 190
#define ERR_GUILD_NO_INHERIT_CHAIRMAN 191
#define ERR_GUILD_SCIENCE_MAX_LEVEL 192
#define ERR_LESS_MIN_GUILD_NAME_LENGTH 193
#define ERR_CITY_FIGHT_NO_START 195
#define ERR_CITY_FIGHT_OCCUPY 196
#define ERR_CITY_FIGHT_DUNGEON_CD 197
#define ERR_ONLINE_PK_CANT_REQUEST 201
#define ERR_ONLINE_PK_TEAM_NO_EXIST 202
#define ERR_ONLINE_PK_CANT_ADDIN 203
#define ERR_ONLINE_PK_INVITER_NO_IN_CITY 204
#define ERR_ONLINE_PK_ACCEPTER_NO_IN_CITY 205
#define ERR_TREASURY_NUMBER_END 220
#define ERR_TREASURY_CD 221
#define ERR_TREASURY_NO_ENOUGH_BUY_COUNT 222
#define ERR_MALL_PRODUCT_UNFOUND 230
#define ERR_MALL_PRODUCT_NOENOUGH 231
#define ERR_MALL_PRODUCT_TIMEOUT 232
#define ERR_MALL_PRODUCT_SELLOUT 233
#define ERR_MALL_PRODUCT_NOTSELL 234
#define ERR_MALL_PRODUCT_SEND_TO_RECEIVER 235
#define ERR_LIMT_BUY_NUM 236
#define ERR_MALL_CANT_PRESENT 237
#define ERR_TRADE_ORDER_SUCCEED 240
#define ERR_TRADE_ORDER_FAILED 241
#define ERR_TRADE_IN_TRADING 242
#define ERR_ADD_FASHION 260
#define ERR_COMPOSE_FASHION 261
#define ERR_NO_ENOUGH_INCARNATION_POINT 262
#define ERR_NO_ENOUGH_INCARNATION 263
#define ERR_NO_ACTIVATE_ITEM 264
#define ERR_NO_FASHION_LEVEL_UP_ITEM 265
#define ERR_NO_FASHION_GET_TREASURE_ITEM 266
#define ERR_NO_FASHION_NO_TYPE 267
#define ERR_NO_ENOUGH_BIND_MONEY_POINT 270
#define ERR_EQUIP_STAR_UP_FAILED 301
#define ERR_CHANGE_DUNGEON_NO_DUNGEON 401
#define ERR_CHANGE_DUNGEON_IN_CHANGE 402
#define ERR_CHANGE_DUNGEON_CANT_JUMP 403
#define ERR_CHANGE_DUNGEON_NOT_BACKCITY 404
#define ERR_CHANGE_DUNGEON_TOO_FAST 405
#define ERR_CHANGE_DUNGEON_NO_COUNT 406
#define ERR_CHANGE_DUNGEON_CLOSED 407
#define ERR_CHANGE_DUNGEON_REPETITION 408
#define ERR_CHANGE_DUNGEON_SEAL 409
#define ERR_ACTIVE_CODE_NOT_FOUND 500
#define ERR_ACTIVE_CODE_USED 501
#define ERR_ACTIVE_CODE_GIFT_ID_USED 502
#define ERR_ACTIVE_NOT_ACTIVE_LOGIN 510
#define ERR_MAX_VIGOR_BUYTIMES 600
#define ERR_WING_ACTIVATE 701
#define ERR_NO_EXIST 702
#define ERR_WIMG_NO_ACTIVATE 703
#define ERR_WIMG_ACTIVATE_FAILED 704
#define ERR_WIMG_MAX_LEVEL 705
#define ERR_WIMG_MAX_PLAYER_LEVEL 706
#define ERR_GOLDTREE_NUMBER_END 801
#define ERR_GOLDTREE_CD 802
#define ERR_GOLDTREE_NO_ENOUGH_BUY_COUNT 803
#define ERR_TASK_REACH_MAX_COUNT 901
#define ERR_TASK_DAILY_MAX_RESET 902
#define ERR_TASK_GUARD_MAX_BUY_COUNT 903
#define ERR_TASK_DAILY_RESET 904
#define ERR_TASK_CAN_TAKE_ONE 920
#define ERR_ASHURA_NO_ENOUGH_COUNT 1000
#define ERR_ASHURA_NO_REWARD 1001
#define ERR_PASSIVE_SKILL_IS_OPEN 1100
#define ERR_PASSIVE_SKILL_NOT_EXIST 1101
#define ERR_PASSIVE_SKILL_NOT_OPEN 1102
#define ERR_PASSIVE_SKILL_LEVEL_NO_EXIST 1103
#define ERR_PASSIVE_SKILL_MAX_LEVEL 1104
#define ERR_NO_ENOUGH_BATTLE_SOUL 1105
#define ERR_PASSIVE_SKILL_LEVEL_GREATER_THAN_PLAYER_LEVEL 1106
#define ERR_PASSIVE_SKILL_NO_AVAILABLE_POINTS 1107
#define ERR_ITEM_CD 1201
#define ERR_NO_ENOUGH_ITEM 1202
#define ERR_SKILL_MAX_LEVEL 1301
#define ERR_NO_TEAM 1401
#define ERR_I_HAS_TEAM 1402
#define ERR_REJECT_JOIN_TEAM 1403
#define ERR_NO_ENOUGH_TEAM_TIMES 1404
#define ERR_NO_TEAM_JOIN 1405
#define ERR_TEAM_MEMBER_NO_READY 1406
#define ERR_TEAM_DUNGEON_REACH_MAX_NUM 1407
#define ERR_NO_TEAM_BUY_TIMES 1408
#define ERR_IN_TEAM_NEED_LEAVE 1409
#define ERR_TEAM_ACCEPTER_UNOPEN 1410
#define ERR_HE_HAS_TEAM 1411
#define ERR_MONSTER_DOOR_IN_AUTO_CHALLENGE 1501
#define ERR_NOT_IN_CITY 1601
#define ERR_DANCE_TYPE_3_NOT_BUY 1602
#define ERR_DANCE_IS_DANCING 1603
#define ERR_DANCE_TYPE_NOT_EXIST 1604
#define ERR_DANCE_NOT_USE 1605
#define ERR_DANCE_IN_BATTLE 1606
#define ERR_ACTIVITY_NO_OPEN 1700
#define ERR_ACTIVITY_CLOSED 1701
#define ERR_ACTIVITY_NO_REACH_LEVEL 1702
#define ERR_ACTIVITY_CANT_JOIN 1703
#define ERR_ACTIVITY_NO_ENOUGH_ENTER 1704
#define ERR_IN_TEAM_CANNT_JOIN_ACTIVITY 1409
#define ERR_MICRO_CLIENT_ACTIVITY_NO_STATUS 1705
#define ERR_MICRO_CLIENT_ACTIVITY_NO_RANGE 1706
#define ERR_RAIDS_TIME_NO_EMPTY 1801
#define ERR_RAIDS_NO_DUGEON 1802
#define ERR_NEED_CLEAR_DUNGEON 1803
#define ERR_RAIDSING_DUNGEON 1804
#define ERR_MAX_PROTECT_SOUL_BUYTIMES 1900
#define ERR_PROTECT_SOUL_NO_OPEN 1901
#define ERR_PROTECT_SOUL_LESS_NUM 1902
#define ERR_PROTECT_SOUL_NO_RAIDS 1903
#define ERR_TD_NO_ENOUGH_ENTER 2000
#define ERR_FACTION_NO_ENOUGH_ENTER 2100
#define ERR_TOUCH_NO_EXIST 2200
#define ERR_TOUCH_START 2201
#define ERR_TOUCH_OUT_RADIUS 2202
#define ERR_ANSWER_HAVE_JOIN 2300
#define ERR_ANSWER_IN_CROSS_GAMESERVER 2301
#define ERR_EQUIP_START_TIME 2400
#define ERR_EQUIP_START_POINT 2401
#define ERR_BABEL_NO_DUNGEON_CAN_RAIDS 2500
#define ERR_BAG_FULL_MALL_SEND 2600
#define ERR_BAG_GRID_UNLOCK_FAIL 2601
#define ERR_BAG_GRID_UNLOCK_MONEYPOINT_LACK 2602
#define ERR_BAG_GRID_UNLOCK_DISABLE 2603
#define ERR_RESOURCE_CLAIMED 2650
#define ERR_JUMPING_OFF_NO_SCORE 2700
#define ERR_ENTER_ZOMBIE_OUT_LIMIT 2701
#define ERR_NONE_ZOMBIE_DUNGEON 2702
#define ERR_PRE_ZOMBIE_NO_FINISH 2703
#define ERR_SWORD_MAX_PLAYER_LEVEL 2800
#define ERR_VOID_FIELD_WORLD_LEVEL_NOT_ENOUGH 2900
#define ERR_VOID_FIELD_PlAYER_LEVEL_NOT_ENOUGH 2901
#define ERR_VOID_FIELD_CANNOT_CHANGE_FIGHT_MODE 3000
#define ERR_ONLIEN_REWARD_GET 4000
#define ERR_MULTISERVER_YESTERDAY_COUNT 4100
#define ERR_MULTISERVER_YESTERDAY_GET 4101
#define ERR_MULTISERVER_NEED_LEVEL 4102
#define ERR_MULTISERVER_NEED_COUNT 4103
#define ERR_MULTISERVER_NEED_TIME 4104
#define ERR_MULTISERVER_NOT_SERVICE 4105
#define ERR_MULTISERVER_ITEM_LIMIT_NUM 4106
#define ERR_MULTISERVER_ITEM_LIMIT_LEVEL 4107
#define ERR_MULTISERVER_YESTERDAY_COUNT_3V3 4108
#define ERR_MULTISERVER_YESTERDAY_GET_3V3 4109
#define ERR_INVESTMENT_PLAN_ADDITIONAL_TIME_OVER 4201
#define ERR_PAY_POINT_EXCHANGE_ITEM_OUT_DATA 4301
#define ERR_PAY_POINT_EXCHANGE_ITEM_NOT_EXIST 4302
#define ERR_PAY_POINT_EXCHANGE_ITEM_POINT_LACK 4303
#define ERR_PAY_POINT_LOTTERY_OUT_DATA 4304
#define ERR_PAY_POINT_LOTTERY_COST_ITEM_LACK 4305
#define ERR_PAY_POINT_LOTTERY_FAIL 4306
#define ERR_VIP_ONLY_DUNGEON_FAIL 4401
#define ERR_VIP_ONLY_DUNGEON_COUNT_LACK 4402
#define ERR_VIP_ONLY_DUNGEON_MONEY_POINT_LACK 4403
#define ERR_FRIEND_EXIST 4500
#define MESSAGEENCODER_MSGID_RANGE 89105
#define MESSAGEENCODER_MSGID_OFFSET 900
/*Defines End*/
#define NET_MSG_HEADER_LEN 20
#define NET_MSG_BUFFER_SIZE 81920
#define USERDATA_TYPE_TRANSFER 1
#define USERDATA_TYPE_FUNC 2
class Net_Packet;
class TransferProxy;
enum EN_MessageEncoder_MessageID
{
    MSG_TEST1 = 90000,
    MSG_TEST2 = 90001,
    MSG_TEST3 = 90002,
    MSG_ECHO_REQ = 90003,
    MSG_ECHO_ACK = 90004,
    MSG_SERVER_INFO_REQ = 900,
    MSG_SERVER_INFO_ACK = 901,
    MSG_SERVER_ACTIVE_REQ = 902,
    MSG_SERVER_ACTIVE_ACK = 903,
    MSG_SERVER_LIST_REQ = 904,
    MSG_SERVER_LIST_ACK = 905,
    MSG_SERVER_GATEID_REQ = 906,
    MSG_SERVER_GATEID_ACK = 907,
    MSG_SERVER_ALL_READY = 908,
    MSG_SERVER_DUNGEON_LIST_NTF = 910,
    MSG_MONITOR_INFO_REQ = 950,
    MSG_MONITOR_INFO_ACK = 951,
    MSG_MONITOR_DUNGEON_INFO_REQ = 952,
    MSG_MONITOR_DUNGEON_INFO_ACK = 953,
    MSG_CROSS_SERVER_ADD = 954,
    MSG_CROSS_SERVER_REMOVE = 955,
    MSG_CROSS_SERVER_LIST_REQ = 956,
    MSG_CROSS_SERVER_LIST_ACK = 957,
    MSG_GAMESERVER_SEAL_REQ = 958,
    MSG_GAMESERVER_SEAL_ACK = 959,
    MSG_ENCRYPT_CONNECT_REQ = 1000,
    MSG_ENCRYPT_PUBLIC_KEY_NTF = 1001,
    MSG_ENCRYPT_PRIVATE_KEY_NTF = 1002,
    MSG_LOGIN_GAME_REQ = 1010,
    MSG_LOGIN_GAME_ACK = 1011,
    MSG_LOGOUT_GAME = 1012,
    MSG_KICKOUT_GAME = 1013,
    MSG_GS_KICKOUT_GAME = 1014,
    MSG_ASK_PLAYER_REQ = 1015,
    MSG_ASK_PLAYER_ACK = 1016,
    MSG_CREATE_PLAYER_REQ = 1017,
    MSG_CREATE_PLAYER_ACK = 1018,
    MSG_IS_CREATE_PLAYER_NAME_REQ = 1019,
    MSG_IS_CREATE_PLAYER_NAME_ACK = 1020,
    MSG_LOAD_PLAYER_REQ = 1021,
    MSG_LOAD_PLAYER_ACK = 1022,
    MSG_SET_PLAYER_ID_REQ = 1023,
    MSG_SET_PLAYER_ID_ACK = 1024,
    MSG_SET_GAMESVR_ID_REQ = 1025,
    MSG_SET_GAMESVR_ID_ACK = 1026,
    MSG_GATESVR_CLOSE_NTF = 1027,
    MSG_SYNC_FRAME_NTF = 1028,
    MSG_PLAYER_INFO = 1101,
    MSG_PLAYER_ENTER_GAME = 1102,
    MSG_PLAYER_PROP_LIST = 1111,
    MSG_CHANGE_PLAYER_NAME_REQ = 1120,
    MSG_CHANGE_PLAYER_NAME_ACK = 1121,
    MSG_SET_MAP_TYPE_REQ = 1122,
    MSG_SET_CURRENT_RESUREGECE_REQ = 1123,
    MSG_IS_UPDATE_PLAYER_NAME_REQ = 1124,
    MSG_IS_UPDATE_PLAYER_NAME_ACK = 1125,
    MSG_DELIVER_PLAYER_INFO_REQ = 1130,
    MSG_DELIVER_PLAYER_INFO_ACK = 1131,
    MSG_WRITEBACK_PLAYER_INFO_REQ = 1140,
    MSG_WRITEBACK_PLAYER_INFO_ACK = 1141,
    MSG_AUTO_SAVE_PLAYER_INFO_REQ = 1142,
    MSG_REFRESH_VIGOR_REQ = 1145,
    MSG_REFRESH_VIGOR_ACK = 1146,
    MSG_BUY_VIGOR_REQ = 1147,
    MSG_CAREER_SET_REQ = 1148,
    MSG_GUIDE_INFO_SET_REQ = 1149,
    MSG_OPEN_SYSTEM_SET_REQ = 1162,
    MSG_PLAYER_LOG_REQ = 1158,
    MSG_BEHAVIOR_LOG_REQ = 1159,
    MSG_LOG_REQ = 1165,
    MSG_MEMBER_PROP_NTF = 1164,
    MSG_WELCOME_ASK_BAG_REWARD_REQ = 1166,
    MSG_DO_CHANGE_ACK = 1167,
    MSG_SERVER_TIME_SYN_REQ = 1196,
    MSG_SERVER_TIME_SYN_ACK = 1197,
    MSG_ERROR_CODE = 1199,
    MSG_ENTER_DUNGEON_REQ = 1200,
    MSG_EXIT_DUNGEON_REQ = 1202,
    MSG_DUNGEON_EVENT_NTF = 1205,
    MSG_OPEN_DUNGEON_NTF = 1213,
    MSG_DUNGEON_RECORD_NTF = 1214,
    MSG_BATTLEUNIT_APPEAR_LIST = 1231,
    MSG_BATTLEUNIT_DISAPPEAR = 1233,
    MSG_SCENEOBJECT_APPEAR_LIST = 1235,
    MSG_SCENEOBJECT_DISAPPEAR = 1237,
    MSG_NOTIFY_PICK_DROP_OJBECT = 1236,
    MSG_GAME_START_REQ = 1238,
    MSG_GAME_LOCK_NTF = 1239,
    MSG_MOVE_REQ = 1244,
    MSG_MOVE_ACK = 1245,
    MSG_CREATURE_MOVE_LIST = 1247,
    MSG_JUMP_NTF = 1248,
    MSG_BOUNCE_NTF = 1249,
    MSG_JUMP_REQ = 1250,
    MSG_CHANGE_DUNGEON_REQ = 1251,
    MSG_CHANGE_DUNGEON_ACK = 1252,
    MSG_CLEAR_DUNGEON_NTF = 1253,
    MSG_RETURN_CITY_REQ = 1254,
    MSG_CLEAR_SCENE_NTF = 1255,
    MSG_SAVE_DUNGEON_SCORE_INFO = 1256,
    MSG_DUNGEON_READY_COUNTDOWN_NTF = 1257,
    MSG_DUNGEON_SCORE_INFO_REQ = 1258,
    MSG_GS_DUNGEON_SCORE_INFO_REQ = 1259,
    MSG_DUNGEON_SCORE_INFO_ACK = 1260,
    MSG_CHANGE_SCENE_REQ = 1262,
    MSG_CHANGE_SCENE_ACK = 1263,
    MSG_SCENE_INFO_REQ = 1266,
    MSG_SCENE_INFO_ACK = 1267,
    MSG_JUMP_DUNGEON_REQ = 1268,
    MSG_DUNGEON_CONDITION_REQ = 1270,
    MSG_DUNGEON_CONDITION_NTF = 1271,
    MSG_DUNGEON_RUN_TIME_INFO_REQ = 1292,
    MSG_DUNGEON_RUN_TIME_INFO_ACK = 1293,
    MSG_DUNGEON_MONSTER_ID_INFO = 1295,
    MSG_USE_SKILL_REQ = 1300,
    MSG_USE_SKILL_NTF = 1301,
    MSG_SKILL_LAUNCH_NTF = 1302,
    MSG_SKILL_BULLET_END_NTF = 1303,
    MSG_SKILL_HIT_NTF = 1304,
    MSG_SKILL_STRIKE_NTF = 1305,
    MSG_SKILL_END_NTF = 1306,
    MSG_BATTLE_PET_NTF = 1309,
    MSG_USE_BASE_SKILL_REQ = 1310,
    MSG_MAKE_SKILL_CD_NTF = 1312,
    MSG_SKILL_COMPONENT_INFO_REQ = 1340,
    MSG_SKILL_COMPONENT_INFO_ACK = 1341,
    MSG_FINAL_SKILL_INFO_NTF = 1344,
    MSG_SOLDIER_SKILL_COMPONENT_INFO_ACK = 1350,
    MSG_SOLDIER_FINAL_SKILL_INFO_NTF = 1351,
    MSG_BUFF_NTF = 1355,
    MSG_TAKE_DAMAGE_NTF = 1401,
    MSG_TAKE_HEAL_NTF = 1403,
    MSG_TAKE_MANA_NTF = 1404,
    MSG_DEAD_NTF = 1405,
    MSG_RELIVE_NTF = 1406,
    MSG_COMBO_KILL_NTF = 1408,
    MSG_DAMAGE_RANK_NTF = 1409,
    MSG_STATE_NTF = 1410,
    MSG_PROPERTY_LIST_NTF = 1411,
    MSG_BATTLE_STATE_NTF = 1412,
    MSG_AI_DEBUG_REQ = 1420,
    MSG_AI_DEBUG_ACK = 1421,
    MSG_PICK_DROP_OBJECT_NTF = 1422,
    MSG_OBJECT_DROP_GOLD_NTF = 1423,
    MSG_BAG_INFO_REQ = 1500,
    MSG_BAG_INFO_ACK = 1501,
    MSG_OPT_ITEM_REQ = 1502,
    MSG_OPT_ITEM_INFO_NTF = 1503,
    MSG_CONSUME_CD_NTF = 1504,
    MSG_BAG_SORT_REQ = 1505,
    MSG_OPT_ITEM_ACK = 1506,
    MSG_UPDATE_EQUIP_INFO_NTF = 1510,
    MSG_SYNTHETIZE_JEWEL_REQ = 1520,
    MSG_SYNTHETIZE_JEWEL_ACK = 1521,
    MSG_UPGRADE_JEWEL_REQ = 1522,
    MSG_UPGRADE_JEWEL_ACK = 1523,
    MSG_POTION_SET_REQ = 1525,
    MSG_POTION_SET_ACK = 1526,
    MSG_NPC_BUY_REQ = 1530,
    MSG_NPC_BUY_ACK = 1531,
    MSG_HONOR_BUY_REQ = 1540,
    MSG_BIND_MONEY_POINT_BUY_REQ = 1550,
    MSG_GEM_SOCKET_REQ = 1560,
    MSG_GEM_SOCKET_ACK = 1561,
    MSG_GEM_UNSOCKET_REQ = 1562,
    MSG_GEM_UNSOCKET_ACK = 1563,
    MSG_GEM_FUSE_REQ = 1564,
    MSG_GEM_FUSE_ACK = 1565,
    MSG_GEM_EVOLUTE_REQ = 1566,
    MSG_GEM_EVOLUTE_ACK = 1567,
    MSG_GEM_ADD_HOLE_REQ = 1558,
    MSG_GEM_ADD_HOLE_ACK = 1559,
    MSG_EQUIP_QUALITY_UP_REQ = 1650,
    MSG_EQUIP_QUALITY_UP_ACK = 1651,
    MSG_EQUIP_WASH_UP_REQ = 1652,
    MSG_EQUIP_WASH_UP_ACK = 1653,
    MSG_EQUIP_WASH_UP_USE_OLD_REQ = 1654,
    MSG_EQUIP_WASH_UP_USE_OLD_ACK = 1655,
    MSG_EQUIP_WASH_UP_USE_NEW_REQ = 1656,
    MSG_EQUIP_WASH_UP_USE_NEW_ACK = 1657,
    MSG_EQUIP_STAR_UP_REQ = 1658,
    MSG_EQUIP_STAR_UP_ACK = 1659,
    MSG_EQUIP_ENCHANT_REQ = 1660,
    MSG_EQUIP_ENCHNAT_ACK = 1661,
    MSG_TASK_UPDATE_NTF = 1701,
    MSG_TASK_CHANGE_NTF = 1703,
    MSG_TASK_REFRESH_TIME_REQ = 1704,
    MSG_TASK_REFRESH_ACK = 1705,
    MSG_TASK_INFO_NTF = 1706,
    MSG_TAKE_TASK_REQ = 1708,
    MSG_TASK_TALK_NPC = 1710,
    MSG_TASK_MICRO_CLIENT = 1712,
    MSG_TASK_CHANGE_DUNGEON_REQ = 1714,
    MSG_TASK_REWARD_REQ = 1720,
    MSG_TASK_REWARD_ACK = 1721,
    MSG_TASK_QUALITY_REQ = 1722,
    MSG_TASK_COMPLETE_REQ = 1723,
    MSG_TASK_ITEM_ACK = 1724,
    MSG_TASK_CRUSADE_REFRESH_REQ = 1725,
    MSG_TASK_CRUSADE_GIVEUP_REQ = 1752,
    MSG_TASK_RECEIVE_BOX_REQ = 1726,
    MSG_TASK_RECEIVE_BOX_ACK = 1727,
    MSG_TASK_GUARD_REFRESH_REQ = 1728,
    MSG_TASK_FESTIVAL_REWARD_REQ = 1730,
    MSG_TASK_FESTIVAL_REWARD_ACK = 1731,
    MSG_TASK_DAILY_RESET_REQ = 1742,
    MSG_TASK_DAILY_RESET_ACK = 1743,
    MSG_TASK_GUARD_BUY_REQ = 1744,
    MSG_TASK_GUARD_BUY_ACK = 1745,
    MSG_TASK_GUILD_RESET_REQ = 1746,
    MSG_TASK_GUILD_RESET_ACK = 1747,
    MSG_TASK_GUILD_BOX_REWARD_REQ = 1748,
    MSG_TASK_MICRO_CLIENT_STATE_REQ = 1749,
    MSG_TASK_FESTIVAL_TMPL_LIST_REQ = 1750,
    MSG_TASK_FESTIVAL_TMPL_LIST_ACK = 1751,
    MSG_TRIGGER_ACTIVATE_REQ = 1802,
    MSG_TRIGGER_ACTIVATE_ACK = 1803,
    MSG_TRIGGER_STATE_NTF = 1804,
    MSG_NOTIFY_TRIGGER_FLAG = 1811,
    MSG_SERVER_PACKAGE_RECORD_LOAD_REQ = 1900,
    MSG_SERVER_PACKAGE_RECORD_LOAD = 1901,
    MSG_SERVER_PACKAGE_RECORD_FILL = 1902,
    MSG_MONSTER_DOOR_INFO_REQ = 2000,
    MSG_MONSTER_DOOR_INFO_ACK = 2001,
    MSG_MONSTER_DOOR_SELECT_REQ = 2002,
    MSG_MONSTER_DOOR_RESET_REQ = 2004,
    MSG_MONSTER_DOOR_RESET_ACK = 2005,
    MSG_MONSTER_DOOR_RAID_REQ = 2006,
    MSG_MONSTER_DOOR_RAID_ACK = 2007,
    MSG_MONSTER_DOOR_END_NTF = 2009,
    MSG_MONSTER_DOOR_AUTO_REQ = 2010,
    MSG_MONSTER_DOOR_AUTO_ACK = 2011,
    MSG_MONSTER_DOOR_KILL_CD_REQ = 2012,
    MSG_MONSTER_DOOR_KILL_CD_ACK = 2013,
    MSG_MONSTER_DOOR_CD_OVER_REQ = 2014,
    MSG_MONSTER_DOOR_CD_OVER_ACK = 2015,
    MSG_PLAYER_DOOR_INFO_REQ = 2025,
    MSG_PLAYER_DOOR_INFO_ACK = 2026,
    MSG_PLAYER_DOOR_SELECT_REQ = 2027,
    MSG_PLAYER_DOOR_END_NTF = 2029,
    MSG_OFFLINE_PLAYER_INFO_REQ = 2031,
    MSG_OFFLINE_PLAYER_BYNAME_REQ = 2032,
    MSG_OFFLINE_PLAYER_INFO_ACK = 2033,
    MSG_OFFLINE_PLAYER_CLIENT_REQ = 2034,
    MSG_OFFLINE_PLAYER_CLIENT_ACK = 2035,
    MSG_PLAYER_DOOR_REWARD_REQ = 2041,
    MSG_PLAYER_DOOR_REWARD_ACK = 2042,
    MSG_PLAYER_DOOR_REPORT_NTF = 2043,
    MSG_PLAYER_DOOR_RESET_CHALLENGE_COUNT_REQ = 2045,
    MSG_PLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK = 2046,
    MSG_PLAYER_DOOR_ADD_CHALLENGE_COUNT_REQ = 2047,
    MSG_PLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK = 2048,
    MSG_PLAYER_DOOR_KILL_CD_REQ = 2049,
    MSG_PLAYER_DOOR_KILL_CD_ACK = 2050,
    MSG_PLAYER_DOOR_CD_OVER_REQ = 2051,
    MSG_PLAYER_DOOR_CD_OVER_ACK = 2052,
    MSG_PLAYER_DOOR_REWARD_INFO_REQ = 2053,
    MSG_PLAYER_DOOR_REWARD_INFO_ACK = 2054,
    MSG_PLAYER_DOOR_MY_OLD_RANK_NTF = 2056,
    MSG_VIP_BUY_REQ = 2150,
    MSG_VIP_BUY_ACK = 2151,
    MSG_VIP_REFRESH_REQ = 2152,
    MSG_VIP_REFRESH_ACK = 2153,
    MSG_VIP_REWARD_REQ = 2154,
    MSG_VIP_REWARD_ACK = 2155,
    MSG_VIP_GIFT_REQ = 2156,
    MSG_VIP_GIFT_ACK = 2157,
    MSG_VIP_INIT_REQ = 2158,
    MSG_VIP_INIT_ACK = 2159,
    MSG_EXPERIENCE_VIP_RECEIVE_REQ = 2160,
    MSG_EXPERIENCE_VIP_EXPIRE_REQ = 2161,
    MSG_EXPERIENCE_VIP_END_REQ = 2162,
    MSG_EXPERIENCE_VIP_STATE_REQ = 2163,
    MSG_EXPERIENCE_VIP_STATE_ACK = 2164,
    MSG_HOROSCOPE_INFO_REQ = 2200,
    MSG_HOROSCOPE_INFO_ACK = 2201,
    MSG_HOROSCOPE_LEVELUP_REQ = 2202,
    MSG_HOROSCOPE_LEVELUP_ACK = 2203,
    MSG_HOROSCOPE_LEVELUP_CMPL_REQ = 2204,
    MSG_HOROSCOPE_LEVELUP_CMPL_ACK = 2205,
    MSG_FRIEND_INFO_REQ = 2300,
    MSG_FRIEND_INFO_NTF = 2301,
    MSG_FRIEND_ADD_REQ = 2302,
    MSG_FRIEND_ADD_ACK = 2303,
    MSG_FRIEND_ADD_ANS = 2304,
    MSG_FRIEND_ADD_CFM = 2305,
    MSG_FRIEND_DEL_REQ = 2306,
    MSG_FRIEND_DEL_ACK = 2307,
    MSG_FRIEND_QUICK_ADD_REQ = 2310,
    MSG_FRIEND_QUICK_ADD_ACK = 2311,
    MSG_CHAT_REQ = 2400,
    MSG_CHAT_ACK = 2401,
    MSG_MODIFY_CHAT = 2402,
    MSG_SERVER_MARQUEE = 2403,
    MSG_MESSAGE_NTF = 2404,
    MSG_MARQUEE_REQ = 2406,
    MSG_MARQUEE_NTF = 2407,
    MSG_ASHURA_INFO_NTF = 2600,
    MSG_ASHURA_GET_AWARD_REQ = 2601,
    MSG_ASHURA_BATTLE_ACK = 2602,
    MSG_ASHURA_RANK_ACK = 2603,
    MSG_ASHURA_START_NTF = 2604,
    MSG_ASHURA_END_NTF = 2605,
    MSG_ASHURA_END_ACK = 2606,
    MSG_ASHURA_MARQUEE_NTF = 2607,
    MSG_BABEL_INFO_REQ = 2700,
    MSG_BABEL_INFO_ACK = 2701,
    MSG_BABEL_START_REQ = 2702,
    MSG_BABEL_START_ACK = 2703,
    MSG_BABEL_RESET_REQ = 2704,
    MSG_BABEL_RESET_ACK = 2705,
    MSG_BABEL_RAIDS_REQ = 2706,
    MSG_BABEL_RAIDS_ACK = 2707,
    MSG_BABEL_INFO_NTF = 2709,
    MSG_BABEL_OPEN_NTF = 2710,
    MSG_BABEL_END_NTF = 2711,
    MSG_TEAM_INFO_REQ = 2800,
    MSG_TEAM_INFO_NTF = 2801,
    MSG_CREATE_TEAM_REQ = 2802,
    MSG_CREATE_TEAM_ACK = 2803,
    MSG_DESTORY_TEAM_REQ = 2804,
    MSG_DESTORY_TEAM_ACK = 2805,
    MSG_TEAM_MEMBER_UPDATE_INFO = 2824,
    MSG_TEAM_MEMBER_RESET_STATE = 2825,
    MSG_TEAM_QUICK_JOIN_REQ = 2826,
    MSG_TEAM_QUICK_JOIN_ACK = 2827,
    MSG_TEAM_MEMBER_DEL_REQ = 2830,
    MSG_TEAM_MEMBER_DEL_ACK = 2831,
    MSG_TEAM_SHOW_LIST_REQ = 2840,
    MSG_TEAM_SHOW_LIST_ACK = 2841,
    MSG_TEAM_FLY_REQ = 2850,
    MSG_TEAM_MEMBER_ENTER_NTF = 2870,
    MSG_TEAM_MEMBER_LEAVE_NTF = 2871,
    MSG_MAIL_INFO_REQ = 2900,
    MSG_MAIL_INFO_ACK = 2901,
    MSG_MAIL_INFO_NTF = 2903,
    MSG_MAIL_OPT_REQ = 2904,
    MSG_MAIL_GET_ATTACH_REQ = 2906,
    MSG_MAIL_GET_ATTACH_ACK = 2907,
    MSG_MAIL_SEND_REQ = 2910,
    MSG_MAIL_SEND_ACK = 2911,
    MSG_MAIL_DEL_EXPIRED_MAIL_NTF = 2920,
    MSG_MAIL_OPEN_SYSTEM_REQ = 2921,
    MSG_ANSWER_READY_REQ = 3000,
    MSG_ANSWER_READY_ACK = 3001,
    MSG_ANSWER_QUESTION_CMF = 3002,
    MSG_ANSWER_QUESTION_NTF = 3003,
    MSG_ANSWER_RESULT_NTF = 3005,
    MSG_DOUBLE_SCORE_REQ = 3006,
    MSG_DOUBLE_SCORE_ACK = 3007,
    MSG_BUY_DOUBLE_REQ = 3008,
    MSG_ANSWER_SCORE_SAVE_NTF = 3009,
    MSG_ANSWER_GEN_RANK_NTF = 3011,
    MSG_ANSWER_TOPRANK_REQ = 3012,
    MSG_ANSWER_TOPRANK_ACK = 3013,
    MSG_ANSWER_PLAYER_RANK_REQ = 3014,
    MSG_ANSWER_PLAYER_RANK_ACK = 3015,
    MSG_ANSWER_REWARD_REQ = 3016,
    MSG_ANSWER_REWARD_ACK = 3017,
    MSG_ANSWER_END_NTF = 3021,
    MSG_ANSWER_EXIT_NTF = 3022,
    MSG_GUILD_INFO_REQ = 3100,
    MSG_GUILD_INFO_NTF = 3101,
    MSG_GUILD_LIST_REQ = 3102,
    MSG_GUILD_LIST_ACK = 3103,
    MSG_GUILD_APPLY_LIST_REQ = 3104,
    MSG_GUILD_APPLY_LIST_ACK = 3105,
    MSG_APPLY_INFO_NTF = 3107,
    MSG_GUILD_ID_NTF = 3109,
    MSG_CREATE_GUILD_REQ = 3110,
    MSG_CREATE_GUILD_ACK = 3111,
    MSG_DESTROY_GUILD_REQ = 3112,
    MSG_VIEW_GUILD_INFO_REQ = 3114,
    MSG_VIEW_GUILD_INFO_ACK = 3115,
    MSG_INVITE_JOIN_GUILD_REQ = 3120,
    MSG_INVITE_JOIN_GUILD_ANS = 3122,
    MSG_INVITE_JOIN_GUILD_CFM = 3123,
    MSG_APPLY_JOIN_GUILD_REQ = 3124,
    MSG_APPLY_JOIN_GUILD_REQ_ACK = 3125,
    MSG_APPLY_JOIN_GUILD_ANS = 3126,
    MSG_GUILD_MEMBER_DEL_REQ = 3130,
    MSG_GUILD_SET_OFFICE_REQ = 3132,
    MSG_GUILD_SET_FLAG_REQ = 3134,
    MSG_GUILD_INHERIT_ATEVENT_REQ = 3135,
    MSG_GUILD_DONATE_REQ = 3140,
    MSG_GUILD_DONATE_ACK = 3141,
    MSG_GUILD_SET_BULLETIN_REQ = 3142,
    MSG_GUILD_ADD_GUILDPOINT_NTF = 3143,
    MSG_GUILD_BUY_REQ = 3144,
    MSG_GUILD_BUY_GUILDPOINT_REQ = 3146,
    MSG_GUILD_BUY_MEMBER_TURNTABLE_REQ = 3148,
    MSG_GUILD_WELFARE_INFO_REQ = 3150,
    MSG_GUILD_WELFARE_INFO_ACK = 3251,
    MSG_GUILD_RAND_TURNTABLE_REQ = 3152,
    MSG_GUILD_RAND_TURNTABLE_ACK = 3153,
    MSG_GUILD_RAND_TURNTABLE_RESULT_ACK = 3155,
    MSG_GUILD_MEMBER_TURNTABLE_REQ = 3156,
    MSG_GUILD_MEMBER_TURNTABLE_ACK = 3157,
    MSG_GUILD_MEMBER_TURNTABLE_RESULT_ACK = 3159,
    MSG_GUILD_REWARD_PERSONAL_WELFARE = 3160,
    MSG_GUILD_ADDITION_PROMOTE_REQ = 3162,
    MSG_GUILD_ADDITION_PROMOTE_ACK = 3163,
    MSG_GUILD_ADDITION_PROMOTE_TO_CENTER = 3164,
    MSG_GUILD_ADDITION_PROMOTE_TO_GAME = 3165,
    MSG_GUILD_SCIENCE_PLAYER_INFO_REQ = 3166,
    MSG_GUILD_SCIENCE_PLAYER_INFO_ACK = 3167,
    MSG_GUILD_SCIENCE_INFO_NTF = 3168,
    MSG_GUILD_BOSS_LEVELUP_REQ = 3170,
    MSG_GUILD_BOSS_COUNTDOWN_REQ = 3172,
    MSG_GUILD_BOSS_COUNTDOWN_ACK = 3173,
    MSG_GUILD_BOSS_SET_TIME_REQ = 3174,
    MSG_GUILD_CRUSADE_BOSS_END_NTF = 3178,
    MSG_GUILD_CRUSADE_BOSS_TIME_SAVE = 3179,
    MSG_GUILD_CRUSADE_BOSS_DAMAGE_NTF = 3180,
    MSG_GUILD_CRUSADE_BOSS_RANK_SAVE = 3181,
    MSG_GUILD_CRUSADE_BOSS_RANK_REQ = 3182,
    MSG_GUILD_CRUSADE_BOSS_RANK_ACK = 3183,
    MSG_GUILD_TWILIGHT_WAR_DAMAGE_NTF = 3188,
    MSG_GUILD_TWILIGHT_WAR_RANK_SAVE = 3189,
    MSG_GUILD_TWILIGHT_WAR_RANK_REQ = 3190,
    MSG_GUILD_TWILIGHT_WAR_RANK_ACK = 3191,
    MSG_GUILD_TWILIGHT_WAR_BATTLEFIELD_NTF = 3193,
    MSG_GUILD_TWILIGHT_WAR_END_NTF = 3195,
    MSG_GUILD_TWILIGHT_WAR_OPEN_NTF = 3197,
    MSG_GUILD_TWILIGHT_WAR_CLOSE_NTF = 3198,
    MSG_GUILD_NOTICE_ACK = 3199,
    MSG_SIGN_REQ = 3200,
    MSG_SIGN_ACK = 3201,
    MSG_SIGN_INFO_REQ = 3208,
    MSG_SIGN_INFO_ACK = 3209,
    MSG_WORLD_BOSS_START_NTF = 3300,
    MSG_WORLD_BOSS_END_NTF = 3301,
    MSG_WORLD_BOSS_DAMAGE_LIST_NTF = 3310,
    MSG_WORLD_BOSS_DAMAGE_NTF = 3311,
    MSG_WORLD_BOSS_CLEAR_NTF = 3312,
    MSG_WORLD_BOSS_KILL_INFO_NTF = 3313,
    MSG_WORLD_BOSS_INFO_LOAD_REQ = 3314,
    MSG_WORLD_BOSS_INFO_LOAD = 3315,
    MSG_WORLD_BOSS_INFO_FILL = 3316,
    MSG_RACING_REFRESH_REQ = 3400,
    MSG_RACING_REFRESH_ACK = 3401,
    MSG_RACING_ENTER_REQ = 3402,
    MSG_RACING_ENTER_ACK = 3403,
    MSG_MINING_REQ = 3500,
    MSG_MINING_ACK = 3501,
    MSG_MINING_STOP_REQ = 3502,
    MSG_MINING_STOP_ACK = 3503,
    MSG_MINING_COMPLETE_REQ = 3504,
    MSG_MINING_COMPLETE_ACK = 3505,
    MSG_MINING_REFRESH_REQ = 3506,
    MSG_MINING_REFRESH_ACK = 3507,
    MSG_ACTIVITY_LIST_REQ = 3601,
    MSG_ACTIVITY_LIST_NTF = 3602,
    MSG_ACTIVITY_ADD_REQ = 3604,
    MSG_ACTIVITY_UPDATE_REQ = 3605,
    MSG_ACTIVITY_DELETE_REQ = 3606,
    MSG_ASHURA_START_ANNOUNCE = 3607,
    MSG_TREASURY_INFO_REQ = 3700,
    MSG_TREASURY_INFO_ACK = 3701,
    MSG_TREASURY_END_ACK = 3702,
    MSG_TREASURY_INFO_NTF = 3703,
    MSG_TREASURY_CD_REQ = 3704,
    MSG_TREASURY_BUY_REQ = 3705,
    MSG_TREASURY_BUY_ACK = 3706,
    MSG_ADVENTURE_INFO_REQ = 3800,
    MSG_ADVENTURE_INFO_NTF = 3801,
    MSG_ADVENTURE_JOIN_REQ = 3802,
    MSG_ADVENTURE_CMPL_REQ = 3804,
    MSG_ADVENTURER_LIST_REQ = 3806,
    MSG_ADVENTURER_LIST_ACK = 3807,
    MSG_ADVENTURE_ROB_REQ = 3810,
    MSG_ADVENTURE_ROB_ACK = 3811,
    MSG_ADVENTURE_ADD_REQ = 3820,
    MSG_WING_INFO_REQ = 3900,
    MSG_WING_INFO_ACK = 3901,
    MSG_WING_ADVANCE_REQ = 3902,
    MSG_WING_ADVANCE_ACK = 3903,
    MSG_WING_TRANSMOGRIFICATION_REQ = 3904,
    MSG_WING_TRANSMOGRIFICATION_ACK = 3905,
    MSG_WING_ACTIVATE_REQ = 3906,
    MSG_WING_ACTIVATE_ACK = 3907,
    MSG_WING_PRO_NTF = 3909,
    MSG_ONLINE_REWARD_REQ = 4000,
    MSG_ONLINE_REWARD_ACK = 4001,
    MSG_GROW_LEVEL_GIFT_REQ = 4002,
    MSG_GROW_LEVEL_GIFT_ACK = 4003,
    MSG_BESTOW_REWARD_REQ = 4004,
    MSG_BESTOW_REWARD_ACK = 4005,
    MSG_ONLINE_REWARD_INFO_REQ = 4006,
    MSG_ONLINE_REWARD_INFO_ACK = 4007,
    MSG_INST_ACHIVE_REQ = 4100,
    MSG_INST_ACHIVE_ACK = 4101,
    MSG_ACHIVE_INFO_ACK = 4102,
    MSG_ACHIVE_GETOBJ_REQ = 4103,
    MSG_RELOAD_MALL_INFO = 4200,
    MSG_MALL_INFO_NOTIFY = 4201,
    MSG_MALL_INFO_REQ = 4210,
    MSG_MALL_INFO_ACK = 4211,
    MSG_MALL_PRODUCT_REQ = 4212,
    MSG_MALL_PRODUCT_ACK = 4213,
    MSG_RESTRICTION_LIST_ACK = 4215,
    MSG_MALL_BUY_REQ = 4220,
    MSG_MALL_BUY_ACK = 4221,
    MSG_MALL_BUY_NTF = 4223,
    MSG_LIMIT_BUY_REQ = 4224,
    MSG_LIMIT_BUY_INFO = 4225,
    MSG_LIMIT_BUY_INFO_CLEAR_REQ = 4226,
    MSG_RANKING_REFRESH_REQ = 4302,
    MSG_GMRANKING_REFRESH_REQ = 4303,
    MSG_RANKING_RANK_REQ = 4304,
    MSG_RANKING_RANK_ACK = 4305,
    MSG_RANKING_PLAYER_ID_REQ = 4306,
    MSG_RANKING_PLAYER_ID_ACK = 4307,
    MSG_RANKING_CHANGE_REQ = 4308,
    MSG_RANKING_CHANGE_ACK = 4309,
    MSG_RANKING_INFO_REQ = 4310,
    MSG_RANKING_INFO_NTF = 4311,
    MSG_RANKING_INFO_ACK = 4312,
    MSG_RANKING_SAVED_NTF = 4313,
    MSG_RANKING_DAILY_REFRESH = 4314,
    MSG_RANKING_OFFLINE_FIRST_CHANGE = 4315,
    MSG_RANKING_TOP_RANK_NTF = 4316,
    MSG_RANKING_HOURS_FRESH_RANK_NTF = 4317,
    MSG_RANKING_TOP_UP_RANK_QUERY_CREATE_REQ = 4318,
    MSG_RANKING_TOP_UP_RANK_QUERY_ACK = 4319,
    MSG_INST_TITLE_REQ = 4400,
    MSG_INST_TITLE_ACK = 4401,
    MSG_EQUIP_REQ = 4402,
    MSG_UPDATE_TITLE = 4403,
    MSG_PLAYER_TITLE_NTF = 4404,
    MSG_FCM_INFO_REQ = 4500,
    MSG_FCM_INFO_ACK = 4501,
    MSG_ACTIVECODE_USE_REQ = 4600,
    MSG_ACTIVECODE_USE_ACK = 4601,
    MSG_ACTIVECODE_USE_NTF = 4602,
    MSG_TRADE_ORDER_REQ = 4700,
    MSG_TRADE_ORDER_ACK = 4701,
    MSG_TRADE_ORDER_STATE_NTF = 4703,
    MSG_TRADE_ORDER_GROWTH_POINT = 4705,
    MSG_PAY_ORDER_REQ = 4800,
    MSG_RIDE_PET_LIST_NTF = 5000,
    MSG_INIT_RIDE_PET_REQ = 5001,
    MSG_INIT_RIDE_PET_ACK = 5002,
    MSG_RIDE_PET_LEVELUP_REQ = 5003,
    MSG_RIDE_PET_LEVELUP_ACK = 5004,
    MSG_RIDE_PET_RIDEORFREE_REQ = 5005,
    MSG_RIDE_PET_OPENfILED_REQ = 5006,
    MSG_RIDE_PET_OPENfILED_ACK = 5007,
    MSG_RIDE_PET_MARK_REQ = 5009,
    MSG_RIDE_PET_MARK_ACK = 5010,
    MSG_RIDE_PET_ATLAS_ACK = 5011,
    MSG_RIDE_PET_TRAIN_POS_REQ = 5012,
    MSG_RIDE_PET_STONE_TRAIN_REQ = 5013,
    MSG_RIDE_PET_END_TRAIN_REQ = 5014,
    MSG_RIDE_PET_RIGHT_NOW_TRAIN_REQ = 5015,
    MSG_RIDE_PET_TRAIN_INIT_LIST = 5016,
    MSG_RIDE_PET_TRAIN_END_ACK = 5017,
    MSG_RIDE_PET_SET_MODELS_REQ = 5018,
    MSG_RIDE_PET_ABSORB_REQ = 5019,
    MSG_RIDE_PET_UPDATE_REQ = 5020,
    MSG_RIDE_PET_UPDATE_ACK = 5021,
    MSG_RIDE_PET_CAPTURE_REQ = 5022,
    MSG_RIDE_PET_SENDGIF_REQ = 5023,
    MSG_RIDE_PET_SENDGIF_ACK = 5024,
    MSG_RIDE_PET_CLEAR_MARK_REQ = 5025,
    MSG_SOLDIER_ENABLE_REQ = 5050,
    MSG_SOLDIER_ENABLE_ACK = 5051,
    MSG_SOLDIER_RESURGENCE_NTF = 5052,
    MSG_GOLDTREE_INFO_REQ = 5100,
    MSG_GOLDTREE_INFO_ACK = 5101,
    MSG_GOLDTREE_END_ACK = 5102,
    MSG_GOLDTREE_INFO_NTF = 5103,
    MSG_GOLDTREE_CD_REQ = 5104,
    MSG_GOLDTREE_BUY_REQ = 5105,
    MSG_GOLDTREE_BUY_ACK = 5106,
    MSG_PLAYER_DEAD = 5200,
    MSG_PLAYER_RESURGENCE = 5201,
    MSG_SEND_RESURGENCE = 5202,
    MSG_RESURGENCE_AND_SEND_DEAD = 5203,
    MSG_PLAYER_DEAD_CAN_RELIVE = 5204,
    MSG_DUNGEON_ADD_LIFE_COUNT_REQ = 5206,
    MSG_DAY_INVESTMENT_REQ = 5300,
    MSG_DAY_INVESTMENT_ACK = 5301,
    MSG_DAY_INVESTMENT_ACCEPT_REWARD_REQ = 5302,
    MSG_DAY_INVESTMENT_ACCEPT_REWARD_ACK = 5303,
    MSG_DAY_INVESTMENT_INFO_REQ = 5304,
    MSG_DAY_INVESTMENT_INFO_ACK = 5305,
    MSG_SAVE_DAY_INVESTMENT_INFO_REQ = 5306,
    MSG_SAVE_DAY_INVESTMENT_INFO_ACK = 5307,
    MSG_PASSIVE_SKILL_INFO_REQ = 5401,
    MSG_PASSIVE_SKILL_INFO_ACK = 5402,
    MSG_PASSIVE_SKILL_OPEN_REQ = 5403,
    MSG_PASSIVE_SKILL_OPEN_ACK = 5404,
    MSG_PASSIVE_SKILL_UP_REQ = 5405,
    MSG_PASSIVE_SKILL_UP_ACK = 5406,
    MSG_AUTO_FIGHT_SETTING_INFO_REQ = 5500,
    MSG_AUTO_FIGHT_SETTING_INFO_ACK = 5501,
    MSG_AUTO_FIGHT_SETTING_CHANGE_REQ = 5502,
    MSG_AUTO_FIGHT_SETTING_RESET_REQ = 5504,
    MSG_SYSTEM_SETTING_INFO_REQ = 5530,
    MSG_SYSTEM_SETTING_INFO_ACK = 5531,
    MSG_SYSTEM_SETTING_CHANGE_REQ = 5532,
    MSG_SYSTEM_SETTING_RESET_REQ = 5534,
    MSG_PLAYER_SETTING_INFO_REQ = 5560,
    MSG_PLAYER_SETTING_INFO_ACK = 5561,
    MSG_PLAYER_SETTING_CHANGE_REQ = 5562,
    MSG_AUTOBUY_SETTING_INFO_REQ = 5570,
    MSG_AUTOBUY_SETTING_INFO_ACK = 5571,
    MSG_AUTOBUY_SETTING_CHANGE_REQ = 5572,
    MSG_AUTOBUY_SETTING_RESET_REQ = 5574,
    MSG_AUTOBUY_SETTING_RESET_ACK = 5575,
    MSG_VOID_FIELD_SETTING_INFO_REQ = 5580,
    MSG_VOID_FIELD_SETTING_INFO_ACK = 5581,
    MSG_VOID_FIELD_SETTING_CHANGE_REQ = 5582,
    MSG_VOID_FIELD_SETTING_RESET_REQ = 5583,
    MSG_VOID_FIELD_SETTING_RESET_ACK = 5584,
    MSG_LEVEL_INVESTMENT_REQ = 5600,
    MSG_LEVEL_INVESTMENT_ACK = 5601,
    MSG_LEVEL_INVESTMENT_ACCEPT_REWARD_REQ = 5602,
    MSG_LEVEL_INVESTMENT_ACCEPT_REWARD_ACK = 5603,
    MSG_LEVEL_INVESTMENT_INFO_REQ = 5604,
    MSG_LEVEL_INVESTMENT_INFO_ACK = 5605,
    MSG_SAVE_LEVEL_INVESTMENT_INFO_REQ = 5606,
    MSG_SAVE_LEVEL_INVESTMENT_INFO_ACK = 5607,
    MSG_INVESTMENT_OPERATION_REQ = 5700,
    MSG_INVESTMENT_OPERATION_ACK = 5701,
    MSG_INVESTMENT_OPERATION_NTF = 5702,
    MSG_SAVE_LEVEL_ACTIVITY_INFO_REQ = 5804,
    MSG_SAVE_LEVEL_ACTIVITY_INFO_ACK = 5805,
    MSG_SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_REQ = 5900,
    MSG_SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_ACK = 5901,
    MSG_SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_REQ = 5902,
    MSG_SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK = 5903,
    MSG_FIRST_TIME_RECHARGE_INFO_REQ = 5904,
    MSG_FIRST_TIME_RECHARGE_INFO_ACK = 5905,
    MSG_FIRST_TIME_RECHARGE_ACCEPT_REWARD_REQ = 5906,
    MSG_FIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK = 5907,
    MSG_SPECIAL_ACTIVITY_SAVE_INFO_REQ = 5908,
    MSG_SPECIAL_ACTIVITY_SAVE_INFO_ACK = 5909,
    MSG_SPECIAL_ACTIVITY_LOAD_INFO_REQ = 5910,
    MSG_SPECIAL_ACTIVITY_LOAD_INFO_ACK = 5911,
    MSG_SPECIAL_ACTIVITY_INFO_REQ = 5912,
    MSG_SPECIAL_ACTIVITY_INFO_ACK = 5913,
    MSG_SPECIAL_ACTIVITY_ACCEPT_REWARD_REQ = 5914,
    MSG_SPECIAL_ACTIVITY_ACCEPT_REWARD_ACK = 5915,
    MSG_FACTION_PK_REQ = 6100,
    MSG_FACTION_PK_ACK = 6101,
    MSG_FACTION_PK_RANK_NTF = 6102,
    MSG_FACTION_PK_END_ACK = 6103,
    MSG_FACTION_PK_START_NTF = 6104,
    MSG_FACTION_PK_END_NTF = 6105,
    MSG_FACTION_PK_SCORE_NTF = 6106,
    MSG_FACTION_PK_BATTLE_NTF = 6107,
    MSG_FACTION_PK_ADD_SCORE = 6108,
    MSG_LIVENESS_INFO_REQ = 6200,
    MSG_LIVENESS_INFO_ACK = 6201,
    MSG_LIVENESS_ACCEPT_REWARD_REQ = 6202,
    MSG_LIVENESS_ACCEPT_REWARD_ACK = 6203,
    MSG_TD_CURRENT_WAVE_INFO_NTF = 6301,
    MSG_TD_RANK_INFO_NTF = 6302,
    MSG_TD_PLAYER_ENTER_NTF = 6303,
    MSG_TD_REWARDS_NTF = 6304,
    MSG_TD_ENTER_REQ = 6305,
    MSG_TD_ENTER_ACK = 6306,
    MSG_TD_INFO_REQ = 6307,
    MSG_TD_INFO_ACK = 6308,
    MSG_TD_ENTER_TRIGGER_NTF = 6309,
    MSG_TD_START_NTF = 6310,
    MSG_TD_END_NTF = 6311,
    MSG_TIMING_TRIGGER_START_NTF = 6400,
    MSG_TIMING_TRIGGER_END_NTF = 6401,
    MSG_CITY_FIGHT_START_NTF = 6500,
    MSG_CITY_FIGHT_END_NTF = 6501,
    MSG_CITY_FIGHT_INFO_REQ = 6502,
    MSG_CITY_FIGHT_INFO_ACK = 6503,
    MSG_CITY_FIGHT_ENTER_REQ = 6504,
    MSG_CITY_FIGHT_ENTER_ACK = 6505,
    MSG_CITY_FIGHT_GUILD_DAMAGE_NTF = 6506,
    MSG_CITY_FIGHT_CITY_OCCUPY_NTF = 6507,
    MSG_CITY_FIGHT_REWARD_REQ = 6508,
    MSG_CITY_FIGHT_REWARD_ACK = 6509,
    MSG_CITY_FIGHT_INFO_NTF_REQ = 6512,
    MSG_CITY_FIGHT_INFO_NTF_ACK = 6513,
    MSG_CITY_FIGHT_INFO_NTF = 6514,
    MSG_CITY_FIGHT_REALLY_START_NTF = 6515,
    MSG_CITY_FIGHT_REALLY_END_NTF = 6516,
    MSG_GAMEPLAY_TIMES_NOTIFY_REQ = 6601,
    MSG_GAMEPLAY_TIMES_NOTIFY_ACK = 6602,
    MSG_GAME_NOTIFY_REWARD_NTF = 6604,
    MSG_CONTRAST_REQ = 6701,
    MSG_CONTRAST_ACK = 6702,
    MSG_CITY_SURVIVAL_START_NTF = 6800,
    MSG_CITY_SURVIVAL_END_NTF = 6801,
    MSG_CITY_SURVIVAL_REALLY_START_NTF = 6802,
    MSG_CITY_SURVIVAL_REALLY_END_NTF = 6803,
    MSG_CITY_SURVIVAL_INFO_REQ = 6804,
    MSG_CITY_SURVIVAL_INFO_ACK = 6805,
    MSG_CITY_SURVIVAL_ENTER_REQ = 6806,
    MSG_CITY_SURVIVAL_ENTER_ACK = 6807,
    MSG_CITY_SURVIVAL_RANK_NTF = 6808,
    MSG_CITY_SURVIVAL_WAVE_NTF = 6809,
    MSG_CITY_SURVIVAL_REWARDS_NTF = 6810,
    MSG_CITY_SURVIVAL_INFO_NTF = 6811,
    MSG_TOUCH_START_REQ = 6900,
    MSG_TOUCH_START_ACK = 6901,
    MSG_TOUCH_BREAK_NTF = 6902,
    MSG_TOUCH_END_NTF = 6903,
    MSG_CAPTURE_FLAG_START_NTF = 6904,
    MSG_CAPTURE_FLAG_END_NTF = 6905,
    MSG_CAPTURE_FLAG_RANK_NTF = 6906,
    MSG_CAPTURE_FLAG_GROUP_SOCRE_NTF = 6907,
    MSG_CAPTURE_FLAG_END_ACK = 6911,
    MSG_STONE_TURN_GOLD_REQ = 7000,
    MSG_SINGLE_ANSWER_NTF = 7100,
    MSG_SINGLE_ANSWER_ACK = 7101,
    MSG_SINGLE_ANSWER_QUESTION_REQ = 7102,
    MSG_SINGLE_ANSWER_QUESTION_ACK = 7103,
    MSG_SINGLE_ANSWER_RESULT_REQ = 7104,
    MSG_SINGLE_ANSWER_RESULT_ACK = 7105,
    MSG_SINGLE_ANSWER_REWARD_ACK = 7107,
    MSG_SINGLE_ANSWER_CD_TIME_REQ = 7110,
    MSG_SINGLE_ANSWER_CD_TIME_ACK = 7111,
    MSG_PLAYER_RECHARGE_INFO_NTF = 7300,
    MSG_GET_MEAL_VIGOR_REQ = 7501,
    MSG_GET_MEAL_VIGOR_ACK = 7502,
    MSG_OFF_LINE_VIGOR_REQ = 7503,
    MSG_OFF_LINE_VIGOR_ACK = 7504,
    MSG_GET_OFF_LINE_VIGOR_REQ = 7505,
    MSG_GET_OFF_LINE_VIGOR_ACK = 7506,
    MSG_SET_FASHION_REQ = 7601,
    MSG_SET_FASHION_ACK = 7602,
    MSG_FASHION_LIST_NTF = 7603,
    MSG_FASHION_ATLAS_REQ = 7604,
    MSG_FASHION_COMPOSE_REQ = 7606,
    MSG_FASHION_COMPOSE_ACK = 7607,
    MSG_FASHION_ACTIVATE_REQ = 7610,
    MSG_FASHION_ACTIVATE_ACK = 7611,
    MSG_FASHION_LEVEL_UP_REQ = 7612,
    MSG_FASHION_LEVEL_UP_ACK = 7613,
    MSG_FASHION_GET_TREASURE_REQ = 7614,
    MSG_FASHION_GET_TREASURE_ACK = 7615,
    MSG_FASHION_SMELT_REQ = 7616,
    MSG_FASHION_SMELT_ACK = 7617,
    MSG_INCARNATION_BUY_REQ = 7618,
    MSG_INCARNATION_BUY_ACK = 7619,
    MSG_TEASER_FASHION_NTF = 7621,
    MSG_FASHION_SKILL_REQ = 7623,
    MSG_FASHION_SKILL_NTF = 7624,
    MSG_FASHION_SKILL_INFO_REQ = 7625,
    MSG_CROSS_TEAM_SHOW_LIST_REQ = 7700,
    MSG_CROSS_TEAM_SHOW_LIST_ACK = 7701,
    MSG_CROSS_TEAM_INFO_REQ = 7702,
    MSG_CROSS_TEAM_INFO_NTF = 7703,
    MSG_CROSS_CREATE_TEAM_REQ = 7704,
    MSG_CROSS_CREATE_TEAM_ACK = 7705,
    MSG_CROSS_DESTORY_TEAM_REQ = 7706,
    MSG_CROSS_DESTORY_TEAM_ACK = 7707,
    MSG_CROSS_TEAM_MEMBER_DEL_REQ = 7710,
    MSG_CROSS_TEAM_MEMBER_DEL_ACK = 7711,
    MSG_CROSS_TEAM_QUICK_JOIN_REQ = 7712,
    MSG_CROSS_TEAM_MEMBER_ADD_ANS = 7713,
    MSG_CROSS_TEAM_MEMBER_ADD_ACK = 7714,
    MSG_CROSS_TEAM_MEMBER_READY_REQ = 7715,
    MSG_CROSS_TEAM_MEMBER_READY_ACK = 7716,
    MSG_CROSS_TEAM_FLAG_SET_REQ = 7717,
    MSG_CROSS_TEAM_ENTER_DUNGEON = 7720,
    MSG_CROSS_TEAM_NOTIFY_DUNGEON = 7721,
    MSG_CROSS_TEAM_BUY_DUNGEON_TIMES_REQ = 7730,
    MSG_CROSS_TEAM_DUNGEON_DAMAGE_LIST = 7740,
    MSG_CROSS_TEAM_DUNGEON_END_NTF = 7741,
    MSG_CROSS_TEAM_DUNGEON_SCORE_INFO_REQ = 7751,
    MSG_CROSS_TEAM_DUNGEON_SCORE_INFO_ACK = 7752,
    MSG_CREATURE_EVIL_LIST_NTF = 8101,
    MSG_FIGHT_MODE_REQ = 8102,
    MSG_FIGHT_MODE_ACK = 8103,
    MSG_EMEMY_INFO_NTF = 8105,
    MSG_EMEMY_UPDATE_NTF = 8107,
    MSG_ENEMY_ATTACKER_NTF = 8109,
    MSG_VOID_FIELD_CHANNEL_INFO_REQ = 8200,
    MSG_VOID_FIELD_CHANNEL_INFO_ACK = 8201,
    MSG_VOID_FIELD_REGULAR_TYPE_NTF = 8203,
    MSG_VOID_FIELD_CHESTS_NUM_NTF = 8205,
    MSG_VOID_FIELD_OVER_RANGE_NTF = 8207,
    MSG_VOID_FIELD_BOSS_DAMAGE_NTF = 8211,
    MSG_VOID_FIELD_PERSONAL_INFO_NTF = 8213,
    MSG_VOID_FIELD_REWARD_BOX_NTF = 8214,
    MSG_VOID_FIELD_SET_HOOK_POS_REQ = 8216,
    MSG_VOID_FIELD_SOLO_CHANNEL_INFO_REQ = 8250,
    MSG_VOID_FIELD_SOLO_CHANNEL_INFO_ACK = 8251,
    MSG_VOID_FIELD_SOLO_REGULAR_TYPE_NTF = 8253,
    MSG_VOID_FIELD_SOLO_CHESTS_NUM_NTF = 8255,
    MSG_VOID_FIELD_SOLO_OVER_RANGE_NTF = 8257,
    MSG_VOID_FIELD_SOLO_BOSS_DAMAGE_NTF = 8261,
    MSG_VOID_FIELD_SOLO_PERSONAL_INFO_NTF = 8263,
    MSG_VOID_FIELD_SOLO_SET_HOOK_POS_REQ = 8266,
    MSG_BH_INFO_NTF = 8301,
    MSG_BH_INFO_REQ = 8302,
    MSG_BH_INFO_ACK = 8303,
    MSG_BH_SELECT_TYPE_REQ = 8304,
    MSG_BH_SELECT_TYPE_ACK = 8305,
    MSG_BH_START_REQ = 8306,
    MSG_BH_START_ACK = 8307,
    MSG_BH_REDEEM_REQ = 8308,
    MSG_BH_REDEEM_ACK = 8309,
    MSG_BH_END_NTF = 8311,
    MSG_BH_REWARD_REQ = 8312,
    MSG_BH_REWARD_ACK = 8313,
    MSG_SWORD_INFO_REQ = 8400,
    MSG_SWORD_INFO_ACK = 8401,
    MSG_SWORD_UPGRADE_REQ = 8402,
    MSG_SWORD_UPGRADE_ACK = 8403,
    MSG_SWORD_ADVANCE_REQ = 8404,
    MSG_SWORD_ADVANCE_ACK = 8405,
    MSG_SWORD_ACTIVATE_REQ = 8406,
    MSG_SWORD_ACTIVATE_ACK = 8407,
    MSG_SWORD_LOCK_REQ = 8408,
    MSG_SWORD_LOCK_ACK = 8409,
    MSG_SWORD_EQUIP_REQ = 8410,
    MSG_SWORD_EQUIP_ACK = 8411,
    MSG_ZOMBIE_OPEN_CHEST_REQ = 8500,
    MSG_ZOMBIE_WAR_INFO_REQ = 8501,
    MSG_ZOMBIE_WAR_INFO_ACK = 8502,
    MSG_ZOMBIE_WAR_UPDATE_NTF = 8503,
    MSG_ZOMBIE_WAR_EXIT = 8504,
    MSG_TEASER_END_NTF = 8601,
    MSG_PUSH_360_NTF = 8700,
    MSG_GLOBAL_SETTING_INFO_LOAD_REQ = 8800,
    MSG_GLOBAL_SETTING_INFO_LOAD = 8801,
    MSG_GLOBAL_SETTING_INFO_FILL = 8802,
    MSG_GLOBAL_SETTING_PROCLAMATION_NTF = 8803,
    MSG_GLOBAL_SETTING_PROCLAMATION_REQ = 8804,
    MSG_GLOBAL_SETTING_PROCLAMATION_ACK = 8805,
    MSG_PLAYER_PROCLAMATION_REQ = 8900,
    MSG_PLAYER_SHORCUT_REQ = 9000,
    MSG_PLAYER_SHORCUT_ACK = 9001,
    MSG_PLAYER_TASTE_VIP_REQ = 9002,
    MSG_PLAYER_TASTE_VIP_ACK = 9003,
    MSG_PLAYER_LIKE_REQ = 9004,
    MSG_PLAYER_DAILY_FASHION_REQ = 9005,
    MSG_PLAYER_DAILY_FASHION_ACK = 9006,
    MSG_GMT_ASK_REQ = 9100,
    MSG_GMT_ASK_ACK = 9101,
    MSG_GMT_SET_REQ = 9102,
    MSG_GMT_SET_ACK = 9103,
    MSG_GAME_SETTING_LIST_ACK = 9104,
    MSG_GAME_GMT_UPDATE_ACK = 9105,
    MSG_MULTISERVER_BATTLE_APPLY_REQ = 9201,
    MSG_MULTISERVER_BATTLE_APPLY_ACK = 9202,
    MSG_MULTISERVER_BATTLE_QUIT_REQ = 9203,
    MSG_MULTISERVER_BATTLE_QUIT_ACK = 9204,
    MSG_MULTISERVER_BATTLE_APPLY_NTF = 9205,
    MSG_MULTISERVER_BATTLE_INFO_REQ = 9206,
    MSG_MULTISERVER_BATTLE_INFO_ACK = 9207,
    MSG_MULTISERVER_BATTLE_PK_END_ACK = 9208,
    MSG_MULTISERVER_BATTLE_WAIT_ACK = 9209,
    MSG_MULTISERVER_BATTLE_WAIT_REQ = 9210,
    MSG_MULTISERVER_BATTLE_EXPLOIT_REQ = 9211,
    MSG_MULTISERVER_BATTLE_EXPLOIT_ACK = 9212,
    MSG_MULTISERVER_BATTLE_EXPLOIT_BUY_REQ = 9213,
    MSG_MULTISERVER_BATTLE_EXPLOIT_BUY_ACK = 9214,
    MSG_MULTISERVER_BATTLE_BUY_REQ_ALLIANCE = 9215,
    MSG_MULTISERVER_BATTLE_BUY_ACK_ALLIANCE = 9216,
    MSG_MULTISERVER_BATTLE_BUY_REQ_SEASON = 9217,
    MSG_MULTISERVER_BATTLE_BUY_ACK_SEASON = 9218,
    MSG_MULTISERVER_BATTLE_SEASON_NTF = 9219,
    MSG_MULTISERVER_BATTLE_ABOUT_RANK_NTF = 9220,
    MSG_MULTISERVER_BATTLE_ALLIANCE_REQ = 9221,
    MSG_MULTISERVER_BATTLE_ALLIANCE_ACK = 9222,
    MSG_FIELD_BOSS_INFO_REQ = 9301,
    MSG_FIELD_BOSS_INFO_ACK = 9302,
    MSG_FIELD_BOSS_UPDATE_DROP_STATE_ACK = 9303,
    MSG_FIELD_BOSS_PLAYER_IS_OFFLINE_REQ = 9304,
    MSG_FIELD_BOSS_PLAYER_IS_OFFLINE_ACK = 9305,
    MSG_FIELD_BOSS_PLAYER_LEAVE = 9306,
    MSG_FIELD_BOSS_DAMAGE_NTF = 9307,
    MSG_FIELD_BOSS_SET_HOOK_POS_REQ = 9308,
    MSG_FIELD_BOSS_PERSONAL_INFO_NTF = 9309,
    MSG_INVESTMENT_PLAN_INFO_REQ = 9401,
    MSG_INVESTMENT_PLAN_INFO_ACK = 9402,
    MSG_INVESTMENT_PLAN_INVESTMENT_REQ = 9403,
    MSG_INVESTMENT_PLAN_INVESTMENT_ACK = 9404,
    MSG_INVESTMENT_PLAN_ADDITIONAL_REQ = 9405,
    MSG_INVESTMENT_PLAN_ADDITIONAL_ACK = 9406,
    MSG_INVESTMENT_PLAN_REWARD_REQ = 9407,
    MSG_INVESTMENT_PLAN_REWARD_ACK = 9408,
    MSG_INVESTMENT_PLAN_REWARD_ALL_REQ = 9409,
    MSG_PAY_POINT_INFO_REQ = 9501,
    MSG_PAY_POINT_INFO_ACK = 9502,
    MSG_GET_PAY_POINT_LOTTERY_COST_ITEM_REQ = 9503,
    MSG_PAY_POINT_LOTTERY_ONCE_START_REQ = 9504,
    MSG_PAY_POINT_LOTTERY_ALL_START_REQ = 9505,
    MSG_PAY_POINT_LOTTERY_OUTPUT_ACK = 9506,
    MSG_GET_PAY_POINT_LOTTERY_OUTPU_REQ = 9507,
    MSG_PAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ = 9508,
    MSG_PAY_POINT_LOTTERY_NTF = 9509,
    MSG_OFFLINE_EVENT_NTF = 9601,
    MSG_OFFLINE_EVENT_SEND = 9602,
    MSG_DONATE_INFO_REQ = 9701,
    MSG_DONATE_INFO_ACK = 9702,
    MSG_DONATE_PUT_REQ = 9703,
    MSG_DONATE_PUT_ACK = 9704,
    MSG_DONATE_RECEIVE_REQ = 9705,
    MSG_DONATE_RECEIVE_ACK = 9706,
    MSG_DONATE_ADD_BINDMONEY_NTF = 9707,
    MSG_DONATE_ALL_BINDMONEY_NTF = 9708,
    MSG_DONATE_REWARD_MONEYPOINT = 9710,
    MSG_VIP_STATISTICS_PLAYER_VIP = 9806,
    MSG_VIP_STATISTICS_INFO = 9807,
    MSG_CHAOS_KILL_NUM_NTF = 9901,
    MSG_CHAOS_SCORE_RANK_NTF = 9902,
    MSG_CHAOS_END_NTF = 9903,
    MSG_CHAOS_TEAM_MEMBER_NTF = 9904,
    MSG_CHAOS_BATTLE_INFO_NTF = 9907,
    MSG_CHAOS_KILL_INFO_NTF = 9909,
    MSG_CHAOS_PLAYER_INOUT_NTF = 9911,
    MSG_TOP_UP_RANK_INFO_REQ = 10001,
    MSG_TOP_UP_RANK_INFO_ACK = 10002,
    MSG_VIP_ONLY_DUNGEON_INFO_REQ = 10101,
    MSG_VIP_ONLY_DUNGEON_INFO_ACK = 10102,
    MSG_VIP_ONLY_DUNGEON_ENTER_REQ = 10103,
    MSG_VIP_ONLY_DUNGEON_END_ACK = 10104,
    MSG_EGG_INFO_REQ = 10200,
    MSG_EGG_INFO_ACK = 10201,
    MSG_EGG_SMASH_REQ = 10202,
    MSG_EGG_SMASH_ACK = 10203,
    MSG_BUY_CHEAP_INFO_REQ = 10301,
    MSG_BUY_CHEAP_INFO_ACK = 10302,
    MSG_BUY_CHEAP_BUY_REQ = 10303,
    MSG_BUY_CHEAP_BUY_ACK = 10304,
    MSG_BUY_CHEAP_REWARD_REQ = 10305,
    MSG_BUY_CHEAP_REWARD_ACK = 10306,
    MSG_DAILY_FASHION_DB_INFO_REQ = 10400,
    MSG_DAILY_FASHION_DB_INFO_ACK = 10401,
    MSG_DAILY_FASHION_INFO_REQ = 10402,
    MSG_DAILY_FASHION_INFO_ACK = 10403,
    MSG_DAILY_FASHION_DRAW_REQ = 10404,
    MSG_DAILY_FASHION_DRAW_ACK = 10405,
    MSG_HEAD_PORTRAIT_INFO_REQ = 10500,
    MSG_HEAD_PORTRAIT_INFO_ACK = 10501,
    MSG_HEAD_PORTRAIT_INIT_REQ = 10502,
    MSG_HEAD_PORTRAIT_INIT_ACK = 10503,
    MSG_SKILL_STRENGTHEN_INFO_REQ = 10600,
    MSG_SKILL_STRENGTHEN_INFO_ACK = 10601,
    MSG_STORE_INFO_REQ = 10700,
    MSG_STORE_INFO_ACK = 10701,
    MSG_STORE_SORT_REQ = 10702,
    MSG_ALCHEMY_MAKE_INFO_REQ = 10800,
    MSG_ALCHEMY_MAKE_INFO_ACK = 10801,
    MSG_DECOMPOSE_ITEM_REQ = 10900,
    MSG_DECOMPOSE_ITEM_ACK = 10901,
};
static unsigned int gClientMsgIDSet[] =
{
    MSG_TEST1,
    MSG_TEST2,
    MSG_ECHO_REQ,
    MSG_ENCRYPT_CONNECT_REQ,
    MSG_ENCRYPT_PRIVATE_KEY_NTF,
    MSG_LOGIN_GAME_REQ,
    MSG_ASK_PLAYER_REQ,
    MSG_CREATE_PLAYER_REQ,
    MSG_IS_CREATE_PLAYER_NAME_REQ,
    MSG_LOAD_PLAYER_REQ,
    MSG_CHANGE_PLAYER_NAME_REQ,
    MSG_SET_MAP_TYPE_REQ,
    MSG_SET_CURRENT_RESUREGECE_REQ,
    MSG_IS_UPDATE_PLAYER_NAME_REQ,
    MSG_REFRESH_VIGOR_REQ,
    MSG_BUY_VIGOR_REQ,
    MSG_CAREER_SET_REQ,
    MSG_GUIDE_INFO_SET_REQ,
    MSG_OPEN_SYSTEM_SET_REQ,
    MSG_PLAYER_LOG_REQ,
    MSG_LOG_REQ,
    MSG_WELCOME_ASK_BAG_REWARD_REQ,
    MSG_SERVER_TIME_SYN_REQ,
    MSG_NOTIFY_PICK_DROP_OJBECT,
    MSG_GAME_START_REQ,
    MSG_MOVE_REQ,
    MSG_JUMP_REQ,
    MSG_CHANGE_DUNGEON_REQ,
    MSG_RETURN_CITY_REQ,
    MSG_DUNGEON_SCORE_INFO_REQ,
    MSG_GS_DUNGEON_SCORE_INFO_REQ,
    MSG_CHANGE_SCENE_REQ,
    MSG_SCENE_INFO_REQ,
    MSG_JUMP_DUNGEON_REQ,
    MSG_DUNGEON_CONDITION_REQ,
    MSG_DUNGEON_RUN_TIME_INFO_REQ,
    MSG_USE_SKILL_REQ,
    MSG_USE_BASE_SKILL_REQ,
    MSG_SKILL_COMPONENT_INFO_REQ,
    MSG_AI_DEBUG_REQ,
    MSG_BAG_INFO_REQ,
    MSG_OPT_ITEM_REQ,
    MSG_BAG_SORT_REQ,
    MSG_SYNTHETIZE_JEWEL_REQ,
    MSG_UPGRADE_JEWEL_REQ,
    MSG_POTION_SET_REQ,
    MSG_NPC_BUY_REQ,
    MSG_HONOR_BUY_REQ,
    MSG_BIND_MONEY_POINT_BUY_REQ,
    MSG_GEM_SOCKET_REQ,
    MSG_GEM_UNSOCKET_REQ,
    MSG_GEM_FUSE_REQ,
    MSG_GEM_EVOLUTE_REQ,
    MSG_GEM_ADD_HOLE_REQ,
    MSG_EQUIP_QUALITY_UP_REQ,
    MSG_EQUIP_WASH_UP_REQ,
    MSG_EQUIP_WASH_UP_USE_OLD_REQ,
    MSG_EQUIP_WASH_UP_USE_NEW_REQ,
    MSG_EQUIP_STAR_UP_REQ,
    MSG_EQUIP_ENCHANT_REQ,
    MSG_TASK_REFRESH_TIME_REQ,
    MSG_TAKE_TASK_REQ,
    MSG_TASK_TALK_NPC,
    MSG_TASK_MICRO_CLIENT,
    MSG_TASK_CHANGE_DUNGEON_REQ,
    MSG_TASK_REWARD_REQ,
    MSG_TASK_QUALITY_REQ,
    MSG_TASK_COMPLETE_REQ,
    MSG_TASK_CRUSADE_REFRESH_REQ,
    MSG_TASK_CRUSADE_GIVEUP_REQ,
    MSG_TASK_RECEIVE_BOX_REQ,
    MSG_TASK_GUARD_REFRESH_REQ,
    MSG_TASK_FESTIVAL_REWARD_REQ,
    MSG_TASK_DAILY_RESET_REQ,
    MSG_TASK_GUARD_BUY_REQ,
    MSG_TASK_GUILD_RESET_REQ,
    MSG_TASK_GUILD_BOX_REWARD_REQ,
    MSG_TASK_MICRO_CLIENT_STATE_REQ,
    MSG_TASK_FESTIVAL_TMPL_LIST_REQ,
    MSG_TRIGGER_ACTIVATE_REQ,
    MSG_MONSTER_DOOR_INFO_REQ,
    MSG_MONSTER_DOOR_SELECT_REQ,
    MSG_MONSTER_DOOR_RESET_REQ,
    MSG_MONSTER_DOOR_RAID_REQ,
    MSG_MONSTER_DOOR_AUTO_REQ,
    MSG_MONSTER_DOOR_KILL_CD_REQ,
    MSG_MONSTER_DOOR_CD_OVER_REQ,
    MSG_PLAYER_DOOR_INFO_REQ,
    MSG_PLAYER_DOOR_SELECT_REQ,
    MSG_OFFLINE_PLAYER_CLIENT_REQ,
    MSG_PLAYER_DOOR_REWARD_REQ,
    MSG_PLAYER_DOOR_RESET_CHALLENGE_COUNT_REQ,
    MSG_PLAYER_DOOR_ADD_CHALLENGE_COUNT_REQ,
    MSG_PLAYER_DOOR_KILL_CD_REQ,
    MSG_PLAYER_DOOR_CD_OVER_REQ,
    MSG_PLAYER_DOOR_REWARD_INFO_REQ,
    MSG_VIP_BUY_REQ,
    MSG_VIP_REFRESH_REQ,
    MSG_VIP_REWARD_REQ,
    MSG_VIP_GIFT_REQ,
    MSG_VIP_INIT_REQ,
    MSG_EXPERIENCE_VIP_RECEIVE_REQ,
    MSG_EXPERIENCE_VIP_EXPIRE_REQ,
    MSG_EXPERIENCE_VIP_END_REQ,
    MSG_EXPERIENCE_VIP_STATE_REQ,
    MSG_HOROSCOPE_INFO_REQ,
    MSG_HOROSCOPE_LEVELUP_REQ,
    MSG_HOROSCOPE_LEVELUP_CMPL_REQ,
    MSG_FRIEND_INFO_REQ,
    MSG_FRIEND_ADD_REQ,
    MSG_FRIEND_ADD_ANS,
    MSG_FRIEND_DEL_REQ,
    MSG_FRIEND_QUICK_ADD_REQ,
    MSG_CHAT_REQ,
    MSG_MODIFY_CHAT,
    MSG_MARQUEE_REQ,
    MSG_ASHURA_GET_AWARD_REQ,
    MSG_BABEL_INFO_REQ,
    MSG_BABEL_START_REQ,
    MSG_BABEL_RESET_REQ,
    MSG_BABEL_RAIDS_REQ,
    MSG_TEAM_INFO_REQ,
    MSG_CREATE_TEAM_REQ,
    MSG_DESTORY_TEAM_REQ,
    MSG_TEAM_QUICK_JOIN_REQ,
    MSG_TEAM_MEMBER_DEL_REQ,
    MSG_TEAM_SHOW_LIST_REQ,
    MSG_TEAM_FLY_REQ,
    MSG_MAIL_INFO_REQ,
    MSG_MAIL_OPT_REQ,
    MSG_MAIL_GET_ATTACH_REQ,
    MSG_MAIL_SEND_REQ,
    MSG_MAIL_OPEN_SYSTEM_REQ,
    MSG_ANSWER_READY_REQ,
    MSG_ANSWER_QUESTION_CMF,
    MSG_DOUBLE_SCORE_REQ,
    MSG_BUY_DOUBLE_REQ,
    MSG_ANSWER_TOPRANK_REQ,
    MSG_ANSWER_PLAYER_RANK_REQ,
    MSG_ANSWER_REWARD_REQ,
    MSG_ANSWER_EXIT_NTF,
    MSG_GUILD_INFO_REQ,
    MSG_GUILD_LIST_REQ,
    MSG_GUILD_APPLY_LIST_REQ,
    MSG_CREATE_GUILD_REQ,
    MSG_DESTROY_GUILD_REQ,
    MSG_VIEW_GUILD_INFO_REQ,
    MSG_INVITE_JOIN_GUILD_REQ,
    MSG_INVITE_JOIN_GUILD_ANS,
    MSG_APPLY_JOIN_GUILD_REQ,
    MSG_APPLY_JOIN_GUILD_ANS,
    MSG_GUILD_MEMBER_DEL_REQ,
    MSG_GUILD_SET_OFFICE_REQ,
    MSG_GUILD_SET_FLAG_REQ,
    MSG_GUILD_INHERIT_ATEVENT_REQ,
    MSG_GUILD_DONATE_REQ,
    MSG_GUILD_SET_BULLETIN_REQ,
    MSG_GUILD_BUY_REQ,
    MSG_GUILD_BUY_GUILDPOINT_REQ,
    MSG_GUILD_BUY_MEMBER_TURNTABLE_REQ,
    MSG_GUILD_WELFARE_INFO_REQ,
    MSG_GUILD_RAND_TURNTABLE_REQ,
    MSG_GUILD_MEMBER_TURNTABLE_REQ,
    MSG_GUILD_REWARD_PERSONAL_WELFARE,
    MSG_GUILD_ADDITION_PROMOTE_REQ,
    MSG_GUILD_SCIENCE_PLAYER_INFO_REQ,
    MSG_GUILD_BOSS_LEVELUP_REQ,
    MSG_GUILD_BOSS_COUNTDOWN_REQ,
    MSG_GUILD_BOSS_SET_TIME_REQ,
    MSG_GUILD_CRUSADE_BOSS_RANK_REQ,
    MSG_GUILD_TWILIGHT_WAR_RANK_REQ,
    MSG_SIGN_REQ,
    MSG_SIGN_INFO_REQ,
    MSG_RACING_REFRESH_REQ,
    MSG_RACING_ENTER_REQ,
    MSG_MINING_REQ,
    MSG_MINING_STOP_REQ,
    MSG_MINING_COMPLETE_REQ,
    MSG_MINING_REFRESH_REQ,
    MSG_ACTIVITY_LIST_REQ,
    MSG_TREASURY_INFO_REQ,
    MSG_TREASURY_CD_REQ,
    MSG_TREASURY_BUY_REQ,
    MSG_ADVENTURE_INFO_REQ,
    MSG_ADVENTURE_JOIN_REQ,
    MSG_ADVENTURE_CMPL_REQ,
    MSG_ADVENTURER_LIST_REQ,
    MSG_ADVENTURE_ROB_REQ,
    MSG_WING_INFO_REQ,
    MSG_WING_ADVANCE_REQ,
    MSG_WING_TRANSMOGRIFICATION_REQ,
    MSG_WING_ACTIVATE_REQ,
    MSG_ONLINE_REWARD_REQ,
    MSG_GROW_LEVEL_GIFT_REQ,
    MSG_BESTOW_REWARD_REQ,
    MSG_ONLINE_REWARD_INFO_REQ,
    MSG_INST_ACHIVE_REQ,
    MSG_ACHIVE_GETOBJ_REQ,
    MSG_MALL_INFO_REQ,
    MSG_MALL_PRODUCT_REQ,
    MSG_MALL_BUY_REQ,
    MSG_LIMIT_BUY_REQ,
    MSG_RANKING_INFO_REQ,
    MSG_INST_TITLE_REQ,
    MSG_EQUIP_REQ,
    MSG_UPDATE_TITLE,
    MSG_FCM_INFO_REQ,
    MSG_ACTIVECODE_USE_REQ,
    MSG_TRADE_ORDER_REQ,
    MSG_INIT_RIDE_PET_REQ,
    MSG_RIDE_PET_LEVELUP_REQ,
    MSG_RIDE_PET_RIDEORFREE_REQ,
    MSG_RIDE_PET_OPENfILED_REQ,
    MSG_RIDE_PET_MARK_REQ,
    MSG_RIDE_PET_TRAIN_POS_REQ,
    MSG_RIDE_PET_STONE_TRAIN_REQ,
    MSG_RIDE_PET_END_TRAIN_REQ,
    MSG_RIDE_PET_RIGHT_NOW_TRAIN_REQ,
    MSG_RIDE_PET_SET_MODELS_REQ,
    MSG_RIDE_PET_ABSORB_REQ,
    MSG_RIDE_PET_UPDATE_REQ,
    MSG_RIDE_PET_CAPTURE_REQ,
    MSG_RIDE_PET_SENDGIF_REQ,
    MSG_RIDE_PET_CLEAR_MARK_REQ,
    MSG_SOLDIER_ENABLE_REQ,
    MSG_GOLDTREE_INFO_REQ,
    MSG_GOLDTREE_CD_REQ,
    MSG_GOLDTREE_BUY_REQ,
    MSG_PLAYER_RESURGENCE,
    MSG_DUNGEON_ADD_LIFE_COUNT_REQ,
    MSG_DAY_INVESTMENT_REQ,
    MSG_DAY_INVESTMENT_ACCEPT_REWARD_REQ,
    MSG_DAY_INVESTMENT_INFO_REQ,
    MSG_PASSIVE_SKILL_INFO_REQ,
    MSG_PASSIVE_SKILL_OPEN_REQ,
    MSG_PASSIVE_SKILL_UP_REQ,
    MSG_AUTO_FIGHT_SETTING_INFO_REQ,
    MSG_AUTO_FIGHT_SETTING_CHANGE_REQ,
    MSG_AUTO_FIGHT_SETTING_RESET_REQ,
    MSG_SYSTEM_SETTING_INFO_REQ,
    MSG_SYSTEM_SETTING_CHANGE_REQ,
    MSG_SYSTEM_SETTING_RESET_REQ,
    MSG_PLAYER_SETTING_INFO_REQ,
    MSG_PLAYER_SETTING_CHANGE_REQ,
    MSG_AUTOBUY_SETTING_INFO_REQ,
    MSG_AUTOBUY_SETTING_CHANGE_REQ,
    MSG_AUTOBUY_SETTING_RESET_REQ,
    MSG_VOID_FIELD_SETTING_INFO_REQ,
    MSG_VOID_FIELD_SETTING_CHANGE_REQ,
    MSG_VOID_FIELD_SETTING_RESET_REQ,
    MSG_LEVEL_INVESTMENT_REQ,
    MSG_LEVEL_INVESTMENT_ACCEPT_REWARD_REQ,
    MSG_LEVEL_INVESTMENT_INFO_REQ,
    MSG_INVESTMENT_OPERATION_REQ,
    MSG_FIRST_TIME_RECHARGE_INFO_REQ,
    MSG_FIRST_TIME_RECHARGE_ACCEPT_REWARD_REQ,
    MSG_SPECIAL_ACTIVITY_INFO_REQ,
    MSG_SPECIAL_ACTIVITY_ACCEPT_REWARD_REQ,
    MSG_FACTION_PK_REQ,
    MSG_LIVENESS_INFO_REQ,
    MSG_LIVENESS_ACCEPT_REWARD_REQ,
    MSG_TD_ENTER_REQ,
    MSG_TD_INFO_REQ,
    MSG_CITY_FIGHT_INFO_REQ,
    MSG_CITY_FIGHT_ENTER_REQ,
    MSG_CITY_FIGHT_REWARD_REQ,
    MSG_GAMEPLAY_TIMES_NOTIFY_REQ,
    MSG_CONTRAST_REQ,
    MSG_CITY_SURVIVAL_INFO_REQ,
    MSG_CITY_SURVIVAL_ENTER_REQ,
    MSG_TOUCH_START_REQ,
    MSG_STONE_TURN_GOLD_REQ,
    MSG_SINGLE_ANSWER_NTF,
    MSG_SINGLE_ANSWER_QUESTION_REQ,
    MSG_SINGLE_ANSWER_RESULT_REQ,
    MSG_SINGLE_ANSWER_CD_TIME_REQ,
    MSG_GET_MEAL_VIGOR_REQ,
    MSG_OFF_LINE_VIGOR_REQ,
    MSG_GET_OFF_LINE_VIGOR_REQ,
    MSG_SET_FASHION_REQ,
    MSG_FASHION_ATLAS_REQ,
    MSG_FASHION_COMPOSE_REQ,
    MSG_FASHION_ACTIVATE_REQ,
    MSG_FASHION_LEVEL_UP_REQ,
    MSG_FASHION_GET_TREASURE_REQ,
    MSG_FASHION_SMELT_REQ,
    MSG_INCARNATION_BUY_REQ,
    MSG_FASHION_SKILL_REQ,
    MSG_FASHION_SKILL_INFO_REQ,
    MSG_CROSS_TEAM_SHOW_LIST_REQ,
    MSG_CROSS_TEAM_INFO_REQ,
    MSG_CROSS_CREATE_TEAM_REQ,
    MSG_CROSS_DESTORY_TEAM_REQ,
    MSG_CROSS_TEAM_MEMBER_DEL_REQ,
    MSG_CROSS_TEAM_QUICK_JOIN_REQ,
    MSG_CROSS_TEAM_MEMBER_ADD_ANS,
    MSG_CROSS_TEAM_MEMBER_READY_REQ,
    MSG_CROSS_TEAM_FLAG_SET_REQ,
    MSG_CROSS_TEAM_ENTER_DUNGEON,
    MSG_CROSS_TEAM_BUY_DUNGEON_TIMES_REQ,
    MSG_CROSS_TEAM_DUNGEON_SCORE_INFO_REQ,
    MSG_FIGHT_MODE_REQ,
    MSG_VOID_FIELD_CHANNEL_INFO_REQ,
    MSG_VOID_FIELD_SET_HOOK_POS_REQ,
    MSG_VOID_FIELD_SOLO_CHANNEL_INFO_REQ,
    MSG_VOID_FIELD_SOLO_SET_HOOK_POS_REQ,
    MSG_BH_INFO_REQ,
    MSG_BH_SELECT_TYPE_REQ,
    MSG_BH_START_REQ,
    MSG_BH_REDEEM_REQ,
    MSG_BH_REWARD_REQ,
    MSG_SWORD_INFO_REQ,
    MSG_SWORD_UPGRADE_REQ,
    MSG_SWORD_ADVANCE_REQ,
    MSG_SWORD_ACTIVATE_REQ,
    MSG_SWORD_LOCK_REQ,
    MSG_SWORD_EQUIP_REQ,
    MSG_ZOMBIE_OPEN_CHEST_REQ,
    MSG_ZOMBIE_WAR_INFO_REQ,
    MSG_PLAYER_PROCLAMATION_REQ,
    MSG_PLAYER_SHORCUT_REQ,
    MSG_PLAYER_TASTE_VIP_REQ,
    MSG_PLAYER_DAILY_FASHION_REQ,
    MSG_MULTISERVER_BATTLE_APPLY_REQ,
    MSG_MULTISERVER_BATTLE_QUIT_REQ,
    MSG_MULTISERVER_BATTLE_INFO_REQ,
    MSG_MULTISERVER_BATTLE_WAIT_REQ,
    MSG_MULTISERVER_BATTLE_EXPLOIT_REQ,
    MSG_MULTISERVER_BATTLE_EXPLOIT_BUY_REQ,
    MSG_MULTISERVER_BATTLE_BUY_REQ_ALLIANCE,
    MSG_MULTISERVER_BATTLE_BUY_REQ_SEASON,
    MSG_MULTISERVER_BATTLE_ALLIANCE_REQ,
    MSG_FIELD_BOSS_INFO_REQ,
    MSG_FIELD_BOSS_SET_HOOK_POS_REQ,
    MSG_INVESTMENT_PLAN_INFO_REQ,
    MSG_INVESTMENT_PLAN_INVESTMENT_REQ,
    MSG_INVESTMENT_PLAN_ADDITIONAL_REQ,
    MSG_INVESTMENT_PLAN_REWARD_REQ,
    MSG_INVESTMENT_PLAN_REWARD_ALL_REQ,
    MSG_PAY_POINT_INFO_REQ,
    MSG_GET_PAY_POINT_LOTTERY_COST_ITEM_REQ,
    MSG_PAY_POINT_LOTTERY_ONCE_START_REQ,
    MSG_PAY_POINT_LOTTERY_ALL_START_REQ,
    MSG_GET_PAY_POINT_LOTTERY_OUTPU_REQ,
    MSG_PAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ,
    MSG_DONATE_INFO_REQ,
    MSG_DONATE_PUT_REQ,
    MSG_DONATE_RECEIVE_REQ,
    MSG_TOP_UP_RANK_INFO_REQ,
    MSG_VIP_ONLY_DUNGEON_INFO_REQ,
    MSG_VIP_ONLY_DUNGEON_ENTER_REQ,
    MSG_EGG_INFO_REQ,
    MSG_EGG_SMASH_REQ,
    MSG_BUY_CHEAP_INFO_REQ,
    MSG_BUY_CHEAP_BUY_REQ,
    MSG_BUY_CHEAP_REWARD_REQ,
    MSG_DAILY_FASHION_INFO_REQ,
    MSG_DAILY_FASHION_DRAW_REQ,
    MSG_HEAD_PORTRAIT_INFO_REQ,
    MSG_HEAD_PORTRAIT_INIT_REQ,
    MSG_SKILL_STRENGTHEN_INFO_REQ,
    MSG_STORE_INFO_REQ,
    MSG_STORE_SORT_REQ,
    MSG_ALCHEMY_MAKE_INFO_REQ,
    MSG_DECOMPOSE_ITEM_REQ,
    0
};
/*Define Structs and Unions        Begin*/
typedef struct tagNONE
{
    // construct
    tagNONE();
    // operator =
    tagNONE& operator=(const tagNONE& c);
    // Clear
    void Clear();
    // member
} NONE;
typedef struct tagBIGINT_ID
{
    // construct
    tagBIGINT_ID();
    // operator =
    tagBIGINT_ID& operator=(const tagBIGINT_ID& c);
    // Clear
    void Clear();
    // member
    unsigned int	id_l;
    unsigned int	id_h;
} BIGINT_ID;
typedef struct tagVECTOR3D_INT
{
    // construct
    tagVECTOR3D_INT();
    // operator =
    tagVECTOR3D_INT& operator=(const tagVECTOR3D_INT& c);
    // Clear
    void Clear();
    // member
    int	x;
    int	y;
    int	z;
} VECTOR3D_INT;
typedef struct tagERROR_CODE
{
    // construct
    tagERROR_CODE();
    // operator =
    tagERROR_CODE& operator=(const tagERROR_CODE& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} ERROR_CODE;
typedef struct tagSERVER_TIME
{
    // construct
    tagSERVER_TIME();
    // operator =
    tagSERVER_TIME& operator=(const tagSERVER_TIME& c);
    // Clear
    void Clear();
    // member
    unsigned int	time;
} SERVER_TIME;
typedef struct tagSERVER_INFO_REQ
{
    // construct
    tagSERVER_INFO_REQ();
    // operator =
    tagSERVER_INFO_REQ& operator=(const tagSERVER_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	server_type;
    unsigned int	server_id;
    unsigned int	server_port;
    std::string	server_ip;
    std::string	server_outer_ip;
    unsigned char	game_type;
    unsigned int	version;
    unsigned int	center_id;
} SERVER_INFO_REQ;
typedef struct tagSERVER_INFO_ACK
{
    // construct
    tagSERVER_INFO_ACK();
    // operator =
    tagSERVER_INFO_ACK& operator=(const tagSERVER_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	center_id;
    unsigned int	server_port;
    std::string	server_ip;
    std::string	server_outer_ip;
} SERVER_INFO_ACK;
typedef struct tagSERVER_ACTIVE_REQ
{
    // construct
    tagSERVER_ACTIVE_REQ();
    // operator =
    tagSERVER_ACTIVE_REQ& operator=(const tagSERVER_ACTIVE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	server_type;
    unsigned int	server_id;
    unsigned int	center_id;
} SERVER_ACTIVE_REQ;
typedef struct tagSERVER_ACTIVE_ACK
{
    // construct
    tagSERVER_ACTIVE_ACK();
    // operator =
    tagSERVER_ACTIVE_ACK& operator=(const tagSERVER_ACTIVE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned short	center_id;
} SERVER_ACTIVE_ACK;
typedef struct tagSERVER_LIST_REQ
{
    // construct
    tagSERVER_LIST_REQ();
    // operator =
    tagSERVER_LIST_REQ& operator=(const tagSERVER_LIST_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	server_type;
    unsigned int	server_id;
} SERVER_LIST_REQ;
typedef struct tagSERVER_INFO
{
    // construct
    tagSERVER_INFO();
    // operator =
    tagSERVER_INFO& operator=(const tagSERVER_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	server_type;
    unsigned int	server_id;
    unsigned int	server_port;
    unsigned int	center_id;
    std::string	server_ip;
    std::string	server_outer_ip;
} SERVER_INFO;
typedef struct tagSERVER_LIST_ACK
{
    // construct
    tagSERVER_LIST_ACK();
    // operator =
    tagSERVER_LIST_ACK& operator=(const tagSERVER_LIST_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<SERVER_INFO>	list;
} SERVER_LIST_ACK;
typedef struct tagSERVER_GATEID_ACK
{
    // construct
    tagSERVER_GATEID_ACK();
    // operator =
    tagSERVER_GATEID_ACK& operator=(const tagSERVER_GATEID_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	center_id;
    unsigned int	gate_id;
} SERVER_GATEID_ACK;
typedef struct tagSERVER_DUNGEON_INFO
{
    // construct
    tagSERVER_DUNGEON_INFO();
    // operator =
    tagSERVER_DUNGEON_INFO& operator=(const tagSERVER_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	center_game_id;
    unsigned int	dungeon_id;
    unsigned int	max_channel;
    unsigned int	max_player;
} SERVER_DUNGEON_INFO;
typedef struct tagSERVER_DUNGEON_LIST_NTF
{
    // construct
    tagSERVER_DUNGEON_LIST_NTF();
    // operator =
    tagSERVER_DUNGEON_LIST_NTF& operator=(const tagSERVER_DUNGEON_LIST_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<SERVER_DUNGEON_INFO>	list;
} SERVER_DUNGEON_LIST_NTF;
typedef struct tagMONITOR_INFO_REQ
{
    // construct
    tagMONITOR_INFO_REQ();
    // operator =
    tagMONITOR_INFO_REQ& operator=(const tagMONITOR_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	test;
} MONITOR_INFO_REQ;
typedef struct tagMONITOR_PLAYER_INFO
{
    // construct
    tagMONITOR_PLAYER_INFO();
    // operator =
    tagMONITOR_PLAYER_INFO& operator=(const tagMONITOR_PLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	acount;
    std::string	name;
    unsigned int	dungeon_id;
} MONITOR_PLAYER_INFO;
typedef struct tagMONITOR_INFO_ACK
{
    // construct
    tagMONITOR_INFO_ACK();
    // operator =
    tagMONITOR_INFO_ACK& operator=(const tagMONITOR_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	test;
    std::vector<MONITOR_PLAYER_INFO>	player_list;
} MONITOR_INFO_ACK;
typedef struct tagDUNGEON_INFO
{
    // construct
    tagDUNGEON_INFO();
    // operator =
    tagDUNGEON_INFO& operator=(const tagDUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
    unsigned int	channel_count;
    unsigned int	player_count;
} DUNGEON_INFO;
typedef struct tagMONITOR_DUNGEON_INFO_ACK
{
    // construct
    tagMONITOR_DUNGEON_INFO_ACK();
    // operator =
    tagMONITOR_DUNGEON_INFO_ACK& operator=(const tagMONITOR_DUNGEON_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<DUNGEON_INFO>	dungeon_list;
} MONITOR_DUNGEON_INFO_ACK;
typedef struct tagGATESVR_CLOSE_NTF
{
    // construct
    tagGATESVR_CLOSE_NTF();
    // operator =
    tagGATESVR_CLOSE_NTF& operator=(const tagGATESVR_CLOSE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned short	reason;
} GATESVR_CLOSE_NTF;
typedef struct tagSYNC_FRAME_NTF
{
    // construct
    tagSYNC_FRAME_NTF();
    // operator =
    tagSYNC_FRAME_NTF& operator=(const tagSYNC_FRAME_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	frame_count;
} SYNC_FRAME_NTF;
typedef struct tagTEST_ECHO
{
    // construct
    tagTEST_ECHO();
    // operator =
    tagTEST_ECHO& operator=(const tagTEST_ECHO& c);
    // Clear
    void Clear();
    // member
    std::string	info;
    unsigned int	time;
} TEST_ECHO;
typedef struct tagTEST_DTAT1
{
    // construct
    tagTEST_DTAT1();
    // operator =
    tagTEST_DTAT1& operator=(const tagTEST_DTAT1& c);
    // Clear
    void Clear();
    // member
    unsigned char	val1;
    char	val2;
    short	val3;
    unsigned short	val4;
    int	val5;
    unsigned int	val6;
    float	val7;
    std::string	val8;
} TEST_DTAT1;
typedef struct tagTEST_DTAT2
{
    // construct
    tagTEST_DTAT2();
    // operator =
    tagTEST_DTAT2& operator=(const tagTEST_DTAT2& c);
    // Clear
    void Clear();
    // member
    std::vector<unsigned char>	val1;
    std::vector<char>	val2;
    std::vector<short>	val3;
    std::vector<unsigned short>	val4;
    std::vector<int>	val5;
    std::vector<unsigned int>	val6;
    std::vector<float>	val7;
    std::vector<std::string>	val8;
} TEST_DTAT2;
typedef struct tagTEST_DTAT3
{
    // construct
    tagTEST_DTAT3();
    // operator =
    tagTEST_DTAT3& operator=(const tagTEST_DTAT3& c);
    // Clear
    void Clear();
    // member
    TEST_DTAT1	val1;
    TEST_DTAT2	val2;
    std::vector<int>	val4;
} TEST_DTAT3;
typedef struct tagENCRYPT_TOKEN
{
    // construct
    tagENCRYPT_TOKEN();
    // operator =
    tagENCRYPT_TOKEN& operator=(const tagENCRYPT_TOKEN& c);
    // Clear
    void Clear();
    // member
    unsigned int	key;
} ENCRYPT_TOKEN;
typedef struct tagLOGIN_GAME_REQ
{
    // construct
    tagLOGIN_GAME_REQ();
    // operator =
    tagLOGIN_GAME_REQ& operator=(const tagLOGIN_GAME_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	version;
    std::string	token;
    unsigned int	addr_ip;
    unsigned short	addr_port;
    unsigned char	net_compress;
} LOGIN_GAME_REQ;
typedef struct tagLOGIN_GAME_ACK
{
    // construct
    tagLOGIN_GAME_ACK();
    // operator =
    tagLOGIN_GAME_ACK& operator=(const tagLOGIN_GAME_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} LOGIN_GAME_ACK;
typedef struct tagKEY_VALUE
{
    // construct
    tagKEY_VALUE();
    // operator =
    tagKEY_VALUE& operator=(const tagKEY_VALUE& c);
    // Clear
    void Clear();
    // member
    unsigned short	key;
    int	value;
} KEY_VALUE;
typedef struct tagCHANGE_PLAYER_NAME_REQ
{
    // construct
    tagCHANGE_PLAYER_NAME_REQ();
    // operator =
    tagCHANGE_PLAYER_NAME_REQ& operator=(const tagCHANGE_PLAYER_NAME_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	name;
} CHANGE_PLAYER_NAME_REQ;
typedef struct tagCHANGE_PLAYER_NAME_ACK
{
    // construct
    tagCHANGE_PLAYER_NAME_ACK();
    // operator =
    tagCHANGE_PLAYER_NAME_ACK& operator=(const tagCHANGE_PLAYER_NAME_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	object_id;
    std::string	name;
} CHANGE_PLAYER_NAME_ACK;
typedef struct tagSET_MAP_TYPE_REQ
{
    // construct
    tagSET_MAP_TYPE_REQ();
    // operator =
    tagSET_MAP_TYPE_REQ& operator=(const tagSET_MAP_TYPE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	map_type;
} SET_MAP_TYPE_REQ;
typedef struct tagSET_CURRENT_RESUREGECE_REQ
{
    // construct
    tagSET_CURRENT_RESUREGECE_REQ();
    // operator =
    tagSET_CURRENT_RESUREGECE_REQ& operator=(const tagSET_CURRENT_RESUREGECE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	current_resurgence;
} SET_CURRENT_RESUREGECE_REQ;
typedef struct tagLEVEL_ACTIVITY_INFO
{
    // construct
    tagLEVEL_ACTIVITY_INFO();
    // operator =
    tagLEVEL_ACTIVITY_INFO& operator=(const tagLEVEL_ACTIVITY_INFO& c);
    // Clear
    void Clear();
    // member
    int	accept_flag;
} LEVEL_ACTIVITY_INFO;
typedef struct tagENEMY_RECORD
{
    // construct
    tagENEMY_RECORD();
    // operator =
    tagENEMY_RECORD& operator=(const tagENEMY_RECORD& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	player_id;
    unsigned char	flag;
    unsigned char	opt;
    unsigned char	state;
    unsigned int	record_time;
} ENEMY_RECORD;
typedef struct tagENEMY_INFO
{
    // construct
    tagENEMY_INFO();
    // operator =
    tagENEMY_INFO& operator=(const tagENEMY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	db_flag;
    int	evil_point;
    unsigned int	update_time;
    std::vector<ENEMY_RECORD>	enemy_list;
} ENEMY_INFO;
typedef struct tagENEMY_ATTACKER_INFO
{
    // construct
    tagENEMY_ATTACKER_INFO();
    // operator =
    tagENEMY_ATTACKER_INFO& operator=(const tagENEMY_ATTACKER_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<unsigned int>	list;
} ENEMY_ATTACKER_INFO;
typedef struct tagCREATURE_EVIL
{
    // construct
    tagCREATURE_EVIL();
    // operator =
    tagCREATURE_EVIL& operator=(const tagCREATURE_EVIL& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    int	evil;
} CREATURE_EVIL;
typedef struct tagCREATURE_EVIL_LIST
{
    // construct
    tagCREATURE_EVIL_LIST();
    // operator =
    tagCREATURE_EVIL_LIST& operator=(const tagCREATURE_EVIL_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<CREATURE_EVIL>	list;
} CREATURE_EVIL_LIST;
typedef struct tagFIGHT_MODE_REQ
{
    // construct
    tagFIGHT_MODE_REQ();
    // operator =
    tagFIGHT_MODE_REQ& operator=(const tagFIGHT_MODE_REQ& c);
    // Clear
    void Clear();
    // member
    int	fight_mode;
} FIGHT_MODE_REQ;
typedef struct tagFIGHT_MODE_ACK
{
    // construct
    tagFIGHT_MODE_ACK();
    // operator =
    tagFIGHT_MODE_ACK& operator=(const tagFIGHT_MODE_ACK& c);
    // Clear
    void Clear();
    // member
    int	fight_mode;
} FIGHT_MODE_ACK;
typedef struct tagPROPERTY_INFO
{
    // construct
    tagPROPERTY_INFO();
    // operator =
    tagPROPERTY_INFO& operator=(const tagPROPERTY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    BIGINT_ID	player_id;
    std::string	account;
    std::string	name;
    std::string	platform_server_name;
    int	region;
    char	sex;
    char	career;
    unsigned int	group;
    int	level;
    int	exp;
    int	max_exp;
    int	game_point;
    int	money_point;
    int	vigor;
    unsigned int	vigor_reftime;
    unsigned int	daily_reftime;
    int	hp;
    int	mp;
    int	max_hp;
    int	max_mp;
    unsigned int	guild_id_h;
    unsigned int	guild_id_l;
    std::string	guild_name;
    unsigned int	guild_join_time;
    unsigned int	unionmap_id;
    int	x;
    int	y;
    int	angle;
    unsigned int	right_flag;
    unsigned int	addr_ip;
    unsigned short	addr_port;
    unsigned int	online_time;
} PROPERTY_INFO;
typedef struct tagTURNTABLE_ACK
{
    // construct
    tagTURNTABLE_ACK();
    // operator =
    tagTURNTABLE_ACK& operator=(const tagTURNTABLE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	pos;
} TURNTABLE_ACK;
typedef struct tagCAREER_DATA
{
    // construct
    tagCAREER_DATA();
    // operator =
    tagCAREER_DATA& operator=(const tagCAREER_DATA& c);
    // Clear
    void Clear();
    // member
    char	career;
} CAREER_DATA;
typedef struct tagACTIVATION_CODE
{
    // construct
    tagACTIVATION_CODE();
    // operator =
    tagACTIVATION_CODE& operator=(const tagACTIVATION_CODE& c);
    // Clear
    void Clear();
    // member
    std::string	activation_code;
    int	type;
} ACTIVATION_CODE;
typedef struct tagSTONE_TURN_GOLD
{
    // construct
    tagSTONE_TURN_GOLD();
    // operator =
    tagSTONE_TURN_GOLD& operator=(const tagSTONE_TURN_GOLD& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
} STONE_TURN_GOLD;
typedef struct tagREWARD_ITEM
{
    // construct
    tagREWARD_ITEM();
    // operator =
    tagREWARD_ITEM& operator=(const tagREWARD_ITEM& c);
    // Clear
    void Clear();
    // member
    unsigned char	flag;
    unsigned int	id;
    int	num;
} REWARD_ITEM;
typedef struct tagWELCOME_DATA
{
    // construct
    tagWELCOME_DATA();
    // operator =
    tagWELCOME_DATA& operator=(const tagWELCOME_DATA& c);
    // Clear
    void Clear();
    // member
    int	moneypoint;
    int	growthpoint;
} WELCOME_DATA;
typedef struct tagDO_CHANGE_ACK
{
    // construct
    tagDO_CHANGE_ACK();
    // operator =
    tagDO_CHANGE_ACK& operator=(const tagDO_CHANGE_ACK& c);
    // Clear
    void Clear();
    // member
    int	flag;
} DO_CHANGE_ACK;
typedef struct tagRAND_REWARD_ITEM
{
    // construct
    tagRAND_REWARD_ITEM();
    // operator =
    tagRAND_REWARD_ITEM& operator=(const tagRAND_REWARD_ITEM& c);
    // Clear
    void Clear();
    // member
    int	rate;
    REWARD_ITEM	item;
} RAND_REWARD_ITEM;
typedef struct tagREWARD_TABLE_REQ
{
    // construct
    tagREWARD_TABLE_REQ();
    // operator =
    tagREWARD_TABLE_REQ& operator=(const tagREWARD_TABLE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	reason;
    int	reason_arg;
} REWARD_TABLE_REQ;
typedef struct tagREWARD_TABLE
{
    // construct
    tagREWARD_TABLE();
    // operator =
    tagREWARD_TABLE& operator=(const tagREWARD_TABLE& c);
    // Clear
    void Clear();
    // member
    unsigned char	reason;
    int	reason_arg;
    std::vector<REWARD_ITEM>	items;
} REWARD_TABLE;
typedef struct tagREWARD_TABLE_LIST
{
    // construct
    tagREWARD_TABLE_LIST();
    // operator =
    tagREWARD_TABLE_LIST& operator=(const tagREWARD_TABLE_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	reason;
    int	reason_arg;
    std::vector<REWARD_TABLE>	reward_tables;
} REWARD_TABLE_LIST;
typedef struct tagREWARD_INFO
{
    // construct
    tagREWARD_INFO();
    // operator =
    tagREWARD_INFO& operator=(const tagREWARD_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<REWARD_TABLE>	tables;
} REWARD_INFO;
typedef struct tagRIDE_PET_INFO
{
    // construct
    tagRIDE_PET_INFO();
    // operator =
    tagRIDE_PET_INFO& operator=(const tagRIDE_PET_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    std::string	name;
    int	express;
    int	level;
    unsigned char	state;
    unsigned char	b_mark;
    unsigned char	b_get;
    unsigned char	b_train;
} RIDE_PET_INFO;
typedef struct tagRIDE_TRAIN
{
    // construct
    tagRIDE_TRAIN();
    // operator =
    tagRIDE_TRAIN& operator=(const tagRIDE_TRAIN& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned char	state;
    unsigned int	pet_id;
    unsigned int	mode_id;
    unsigned int	start_time;
} RIDE_TRAIN;
typedef struct tagRIDE_PET_TRAIN_LIST
{
    // construct
    tagRIDE_PET_TRAIN_LIST();
    // operator =
    tagRIDE_PET_TRAIN_LIST& operator=(const tagRIDE_PET_TRAIN_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<RIDE_TRAIN>	ride_train_list;
} RIDE_PET_TRAIN_LIST;
typedef struct tagRIDE_MARKT
{
    // construct
    tagRIDE_MARKT();
    // operator =
    tagRIDE_MARKT& operator=(const tagRIDE_MARKT& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned char	state;
    unsigned int	pet_id;
} RIDE_MARKT;
typedef struct tagRIDE_ALTAS
{
    // construct
    tagRIDE_ALTAS();
    // operator =
    tagRIDE_ALTAS& operator=(const tagRIDE_ALTAS& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    int	num;
    unsigned char	state;
} RIDE_ALTAS;
typedef struct tagRIDE_ALTAS_ACK
{
    // construct
    tagRIDE_ALTAS_ACK();
    // operator =
    tagRIDE_ALTAS_ACK& operator=(const tagRIDE_ALTAS_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<RIDE_ALTAS>	ride_altas_list;
} RIDE_ALTAS_ACK;
typedef struct tagRIDE_PET_SET_MODELS_REQ
{
    // construct
    tagRIDE_PET_SET_MODELS_REQ();
    // operator =
    tagRIDE_PET_SET_MODELS_REQ& operator=(const tagRIDE_PET_SET_MODELS_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	fieldid;
    unsigned int	modeid;
    unsigned int	petid;
} RIDE_PET_SET_MODELS_REQ;
typedef struct tagRIDE_PET_MARK_LIST
{
    // construct
    tagRIDE_PET_MARK_LIST();
    // operator =
    tagRIDE_PET_MARK_LIST& operator=(const tagRIDE_PET_MARK_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<RIDE_MARKT>	mark_list;
} RIDE_PET_MARK_LIST;
typedef struct tagRIDE_PET_LIST
{
    // construct
    tagRIDE_PET_LIST();
    // operator =
    tagRIDE_PET_LIST& operator=(const tagRIDE_PET_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<RIDE_PET_INFO>	ride_pet_list;
} RIDE_PET_LIST;
typedef struct tagRIDE_PET_MARK_ACK
{
    // construct
    tagRIDE_PET_MARK_ACK();
    // operator =
    tagRIDE_PET_MARK_ACK& operator=(const tagRIDE_PET_MARK_ACK& c);
    // Clear
    void Clear();
    // member
    RIDE_PET_LIST	ride_pet_list;
    RIDE_PET_MARK_LIST	mark_pet_list;
} RIDE_PET_MARK_ACK;
typedef struct tagINIT_RIDE_PET_ACK
{
    // construct
    tagINIT_RIDE_PET_ACK();
    // operator =
    tagINIT_RIDE_PET_ACK& operator=(const tagINIT_RIDE_PET_ACK& c);
    // Clear
    void Clear();
    // member
    RIDE_PET_LIST	ride_pet_list;
    std::vector<RIDE_PET_INFO>	ride_random_list;
    std::vector<REWARD_ITEM>	object_random_list;
    int	filed_num;
    unsigned char	b_free;
    unsigned char	b_open;
    std::vector<RIDE_MARKT>	mark_list;
    std::vector<RIDE_ALTAS>	ride_altas_list;
    std::vector<RIDE_TRAIN>	ride_train_list;
} INIT_RIDE_PET_ACK;
typedef struct tagSET_RIDE_PET_REQ
{
    // construct
    tagSET_RIDE_PET_REQ();
    // operator =
    tagSET_RIDE_PET_REQ& operator=(const tagSET_RIDE_PET_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} SET_RIDE_PET_REQ;
typedef struct tagSET_RIDE_PET_ACK
{
    // construct
    tagSET_RIDE_PET_ACK();
    // operator =
    tagSET_RIDE_PET_ACK& operator=(const tagSET_RIDE_PET_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} SET_RIDE_PET_ACK;
typedef struct tagRIDE_PET_INFO_ACK
{
    // construct
    tagRIDE_PET_INFO_ACK();
    // operator =
    tagRIDE_PET_INFO_ACK& operator=(const tagRIDE_PET_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    RIDE_PET_INFO	ride_pet;
} RIDE_PET_INFO_ACK;
typedef struct tagRIDE_PET_LEVELUP_ACK
{
    // construct
    tagRIDE_PET_LEVELUP_ACK();
    // operator =
    tagRIDE_PET_LEVELUP_ACK& operator=(const tagRIDE_PET_LEVELUP_ACK& c);
    // Clear
    void Clear();
    // member
    RIDE_PET_INFO	ride_pet;
    unsigned char	b_free;
} RIDE_PET_LEVELUP_ACK;
typedef struct tagRIDE_PET_LEVELUP_REQ
{
    // construct
    tagRIDE_PET_LEVELUP_REQ();
    // operator =
    tagRIDE_PET_LEVELUP_REQ& operator=(const tagRIDE_PET_LEVELUP_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	type;
    unsigned int	item_id;
} RIDE_PET_LEVELUP_REQ;
typedef struct tagRIDE_PET_RIDEORFREE_REQ
{
    // construct
    tagRIDE_PET_RIDEORFREE_REQ();
    // operator =
    tagRIDE_PET_RIDEORFREE_REQ& operator=(const tagRIDE_PET_RIDEORFREE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	type;
} RIDE_PET_RIDEORFREE_REQ;
typedef struct tagRIDE_PET_MARK_REQ
{
    // construct
    tagRIDE_PET_MARK_REQ();
    // operator =
    tagRIDE_PET_MARK_REQ& operator=(const tagRIDE_PET_MARK_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	type;
    int	id;
} RIDE_PET_MARK_REQ;
typedef struct tagRIDE_PET_TRAIN_REQ
{
    // construct
    tagRIDE_PET_TRAIN_REQ();
    // operator =
    tagRIDE_PET_TRAIN_REQ& operator=(const tagRIDE_PET_TRAIN_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	type;
} RIDE_PET_TRAIN_REQ;
typedef struct tagRIDE_TRAIN_REQ
{
    // construct
    tagRIDE_TRAIN_REQ();
    // operator =
    tagRIDE_TRAIN_REQ& operator=(const tagRIDE_TRAIN_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	field_id;
} RIDE_TRAIN_REQ;
typedef struct tagEND_TRAIN_REQ
{
    // construct
    tagEND_TRAIN_REQ();
    // operator =
    tagEND_TRAIN_REQ& operator=(const tagEND_TRAIN_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	field_id;
    unsigned int	time;
} END_TRAIN_REQ;
typedef struct tagEND_TRAIN_ACK
{
    // construct
    tagEND_TRAIN_ACK();
    // operator =
    tagEND_TRAIN_ACK& operator=(const tagEND_TRAIN_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	time;
    unsigned char	opt_flag;
    RIDE_TRAIN	ride_train;
    RIDE_PET_INFO	ride_petinfo;
} END_TRAIN_ACK;
typedef struct tagRIDE_PET_OPENFILED_REQ
{
    // construct
    tagRIDE_PET_OPENFILED_REQ();
    // operator =
    tagRIDE_PET_OPENFILED_REQ& operator=(const tagRIDE_PET_OPENFILED_REQ& c);
    // Clear
    void Clear();
    // member
} RIDE_PET_OPENFILED_REQ;
typedef struct tagRIDE_PET_OPENFILED_ACK
{
    // construct
    tagRIDE_PET_OPENFILED_ACK();
    // operator =
    tagRIDE_PET_OPENFILED_ACK& operator=(const tagRIDE_PET_OPENFILED_ACK& c);
    // Clear
    void Clear();
    // member
    int	fieldnum;
} RIDE_PET_OPENFILED_ACK;
typedef struct tagRIDE_PET_UPDATE_REQ
{
    // construct
    tagRIDE_PET_UPDATE_REQ();
    // operator =
    tagRIDE_PET_UPDATE_REQ& operator=(const tagRIDE_PET_UPDATE_REQ& c);
    // Clear
    void Clear();
    // member
    int	type;
    int	use_moneypoint;
} RIDE_PET_UPDATE_REQ;
typedef struct tagRIDE_PET_UPDATE_ACK
{
    // construct
    tagRIDE_PET_UPDATE_ACK();
    // operator =
    tagRIDE_PET_UPDATE_ACK& operator=(const tagRIDE_PET_UPDATE_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<RIDE_PET_INFO>	ride_random_list;
    std::vector<REWARD_ITEM>	object_random_list;
} RIDE_PET_UPDATE_ACK;
typedef struct tagRIDE_PET_SENDGIF_ACK
{
    // construct
    tagRIDE_PET_SENDGIF_ACK();
    // operator =
    tagRIDE_PET_SENDGIF_ACK& operator=(const tagRIDE_PET_SENDGIF_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<REWARD_ITEM>	object_random_list;
} RIDE_PET_SENDGIF_ACK;
typedef struct tagRIDE_PET_ABSORB_REQ
{
    // construct
    tagRIDE_PET_ABSORB_REQ();
    // operator =
    tagRIDE_PET_ABSORB_REQ& operator=(const tagRIDE_PET_ABSORB_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	type;
    unsigned int	choose_id1;
    unsigned int	choose_id2;
    unsigned int	choose_id3;
} RIDE_PET_ABSORB_REQ;
typedef struct tagRAND_ITEM_INFO
{
    // construct
    tagRAND_ITEM_INFO();
    // operator =
    tagRAND_ITEM_INFO& operator=(const tagRAND_ITEM_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    int	value;
    int	num;
} RAND_ITEM_INFO;
typedef struct tagACTIVATION_INFO
{
    // construct
    tagACTIVATION_INFO();
    // operator =
    tagACTIVATION_INFO& operator=(const tagACTIVATION_INFO& c);
    // Clear
    void Clear();
    // member
    int	state;
    unsigned int	id;
} ACTIVATION_INFO;
typedef struct tagTRAIN_POST_REQ
{
    // construct
    tagTRAIN_POST_REQ();
    // operator =
    tagTRAIN_POST_REQ& operator=(const tagTRAIN_POST_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
} TRAIN_POST_REQ;
typedef struct tagSTONE_TRAIN_REQ
{
    // construct
    tagSTONE_TRAIN_REQ();
    // operator =
    tagSTONE_TRAIN_REQ& operator=(const tagSTONE_TRAIN_REQ& c);
    // Clear
    void Clear();
    // member
    int	pet_id;
    unsigned int	id;
    int	type;
} STONE_TRAIN_REQ;
typedef struct tagNOW_TRAIN_REQ
{
    // construct
    tagNOW_TRAIN_REQ();
    // operator =
    tagNOW_TRAIN_REQ& operator=(const tagNOW_TRAIN_REQ& c);
    // Clear
    void Clear();
    // member
    int	pet_id;
    unsigned int	id;
} NOW_TRAIN_REQ;
typedef struct tagRANDOM_EXP
{
    // construct
    tagRANDOM_EXP();
    // operator =
    tagRANDOM_EXP& operator=(const tagRANDOM_EXP& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
} RANDOM_EXP;
typedef struct tagFOLLOW_PET_INFO
{
    // construct
    tagFOLLOW_PET_INFO();
    // operator =
    tagFOLLOW_PET_INFO& operator=(const tagFOLLOW_PET_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	cur_state;
    std::string	name;
    int	cur_fightState;
    int	cur_express;
    int	cur_level;
    int	cur_step;
    int	skill_level;
    int	rskill_level;
    int	formation_state;
    std::vector<ACTIVATION_INFO>	active_list;
} FOLLOW_PET_INFO;
typedef struct tagPROTECT_SOUL
{
    // construct
    tagPROTECT_SOUL();
    // operator =
    tagPROTECT_SOUL& operator=(const tagPROTECT_SOUL& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned char	state;
    int	step;
    int	level;
    int	exp;
} PROTECT_SOUL;
typedef struct tagPROTECT_SOUL_INIT
{
    // construct
    tagPROTECT_SOUL_INIT();
    // operator =
    tagPROTECT_SOUL_INIT& operator=(const tagPROTECT_SOUL_INIT& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned char	opt_flag;
    std::vector<PROTECT_SOUL>	soul_list;
} PROTECT_SOUL_INIT;
typedef struct tagFOLLOW_PET_LIST
{
    // construct
    tagFOLLOW_PET_LIST();
    // operator =
    tagFOLLOW_PET_LIST& operator=(const tagFOLLOW_PET_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<FOLLOW_PET_INFO>	follow_pet_list;
} FOLLOW_PET_LIST;
typedef struct tagFOLLOW_PET_RANDOM_EXP
{
    // construct
    tagFOLLOW_PET_RANDOM_EXP();
    // operator =
    tagFOLLOW_PET_RANDOM_EXP& operator=(const tagFOLLOW_PET_RANDOM_EXP& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    unsigned int	pet_id;
} FOLLOW_PET_RANDOM_EXP;
typedef struct tagFOLLOW_PET_RANDOM_EXP_ACK
{
    // construct
    tagFOLLOW_PET_RANDOM_EXP_ACK();
    // operator =
    tagFOLLOW_PET_RANDOM_EXP_ACK& operator=(const tagFOLLOW_PET_RANDOM_EXP_ACK& c);
    // Clear
    void Clear();
    // member
    FOLLOW_PET_INFO	follow_pet;
    std::vector<RANDOM_EXP>	exp_list;
} FOLLOW_PET_RANDOM_EXP_ACK;
typedef struct tagPROTECT_SOUL_LEVEL
{
    // construct
    tagPROTECT_SOUL_LEVEL();
    // operator =
    tagPROTECT_SOUL_LEVEL& operator=(const tagPROTECT_SOUL_LEVEL& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    unsigned int	id;
    unsigned char	money;
} PROTECT_SOUL_LEVEL;
typedef struct tagFOLLOW_PET_ACTIVE_SOUL_ACK
{
    // construct
    tagFOLLOW_PET_ACTIVE_SOUL_ACK();
    // operator =
    tagFOLLOW_PET_ACTIVE_SOUL_ACK& operator=(const tagFOLLOW_PET_ACTIVE_SOUL_ACK& c);
    // Clear
    void Clear();
    // member
} FOLLOW_PET_ACTIVE_SOUL_ACK;
typedef struct tagFOLLOW_PET_LIST_UPDATE_REQ
{
    // construct
    tagFOLLOW_PET_LIST_UPDATE_REQ();
    // operator =
    tagFOLLOW_PET_LIST_UPDATE_REQ& operator=(const tagFOLLOW_PET_LIST_UPDATE_REQ& c);
    // Clear
    void Clear();
    // member
} FOLLOW_PET_LIST_UPDATE_REQ;
typedef struct tagFOLLOW_PET_SERACH_UPDATE_REQ
{
    // construct
    tagFOLLOW_PET_SERACH_UPDATE_REQ();
    // operator =
    tagFOLLOW_PET_SERACH_UPDATE_REQ& operator=(const tagFOLLOW_PET_SERACH_UPDATE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_SERACH_UPDATE_REQ;
typedef struct tagFOLLOW_PET_SERACH_UPDATE_ACK
{
    // construct
    tagFOLLOW_PET_SERACH_UPDATE_ACK();
    // operator =
    tagFOLLOW_PET_SERACH_UPDATE_ACK& operator=(const tagFOLLOW_PET_SERACH_UPDATE_ACK& c);
    // Clear
    void Clear();
    // member
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_SERACH_UPDATE_ACK;
typedef struct tagFOLLOW_PET_ADD_ACK
{
    // construct
    tagFOLLOW_PET_ADD_ACK();
    // operator =
    tagFOLLOW_PET_ADD_ACK& operator=(const tagFOLLOW_PET_ADD_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<FOLLOW_PET_INFO>	follow_pet_list;
} FOLLOW_PET_ADD_ACK;
typedef struct tagFOLLOW_PET_INIT_REQ
{
    // construct
    tagFOLLOW_PET_INIT_REQ();
    // operator =
    tagFOLLOW_PET_INIT_REQ& operator=(const tagFOLLOW_PET_INIT_REQ& c);
    // Clear
    void Clear();
    // member
} FOLLOW_PET_INIT_REQ;
typedef struct tagFOLLOW_PET_INIT_ACK
{
    // construct
    tagFOLLOW_PET_INIT_ACK();
    // operator =
    tagFOLLOW_PET_INIT_ACK& operator=(const tagFOLLOW_PET_INIT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<FOLLOW_PET_INFO>	follow_pet_list;
} FOLLOW_PET_INIT_ACK;
typedef struct tagFOLLOW_PET_FREE_LEVE_ACK
{
    // construct
    tagFOLLOW_PET_FREE_LEVE_ACK();
    // operator =
    tagFOLLOW_PET_FREE_LEVE_ACK& operator=(const tagFOLLOW_PET_FREE_LEVE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    unsigned char	freenum;
    unsigned short	time;
} FOLLOW_PET_FREE_LEVE_ACK;
typedef struct tagFOLLOW_PET_FINGERGUESS_REQ
{
    // construct
    tagFOLLOW_PET_FINGERGUESS_REQ();
    // operator =
    tagFOLLOW_PET_FINGERGUESS_REQ& operator=(const tagFOLLOW_PET_FINGERGUESS_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	finger_type;
    int	itemid;
} FOLLOW_PET_FINGERGUESS_REQ;
typedef struct tagFOLLOW_PET_FINGERGUESS_ACK
{
    // construct
    tagFOLLOW_PET_FINGERGUESS_ACK();
    // operator =
    tagFOLLOW_PET_FINGERGUESS_ACK& operator=(const tagFOLLOW_PET_FINGERGUESS_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	result;
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_FINGERGUESS_ACK;
typedef struct tagFOLLOW_PET_MODIFYNAME_REQ
{
    // construct
    tagFOLLOW_PET_MODIFYNAME_REQ();
    // operator =
    tagFOLLOW_PET_MODIFYNAME_REQ& operator=(const tagFOLLOW_PET_MODIFYNAME_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    std::string	name;
} FOLLOW_PET_MODIFYNAME_REQ;
typedef struct tagFOLLOW_PET_MODIFYNAME_ACK
{
    // construct
    tagFOLLOW_PET_MODIFYNAME_ACK();
    // operator =
    tagFOLLOW_PET_MODIFYNAME_ACK& operator=(const tagFOLLOW_PET_MODIFYNAME_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    std::string	Name;
    unsigned int	pet_id;
} FOLLOW_PET_MODIFYNAME_ACK;
typedef struct tagFOLLOW_AUTOEAT_REQ
{
    // construct
    tagFOLLOW_AUTOEAT_REQ();
    // operator =
    tagFOLLOW_AUTOEAT_REQ& operator=(const tagFOLLOW_AUTOEAT_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	item_id;
    int	type;
} FOLLOW_AUTOEAT_REQ;
typedef struct tagFOLLOW_AUTOEAT_ACK
{
    // construct
    tagFOLLOW_AUTOEAT_ACK();
    // operator =
    tagFOLLOW_AUTOEAT_ACK& operator=(const tagFOLLOW_AUTOEAT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_AUTOEAT_ACK;
typedef struct tagFOLLOW_PET_SHOW_REQ
{
    // construct
    tagFOLLOW_PET_SHOW_REQ();
    // operator =
    tagFOLLOW_PET_SHOW_REQ& operator=(const tagFOLLOW_PET_SHOW_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_SHOW_REQ;
typedef struct tagFOLLOW_PET_SHOW_ACK
{
    // construct
    tagFOLLOW_PET_SHOW_ACK();
    // operator =
    tagFOLLOW_PET_SHOW_ACK& operator=(const tagFOLLOW_PET_SHOW_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<FOLLOW_PET_INFO>	follow_pet_list;
} FOLLOW_PET_SHOW_ACK;
typedef struct tagFOLLOW_PET_CANLESHOW_REQ
{
    // construct
    tagFOLLOW_PET_CANLESHOW_REQ();
    // operator =
    tagFOLLOW_PET_CANLESHOW_REQ& operator=(const tagFOLLOW_PET_CANLESHOW_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_CANLESHOW_REQ;
typedef struct tagFOLLOW_PET_CANLESHOW_ACK
{
    // construct
    tagFOLLOW_PET_CANLESHOW_ACK();
    // operator =
    tagFOLLOW_PET_CANLESHOW_ACK& operator=(const tagFOLLOW_PET_CANLESHOW_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_CANLESHOW_ACK;
typedef struct tagFOLLOW_PET_EATSOUL_REQ
{
    // construct
    tagFOLLOW_PET_EATSOUL_REQ();
    // operator =
    tagFOLLOW_PET_EATSOUL_REQ& operator=(const tagFOLLOW_PET_EATSOUL_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_EATSOUL_REQ;
typedef struct tagFOLLOW_PET_EATSOUL_ACK
{
    // construct
    tagFOLLOW_PET_EATSOUL_ACK();
    // operator =
    tagFOLLOW_PET_EATSOUL_ACK& operator=(const tagFOLLOW_PET_EATSOUL_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_EATSOUL_ACK;
typedef struct tagFOLLOW_PET_ACTIVE_SOUL_REQ
{
    // construct
    tagFOLLOW_PET_ACTIVE_SOUL_REQ();
    // operator =
    tagFOLLOW_PET_ACTIVE_SOUL_REQ& operator=(const tagFOLLOW_PET_ACTIVE_SOUL_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	id;
} FOLLOW_PET_ACTIVE_SOUL_REQ;
typedef struct tagFOLLOW_PET_SWALLOW_REQ
{
    // construct
    tagFOLLOW_PET_SWALLOW_REQ();
    // operator =
    tagFOLLOW_PET_SWALLOW_REQ& operator=(const tagFOLLOW_PET_SWALLOW_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	cur_pet_id;
    unsigned int	choose_petid;
    unsigned char	SwallowType;
} FOLLOW_PET_SWALLOW_REQ;
typedef struct tagFOLLOW_PET_SWALLOW_ACK
{
    // construct
    tagFOLLOW_PET_SWALLOW_ACK();
    // operator =
    tagFOLLOW_PET_SWALLOW_ACK& operator=(const tagFOLLOW_PET_SWALLOW_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    std::vector<FOLLOW_PET_INFO>	follow_pet_list;
} FOLLOW_PET_SWALLOW_ACK;
typedef struct tagFOLLOW_PET_STARCHSEARCH_REQ
{
    // construct
    tagFOLLOW_PET_STARCHSEARCH_REQ();
    // operator =
    tagFOLLOW_PET_STARCHSEARCH_REQ& operator=(const tagFOLLOW_PET_STARCHSEARCH_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	searchType;
    int	sceneid;
    int	search_count;
} FOLLOW_PET_STARCHSEARCH_REQ;
typedef struct tagFOLLOW_PET_STARCHSEARCH_ACK
{
    // construct
    tagFOLLOW_PET_STARCHSEARCH_ACK();
    // operator =
    tagFOLLOW_PET_STARCHSEARCH_ACK& operator=(const tagFOLLOW_PET_STARCHSEARCH_ACK& c);
    // Clear
    void Clear();
    // member
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_STARCHSEARCH_ACK;
typedef struct tagFOLLOW_PET_FINISHSEARCH_REQ
{
    // construct
    tagFOLLOW_PET_FINISHSEARCH_REQ();
    // operator =
    tagFOLLOW_PET_FINISHSEARCH_REQ& operator=(const tagFOLLOW_PET_FINISHSEARCH_REQ& c);
    // Clear
    void Clear();
    // member
    int	finishtime;
    unsigned int	pet_id;
} FOLLOW_PET_FINISHSEARCH_REQ;
typedef struct tagFOLLOW_PET_FINISHSEARCH_ACK
{
    // construct
    tagFOLLOW_PET_FINISHSEARCH_ACK();
    // operator =
    tagFOLLOW_PET_FINISHSEARCH_ACK& operator=(const tagFOLLOW_PET_FINISHSEARCH_ACK& c);
    // Clear
    void Clear();
    // member
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_FINISHSEARCH_ACK;
typedef struct tagFOLLOW_PET_STOPSEARCH_REQ
{
    // construct
    tagFOLLOW_PET_STOPSEARCH_REQ();
    // operator =
    tagFOLLOW_PET_STOPSEARCH_REQ& operator=(const tagFOLLOW_PET_STOPSEARCH_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_STOPSEARCH_REQ;
typedef struct tagFOLLOW_PET_STOPSEARCH_ACK
{
    // construct
    tagFOLLOW_PET_STOPSEARCH_ACK();
    // operator =
    tagFOLLOW_PET_STOPSEARCH_ACK& operator=(const tagFOLLOW_PET_STOPSEARCH_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	state;
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_STOPSEARCH_ACK;
typedef struct tagFOLLOW_PET_GETSEARCHOBJ_REQ
{
    // construct
    tagFOLLOW_PET_GETSEARCHOBJ_REQ();
    // operator =
    tagFOLLOW_PET_GETSEARCHOBJ_REQ& operator=(const tagFOLLOW_PET_GETSEARCHOBJ_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_GETSEARCHOBJ_REQ;
typedef struct tagFOLLOW_PET_GETSEARCHOB_ACK
{
    // construct
    tagFOLLOW_PET_GETSEARCHOB_ACK();
    // operator =
    tagFOLLOW_PET_GETSEARCHOB_ACK& operator=(const tagFOLLOW_PET_GETSEARCHOB_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	state;
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_GETSEARCHOB_ACK;
typedef struct tagFOLLOW_PET_POSTEXERC_REQ
{
    // construct
    tagFOLLOW_PET_POSTEXERC_REQ();
    // operator =
    tagFOLLOW_PET_POSTEXERC_REQ& operator=(const tagFOLLOW_PET_POSTEXERC_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_POSTEXERC_REQ;
typedef struct tagFOLLOW_PET_POSTEXERC_ACK
{
    // construct
    tagFOLLOW_PET_POSTEXERC_ACK();
    // operator =
    tagFOLLOW_PET_POSTEXERC_ACK& operator=(const tagFOLLOW_PET_POSTEXERC_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} FOLLOW_PET_POSTEXERC_ACK;
typedef struct tagFOLLOW_PET_NOWEXERC_REQ
{
    // construct
    tagFOLLOW_PET_NOWEXERC_REQ();
    // operator =
    tagFOLLOW_PET_NOWEXERC_REQ& operator=(const tagFOLLOW_PET_NOWEXERC_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_NOWEXERC_REQ;
typedef struct tagFOLLOW_PET_NOWEXERC_ACK
{
    // construct
    tagFOLLOW_PET_NOWEXERC_ACK();
    // operator =
    tagFOLLOW_PET_NOWEXERC_ACK& operator=(const tagFOLLOW_PET_NOWEXERC_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	pet_express;
} FOLLOW_PET_NOWEXERC_ACK;
typedef struct tagFOLLOW_PET_TIMEEXER_REQ
{
    // construct
    tagFOLLOW_PET_TIMEEXER_REQ();
    // operator =
    tagFOLLOW_PET_TIMEEXER_REQ& operator=(const tagFOLLOW_PET_TIMEEXER_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    unsigned short	searchType;
} FOLLOW_PET_TIMEEXER_REQ;
typedef struct tagFOLLOW_PET_TIMEEXER_ACK
{
    // construct
    tagFOLLOW_PET_TIMEEXER_ACK();
    // operator =
    tagFOLLOW_PET_TIMEEXER_ACK& operator=(const tagFOLLOW_PET_TIMEEXER_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} FOLLOW_PET_TIMEEXER_ACK;
typedef struct tagFOLLOW_PET_OVERTIMEEXER_REQ
{
    // construct
    tagFOLLOW_PET_OVERTIMEEXER_REQ();
    // operator =
    tagFOLLOW_PET_OVERTIMEEXER_REQ& operator=(const tagFOLLOW_PET_OVERTIMEEXER_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_OVERTIMEEXER_REQ;
typedef struct tagFOLLOW_PET_OVERTIMEEXER_ACK
{
    // construct
    tagFOLLOW_PET_OVERTIMEEXER_ACK();
    // operator =
    tagFOLLOW_PET_OVERTIMEEXER_ACK& operator=(const tagFOLLOW_PET_OVERTIMEEXER_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned short	pet_express;
} FOLLOW_PET_OVERTIMEEXER_ACK;
typedef struct tagFOLLOW_PET_EVOLUTI_REQ
{
    // construct
    tagFOLLOW_PET_EVOLUTI_REQ();
    // operator =
    tagFOLLOW_PET_EVOLUTI_REQ& operator=(const tagFOLLOW_PET_EVOLUTI_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    int	itemid;
    int	neednum;
} FOLLOW_PET_EVOLUTI_REQ;
typedef struct tagFOLLOW_PET_EVOLUTI_ACK
{
    // construct
    tagFOLLOW_PET_EVOLUTI_ACK();
    // operator =
    tagFOLLOW_PET_EVOLUTI_ACK& operator=(const tagFOLLOW_PET_EVOLUTI_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	state;
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_EVOLUTI_ACK;
typedef struct tagFOLLOW_PET_CAN_RECUIT_REQ
{
    // construct
    tagFOLLOW_PET_CAN_RECUIT_REQ();
    // operator =
    tagFOLLOW_PET_CAN_RECUIT_REQ& operator=(const tagFOLLOW_PET_CAN_RECUIT_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
} FOLLOW_PET_CAN_RECUIT_REQ;
typedef struct tagFOLLOW_PET_CAN_RECUIT_ACK
{
    // construct
    tagFOLLOW_PET_CAN_RECUIT_ACK();
    // operator =
    tagFOLLOW_PET_CAN_RECUIT_ACK& operator=(const tagFOLLOW_PET_CAN_RECUIT_ACK& c);
    // Clear
    void Clear();
    // member
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_CAN_RECUIT_ACK;
typedef struct tagFOLLOW_PET_USEITEM_REQ
{
    // construct
    tagFOLLOW_PET_USEITEM_REQ();
    // operator =
    tagFOLLOW_PET_USEITEM_REQ& operator=(const tagFOLLOW_PET_USEITEM_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	item_id;
} FOLLOW_PET_USEITEM_REQ;
typedef struct tagFOLLOW_PET_USEITEM_ACK
{
    // construct
    tagFOLLOW_PET_USEITEM_ACK();
    // operator =
    tagFOLLOW_PET_USEITEM_ACK& operator=(const tagFOLLOW_PET_USEITEM_ACK& c);
    // Clear
    void Clear();
    // member
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_USEITEM_ACK;
typedef struct tagFOLLOW_PET_LEVLE_UP_ACK
{
    // construct
    tagFOLLOW_PET_LEVLE_UP_ACK();
    // operator =
    tagFOLLOW_PET_LEVLE_UP_ACK& operator=(const tagFOLLOW_PET_LEVLE_UP_ACK& c);
    // Clear
    void Clear();
    // member
    FOLLOW_PET_INFO	follow_pet;
} FOLLOW_PET_LEVLE_UP_ACK;
typedef struct tagFORMATION_LOCK_INFO
{
    // construct
    tagFORMATION_LOCK_INFO();
    // operator =
    tagFORMATION_LOCK_INFO& operator=(const tagFORMATION_LOCK_INFO& c);
    // Clear
    void Clear();
    // member
    int	id;
    int	state;
    int	pet_id;
} FORMATION_LOCK_INFO;
typedef struct tagPET_FORMATION_UPGRADE
{
    // construct
    tagPET_FORMATION_UPGRADE();
    // operator =
    tagPET_FORMATION_UPGRADE& operator=(const tagPET_FORMATION_UPGRADE& c);
    // Clear
    void Clear();
    // member
    int	formation_id;
    int	upgrade_type;
} PET_FORMATION_UPGRADE;
typedef struct tagPET_FORMATION_CHANGE
{
    // construct
    tagPET_FORMATION_CHANGE();
    // operator =
    tagPET_FORMATION_CHANGE& operator=(const tagPET_FORMATION_CHANGE& c);
    // Clear
    void Clear();
    // member
    int	pet_id;
    int	formation_id;
    int	change_type;
} PET_FORMATION_CHANGE;
typedef struct tagPET_FORMATION_LOCK
{
    // construct
    tagPET_FORMATION_LOCK();
    // operator =
    tagPET_FORMATION_LOCK& operator=(const tagPET_FORMATION_LOCK& c);
    // Clear
    void Clear();
    // member
    int	id;
    int	lock_id;
} PET_FORMATION_LOCK;
typedef struct tagPET_FORMATION_LOCK_ACK
{
    // construct
    tagPET_FORMATION_LOCK_ACK();
    // operator =
    tagPET_FORMATION_LOCK_ACK& operator=(const tagPET_FORMATION_LOCK_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	error_code;
    unsigned short	formation_id;
    FORMATION_LOCK_INFO	lock_info;
} PET_FORMATION_LOCK_ACK;
typedef struct tagASHURA_INFO
{
    // construct
    tagASHURA_INFO();
    // operator =
    tagASHURA_INFO& operator=(const tagASHURA_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	refresh_time;
    unsigned char	delay_count;
    unsigned int	kill_count;
    unsigned int	dead_count;
    int	all_kill_count;
} ASHURA_INFO;
typedef struct tagASHURA_BATTLE_ACK
{
    // construct
    tagASHURA_BATTLE_ACK();
    // operator =
    tagASHURA_BATTLE_ACK& operator=(const tagASHURA_BATTLE_ACK& c);
    // Clear
    void Clear();
    // member
    std::string	attacker;
    std::string	deader;
} ASHURA_BATTLE_ACK;
typedef struct tagASHURA_GET_AWARD_REQ
{
    // construct
    tagASHURA_GET_AWARD_REQ();
    // operator =
    tagASHURA_GET_AWARD_REQ& operator=(const tagASHURA_GET_AWARD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	value;
} ASHURA_GET_AWARD_REQ;
typedef struct tagASHURA_END_ACK
{
    // construct
    tagASHURA_END_ACK();
    // operator =
    tagASHURA_END_ACK& operator=(const tagASHURA_END_ACK& c);
    // Clear
    void Clear();
    // member
    REWARD_TABLE	reward_table;
} ASHURA_END_ACK;
typedef struct tagASHURA_MARQUEE_NTF
{
    // construct
    tagASHURA_MARQUEE_NTF();
    // operator =
    tagASHURA_MARQUEE_NTF& operator=(const tagASHURA_MARQUEE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    std::string	player_name;
    REWARD_TABLE	reward_table;
} ASHURA_MARQUEE_NTF;
typedef struct tagASHURA_RANK_INFO
{
    // construct
    tagASHURA_RANK_INFO();
    // operator =
    tagASHURA_RANK_INFO& operator=(const tagASHURA_RANK_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank;
    std::string	name;
    unsigned int	num;
} ASHURA_RANK_INFO;
typedef struct tagASHURA_RANK_ACK
{
    // construct
    tagASHURA_RANK_ACK();
    // operator =
    tagASHURA_RANK_ACK& operator=(const tagASHURA_RANK_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	my_kill_rank;
    unsigned int	my_dead_rank;
    std::vector<ASHURA_RANK_INFO>	kill_rank_list;
    std::vector<ASHURA_RANK_INFO>	dead_rank_list;
} ASHURA_RANK_ACK;
typedef struct tagASHURA_START_NTF
{
    // construct
    tagASHURA_START_NTF();
    // operator =
    tagASHURA_START_NTF& operator=(const tagASHURA_START_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	current_time;
} ASHURA_START_NTF;
typedef struct tagASHURA_END_NTF
{
    // construct
    tagASHURA_END_NTF();
    // operator =
    tagASHURA_END_NTF& operator=(const tagASHURA_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	value;
} ASHURA_END_NTF;
typedef struct tagACHIVE_INFO
{
    // construct
    tagACHIVE_INFO();
    // operator =
    tagACHIVE_INFO& operator=(const tagACHIVE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	reason_arg;
    int	num;
    unsigned char	b_get;
    unsigned char	b_finsh;
    int	type;
} ACHIVE_INFO;
typedef struct tagACHIVE_LIST
{
    // construct
    tagACHIVE_LIST();
    // operator =
    tagACHIVE_LIST& operator=(const tagACHIVE_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<ACHIVE_INFO>	achive_list;
} ACHIVE_LIST;
typedef struct tagACHIVE_STATE_LIST
{
    // construct
    tagACHIVE_STATE_LIST();
    // operator =
    tagACHIVE_STATE_LIST& operator=(const tagACHIVE_STATE_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<ACHIVE_INFO>	achive_list;
} ACHIVE_STATE_LIST;
typedef struct tagTITLE_INFO
{
    // construct
    tagTITLE_INFO();
    // operator =
    tagTITLE_INFO& operator=(const tagTITLE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	titlid;
    unsigned char	b_state;
    unsigned int	time;
    unsigned int	starttime;
    int	num;
} TITLE_INFO;
typedef struct tagTITLE_LIST
{
    // construct
    tagTITLE_LIST();
    // operator =
    tagTITLE_LIST& operator=(const tagTITLE_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<TITLE_INFO>	list;
} TITLE_LIST;
typedef struct tagTITLE_STATE_LIST
{
    // construct
    tagTITLE_STATE_LIST();
    // operator =
    tagTITLE_STATE_LIST& operator=(const tagTITLE_STATE_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<TITLE_INFO>	list;
} TITLE_STATE_LIST;
typedef struct tagPLAYER_TITLE_LIST
{
    // construct
    tagPLAYER_TITLE_LIST();
    // operator =
    tagPLAYER_TITLE_LIST& operator=(const tagPLAYER_TITLE_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_object_id;
    std::vector<TITLE_INFO>	list;
} PLAYER_TITLE_LIST;
typedef struct tagEQUIP_TITLE
{
    // construct
    tagEQUIP_TITLE();
    // operator =
    tagEQUIP_TITLE& operator=(const tagEQUIP_TITLE& c);
    // Clear
    void Clear();
    // member
    unsigned int	title_id;
    unsigned char	b_have;
} EQUIP_TITLE;
typedef struct tagFASHION_INFO
{
    // construct
    tagFASHION_INFO();
    // operator =
    tagFASHION_INFO& operator=(const tagFASHION_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	fashion_id;
    unsigned int	fashion_level;
} FASHION_INFO;
typedef struct tagFASHION_LIST
{
    // construct
    tagFASHION_LIST();
    // operator =
    tagFASHION_LIST& operator=(const tagFASHION_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    unsigned char	fashion_type;
    std::vector<FASHION_INFO>	fashion_list;
    std::vector<unsigned int>	skill_list;
} FASHION_LIST;
typedef struct tagSET_FASHION_REQ
{
    // construct
    tagSET_FASHION_REQ();
    // operator =
    tagSET_FASHION_REQ& operator=(const tagSET_FASHION_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	fashion_type;
    unsigned int	fashion_id;
} SET_FASHION_REQ;
typedef struct tagSET_FASHION_ACK
{
    // construct
    tagSET_FASHION_ACK();
    // operator =
    tagSET_FASHION_ACK& operator=(const tagSET_FASHION_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	fashion_type;
    unsigned int	fashion_id;
} SET_FASHION_ACK;
typedef struct tagFASHION_COMPOSE_REQ
{
    // construct
    tagFASHION_COMPOSE_REQ();
    // operator =
    tagFASHION_COMPOSE_REQ& operator=(const tagFASHION_COMPOSE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
} FASHION_COMPOSE_REQ;
typedef struct tagFASHION_COMPOSE_ACK
{
    // construct
    tagFASHION_COMPOSE_ACK();
    // operator =
    tagFASHION_COMPOSE_ACK& operator=(const tagFASHION_COMPOSE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	fashion_id;
} FASHION_COMPOSE_ACK;
typedef struct tagFASHION_ACTIVATE_REQ
{
    // construct
    tagFASHION_ACTIVATE_REQ();
    // operator =
    tagFASHION_ACTIVATE_REQ& operator=(const tagFASHION_ACTIVATE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	fashion_id;
} FASHION_ACTIVATE_REQ;
typedef struct tagFASHION_GET_TREASURE_REQ
{
    // construct
    tagFASHION_GET_TREASURE_REQ();
    // operator =
    tagFASHION_GET_TREASURE_REQ& operator=(const tagFASHION_GET_TREASURE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	type;
} FASHION_GET_TREASURE_REQ;
typedef struct tagFASHION_GET_TREASURE_ACK
{
    // construct
    tagFASHION_GET_TREASURE_ACK();
    // operator =
    tagFASHION_GET_TREASURE_ACK& operator=(const tagFASHION_GET_TREASURE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	type;
    unsigned int	last_finish_time;
    std::vector<REWARD_ITEM>	item_list;
} FASHION_GET_TREASURE_ACK;
typedef struct tagFASHION_TREASURE_CONFIG
{
    // construct
    tagFASHION_TREASURE_CONFIG();
    // operator =
    tagFASHION_TREASURE_CONFIG& operator=(const tagFASHION_TREASURE_CONFIG& c);
    // Clear
    void Clear();
    // member
    unsigned int	probability_s;
    unsigned int	probability_e;
    REWARD_ITEM	item;
} FASHION_TREASURE_CONFIG;
typedef struct tagFASHION_SMELT_ACK
{
    // construct
    tagFASHION_SMELT_ACK();
    // operator =
    tagFASHION_SMELT_ACK& operator=(const tagFASHION_SMELT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned short	type;
} FASHION_SMELT_ACK;
typedef struct tagFASHION_SMELT_ITEM
{
    // construct
    tagFASHION_SMELT_ITEM();
    // operator =
    tagFASHION_SMELT_ITEM& operator=(const tagFASHION_SMELT_ITEM& c);
    // Clear
    void Clear();
    // member
    unsigned short	item_id;
    unsigned short	item_pos;
    unsigned short	item_num;
} FASHION_SMELT_ITEM;
typedef struct tagINCARNATION_BUY_REQ
{
    // construct
    tagINCARNATION_BUY_REQ();
    // operator =
    tagINCARNATION_BUY_REQ& operator=(const tagINCARNATION_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	item_id;
    unsigned int	item_num;
} INCARNATION_BUY_REQ;
typedef struct tagTEASER_FASHION_NTF
{
    // construct
    tagTEASER_FASHION_NTF();
    // operator =
    tagTEASER_FASHION_NTF& operator=(const tagTEASER_FASHION_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	fashion_id;
    unsigned char	is_use;
} TEASER_FASHION_NTF;
typedef struct tagTREASURE_PACKAGE_ITEM
{
    // construct
    tagTREASURE_PACKAGE_ITEM();
    // operator =
    tagTREASURE_PACKAGE_ITEM& operator=(const tagTREASURE_PACKAGE_ITEM& c);
    // Clear
    void Clear();
    // member
    unsigned short	count_max;
    unsigned short	count_min;
    unsigned short	extract;
    unsigned short	item_id;
    unsigned int	item_probability;
    unsigned short	notice;
    unsigned int	per_cd;
    unsigned int	ser_cd;
    unsigned int	all_probability;
    unsigned short	times;
    unsigned short	wrap;
} TREASURE_PACKAGE_ITEM;
typedef struct tagPOTION_INFO
{
    // construct
    tagPOTION_INFO();
    // operator =
    tagPOTION_INFO& operator=(const tagPOTION_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	potion1_id;
    unsigned int	potion2_id;
    unsigned int	potion3_id;
} POTION_INFO;
typedef struct tagPOTION_USE
{
    // construct
    tagPOTION_USE();
    // operator =
    tagPOTION_USE& operator=(const tagPOTION_USE& c);
    // Clear
    void Clear();
    // member
    unsigned char	potion_slot;
} POTION_USE;
typedef struct tagPACKAGE_COUNT_INFO
{
    // construct
    tagPACKAGE_COUNT_INFO();
    // operator =
    tagPACKAGE_COUNT_INFO& operator=(const tagPACKAGE_COUNT_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	package_id;
    unsigned int	package_count;
} PACKAGE_COUNT_INFO;
typedef struct tagPACKAGE_TIME_INFO
{
    // construct
    tagPACKAGE_TIME_INFO();
    // operator =
    tagPACKAGE_TIME_INFO& operator=(const tagPACKAGE_TIME_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	package_id;
    unsigned int	item_id;
    unsigned int	item_time;
} PACKAGE_TIME_INFO;
typedef struct tagRANDOM_PACKAGE_CARD_RECORD
{
    // construct
    tagRANDOM_PACKAGE_CARD_RECORD();
    // operator =
    tagRANDOM_PACKAGE_CARD_RECORD& operator=(const tagRANDOM_PACKAGE_CARD_RECORD& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	timestamp;
} RANDOM_PACKAGE_CARD_RECORD;
typedef struct tagRANDOM_PACKAGE_RECORD
{
    // construct
    tagRANDOM_PACKAGE_RECORD();
    // operator =
    tagRANDOM_PACKAGE_RECORD& operator=(const tagRANDOM_PACKAGE_RECORD& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	times;
    std::vector<RANDOM_PACKAGE_CARD_RECORD>	records;
} RANDOM_PACKAGE_RECORD;
typedef struct tagRANDOM_PACKAGE_RECORD_INFO
{
    // construct
    tagRANDOM_PACKAGE_RECORD_INFO();
    // operator =
    tagRANDOM_PACKAGE_RECORD_INFO& operator=(const tagRANDOM_PACKAGE_RECORD_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<RANDOM_PACKAGE_RECORD>	records;
} RANDOM_PACKAGE_RECORD_INFO;
typedef struct tagRIDE_QUALITY_INFO
{
    // construct
    tagRIDE_QUALITY_INFO();
    // operator =
    tagRIDE_QUALITY_INFO& operator=(const tagRIDE_QUALITY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    unsigned int	id;
    int	num;
} RIDE_QUALITY_INFO;
typedef struct tagRIDE_INFO
{
    // construct
    tagRIDE_INFO();
    // operator =
    tagRIDE_INFO& operator=(const tagRIDE_INFO& c);
    // Clear
    void Clear();
    // member
    int	ride_battle_power;
    unsigned int	ride_id;
    std::vector<RIDE_PET_INFO>	ride_pet_list;
    std::vector<RIDE_PET_INFO>	ride_random_list;
    std::vector<REWARD_ITEM>	object_random_list;
    int	filed_num;
    unsigned char	b_free;
    unsigned int	time;
    int	critnum;
    std::vector<RIDE_MARKT>	mark_list;
    std::vector<RIDE_ALTAS>	ride_altas_list;
    std::vector<RIDE_TRAIN>	ride_train_list;
    std::vector<RIDE_QUALITY_INFO>	ride_quality_list;
} RIDE_INFO;
typedef struct tagFOLLOW_PET_SKILL
{
    // construct
    tagFOLLOW_PET_SKILL();
    // operator =
    tagFOLLOW_PET_SKILL& operator=(const tagFOLLOW_PET_SKILL& c);
    // Clear
    void Clear();
    // member
    unsigned int	skillid;
} FOLLOW_PET_SKILL;
typedef struct tagITEM_BASE
{
    // construct
    tagITEM_BASE();
    // operator =
    tagITEM_BASE& operator=(const tagITEM_BASE& c);
    // Clear
    void Clear();
    // member
    unsigned char	place;
    int	pos;
    unsigned int	id;
    unsigned char	quality;
    int	num;
} ITEM_BASE;
typedef struct tagITEM_CONSUME
{
    // construct
    tagITEM_CONSUME();
    // operator =
    tagITEM_CONSUME& operator=(const tagITEM_CONSUME& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	base;
} ITEM_CONSUME;
typedef struct tagITEM_MATERIAL
{
    // construct
    tagITEM_MATERIAL();
    // operator =
    tagITEM_MATERIAL& operator=(const tagITEM_MATERIAL& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	base;
} ITEM_MATERIAL;
typedef struct tagITEM_STONE
{
    // construct
    tagITEM_STONE();
    // operator =
    tagITEM_STONE& operator=(const tagITEM_STONE& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	base;
    unsigned short	level;
    unsigned int	exp;
} ITEM_STONE;
typedef struct tagTRIPLE_VALUE
{
    // construct
    tagTRIPLE_VALUE();
    // operator =
    tagTRIPLE_VALUE& operator=(const tagTRIPLE_VALUE& c);
    // Clear
    void Clear();
    // member
    unsigned short	type;
    unsigned short	key;
    int	value;
} TRIPLE_VALUE;
typedef struct tagCONSUME_CD_INFO
{
    // construct
    tagCONSUME_CD_INFO();
    // operator =
    tagCONSUME_CD_INFO& operator=(const tagCONSUME_CD_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<TRIPLE_VALUE>	list;
} CONSUME_CD_INFO;
typedef struct tagSKILL_STRENGTHEN_STONE
{
    // construct
    tagSKILL_STRENGTHEN_STONE();
    // operator =
    tagSKILL_STRENGTHEN_STONE& operator=(const tagSKILL_STRENGTHEN_STONE& c);
    // Clear
    void Clear();
    // member
    ITEM_STONE	main;
    std::vector<ITEM_STONE>	stone_list;
} SKILL_STRENGTHEN_STONE;
typedef struct tagOPT_ITEM_INFO
{
    // construct
    tagOPT_ITEM_INFO();
    // operator =
    tagOPT_ITEM_INFO& operator=(const tagOPT_ITEM_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt;
    ITEM_BASE	src;
    ITEM_BASE	dst;
} OPT_ITEM_INFO;
typedef struct tagGEM_SOCKET_REQ
{
    // construct
    tagGEM_SOCKET_REQ();
    // operator =
    tagGEM_SOCKET_REQ& operator=(const tagGEM_SOCKET_REQ& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	equip;
    std::vector<ITEM_BASE>	gems;
} GEM_SOCKET_REQ;
typedef struct tagGEM_UNSOCKET_REQ
{
    // construct
    tagGEM_UNSOCKET_REQ();
    // operator =
    tagGEM_UNSOCKET_REQ& operator=(const tagGEM_UNSOCKET_REQ& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	equip;
} GEM_UNSOCKET_REQ;
typedef struct tagGEM_FUSE_REQ
{
    // construct
    tagGEM_FUSE_REQ();
    // operator =
    tagGEM_FUSE_REQ& operator=(const tagGEM_FUSE_REQ& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	gem;
    unsigned char	parentPlace;
    int	parentPos;
    std::vector<ITEM_BASE>	gems;
} GEM_FUSE_REQ;
typedef struct tagGEM_EVOLUTE_REQ
{
    // construct
    tagGEM_EVOLUTE_REQ();
    // operator =
    tagGEM_EVOLUTE_REQ& operator=(const tagGEM_EVOLUTE_REQ& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	equip;
    std::vector<unsigned short>	lock_index;
} GEM_EVOLUTE_REQ;
typedef struct tagGEM_ADD_HOLE_REQ
{
    // construct
    tagGEM_ADD_HOLE_REQ();
    // operator =
    tagGEM_ADD_HOLE_REQ& operator=(const tagGEM_ADD_HOLE_REQ& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	equip;
} GEM_ADD_HOLE_REQ;
typedef struct tagSYNTHETIZE_JEWEL_REQ
{
    // construct
    tagSYNTHETIZE_JEWEL_REQ();
    // operator =
    tagSYNTHETIZE_JEWEL_REQ& operator=(const tagSYNTHETIZE_JEWEL_REQ& c);
    // Clear
    void Clear();
    // member
    int	num;
    int	item_id;
    unsigned char	auto_buy;
} SYNTHETIZE_JEWEL_REQ;
typedef struct tagSYNTHETIZE_JEWEL_ACK
{
    // construct
    tagSYNTHETIZE_JEWEL_ACK();
    // operator =
    tagSYNTHETIZE_JEWEL_ACK& operator=(const tagSYNTHETIZE_JEWEL_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} SYNTHETIZE_JEWEL_ACK;
typedef struct tagUPGRADE_JEWEL_REQ
{
    // construct
    tagUPGRADE_JEWEL_REQ();
    // operator =
    tagUPGRADE_JEWEL_REQ& operator=(const tagUPGRADE_JEWEL_REQ& c);
    // Clear
    void Clear();
    // member
    int	equip_type;
    int	jewel_pos;
} UPGRADE_JEWEL_REQ;
typedef struct tagUPGRADE_JEWEL_ACK
{
    // construct
    tagUPGRADE_JEWEL_ACK();
    // operator =
    tagUPGRADE_JEWEL_ACK& operator=(const tagUPGRADE_JEWEL_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} UPGRADE_JEWEL_ACK;
typedef struct tagTASK_CONDITION
{
    // construct
    tagTASK_CONDITION();
    // operator =
    tagTASK_CONDITION& operator=(const tagTASK_CONDITION& c);
    // Clear
    void Clear();
    // member
    unsigned int	type;
    unsigned int	value;
} TASK_CONDITION;
typedef struct tagTASK_TARGET
{
    // construct
    tagTASK_TARGET();
    // operator =
    tagTASK_TARGET& operator=(const tagTASK_TARGET& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	type;
    unsigned int	value;
    unsigned int	num;
    unsigned int	npc_id;
    unsigned int	map_id;
    unsigned int	item_id;
    int	rate;
} TASK_TARGET;
typedef struct tagTASK_TEMPLATE
{
    // construct
    tagTASK_TEMPLATE();
    // operator =
    tagTASK_TEMPLATE& operator=(const tagTASK_TEMPLATE& c);
    // Clear
    void Clear();
    // member
    unsigned int	task_id;
    unsigned char	task_type;
    unsigned char	sub_type;
    std::string	name;
    std::string	desc;
    std::string	icon;
    unsigned int	festival_id;
    int	loop_num;
    unsigned int	take_npc_id;
    unsigned int	cmpl_npc_id;
    unsigned char	raids;
    std::vector<TASK_CONDITION>	pre_conditions;
    std::vector<TASK_TARGET>	targets;
    REWARD_TABLE	gives;
    REWARD_TABLE	rewards;
    REWARD_TABLE	warrior_reward;
    REWARD_TABLE	mage_reward;
    REWARD_TABLE	archer_reward;
} TASK_TEMPLATE;
typedef struct tagTASK_FESTIVAL_TEMPLATE
{
    // construct
    tagTASK_FESTIVAL_TEMPLATE();
    // operator =
    tagTASK_FESTIVAL_TEMPLATE& operator=(const tagTASK_FESTIVAL_TEMPLATE& c);
    // Clear
    void Clear();
    // member
    unsigned int	festival_id;
    unsigned char	type;
    unsigned char	show_pos;
    unsigned char	state;
    std::string	name;
    std::string	desc;
    unsigned int	loop_hours;
    unsigned char	sort;
    unsigned int	begin_time;
    unsigned int	end_time;
    unsigned int	trigger_time;
    unsigned char	tag;
    int	minLevel;
    int	maxLevel;
    std::vector<TASK_TEMPLATE>	tasks;
    REWARD_TABLE	rewards;
} TASK_FESTIVAL_TEMPLATE;
typedef struct tagTASK_FESTIVAL_TEMPLATE_LIST
{
    // construct
    tagTASK_FESTIVAL_TEMPLATE_LIST();
    // operator =
    tagTASK_FESTIVAL_TEMPLATE_LIST& operator=(const tagTASK_FESTIVAL_TEMPLATE_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<TASK_FESTIVAL_TEMPLATE>	list;
} TASK_FESTIVAL_TEMPLATE_LIST;
typedef struct tagTASK_TARGET_RECORD
{
    // construct
    tagTASK_TARGET_RECORD();
    // operator =
    tagTASK_TARGET_RECORD& operator=(const tagTASK_TARGET_RECORD& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    int	num;
    int	max_num;
} TASK_TARGET_RECORD;
typedef struct tagTASK_DAILY_INFO
{
    // construct
    tagTASK_DAILY_INFO();
    // operator =
    tagTASK_DAILY_INFO& operator=(const tagTASK_DAILY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	daily_task_flash_time;
    unsigned int	daily_task_count;
    unsigned char	daily_task_reset_count;
} TASK_DAILY_INFO;
typedef struct tagTASK_CRUSADE_INFO
{
    // construct
    tagTASK_CRUSADE_INFO();
    // operator =
    tagTASK_CRUSADE_INFO& operator=(const tagTASK_CRUSADE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	crusade_task_flash_time;
    unsigned int	crusade_task_count;
} TASK_CRUSADE_INFO;
typedef struct tagTASK_GUARD_INFO
{
    // construct
    tagTASK_GUARD_INFO();
    // operator =
    tagTASK_GUARD_INFO& operator=(const tagTASK_GUARD_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	guard_task_count;
    unsigned char	guard_buy_count;
    unsigned int	guard_buy_day_count;
    unsigned char	guard_refresh_count;
} TASK_GUARD_INFO;
typedef struct tagTASK_GUILD_INFO
{
    // construct
    tagTASK_GUILD_INFO();
    // operator =
    tagTASK_GUILD_INFO& operator=(const tagTASK_GUILD_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	guild_task_count;
    unsigned int	guild_sroces;
    std::vector<int>	open_box_list;
} TASK_GUILD_INFO;
typedef struct tagTASK_ACHIVE_INFO
{
    // construct
    tagTASK_ACHIVE_INFO();
    // operator =
    tagTASK_ACHIVE_INFO& operator=(const tagTASK_ACHIVE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	crusade_task_flash_time;
    unsigned int	crusade_task_count;
} TASK_ACHIVE_INFO;
typedef struct tagFESTIVAL_RECORD
{
    // construct
    tagFESTIVAL_RECORD();
    // operator =
    tagFESTIVAL_RECORD& operator=(const tagFESTIVAL_RECORD& c);
    // Clear
    void Clear();
    // member
    unsigned int	festival_id;
    unsigned int	state;
} FESTIVAL_RECORD;
typedef struct tagTASK_RECORD
{
    // construct
    tagTASK_RECORD();
    // operator =
    tagTASK_RECORD& operator=(const tagTASK_RECORD& c);
    // Clear
    void Clear();
    // member
    unsigned int	task_id;
    unsigned char	state;
    unsigned char	quality;
    unsigned char	type;
    unsigned char	sub_type;
    unsigned int	position;
    unsigned short	rate_of_complete;
    int	loop_num;
    std::vector<TASK_TARGET_RECORD>	list;
} TASK_RECORD;
typedef struct tagTASK_UPDATE_INFO
{
    // construct
    tagTASK_UPDATE_INFO();
    // operator =
    tagTASK_UPDATE_INFO& operator=(const tagTASK_UPDATE_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<TASK_RECORD>	list;
} TASK_UPDATE_INFO;
typedef struct tagTASK_CHANGE_INFO
{
    // construct
    tagTASK_CHANGE_INFO();
    // operator =
    tagTASK_CHANGE_INFO& operator=(const tagTASK_CHANGE_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<unsigned int>	del_list;
    std::vector<TASK_RECORD>	add_list;
} TASK_CHANGE_INFO;
typedef struct tagTASK_GUILD_REFRESH_ACK
{
    // construct
    tagTASK_GUILD_REFRESH_ACK();
    // operator =
    tagTASK_GUILD_REFRESH_ACK& operator=(const tagTASK_GUILD_REFRESH_ACK& c);
    // Clear
    void Clear();
    // member
    TASK_GUILD_INFO	task_info;
    unsigned int	refresh_time;
} TASK_GUILD_REFRESH_ACK;
typedef struct tagTASK_REQ
{
    // construct
    tagTASK_REQ();
    // operator =
    tagTASK_REQ& operator=(const tagTASK_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	task_id;
} TASK_REQ;
typedef struct tagTAKE_TASK_REQ
{
    // construct
    tagTAKE_TASK_REQ();
    // operator =
    tagTAKE_TASK_REQ& operator=(const tagTAKE_TASK_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	task_id;
} TAKE_TASK_REQ;
typedef struct tagTASK_TALK_NPC
{
    // construct
    tagTASK_TALK_NPC();
    // operator =
    tagTASK_TALK_NPC& operator=(const tagTASK_TALK_NPC& c);
    // Clear
    void Clear();
    // member
    unsigned int	npc_id;
} TASK_TALK_NPC;
typedef struct tagTASK_CHANGE_DUNGEON_REQ
{
    // construct
    tagTASK_CHANGE_DUNGEON_REQ();
    // operator =
    tagTASK_CHANGE_DUNGEON_REQ& operator=(const tagTASK_CHANGE_DUNGEON_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	task_id;
} TASK_CHANGE_DUNGEON_REQ;
typedef struct tagTASK_REWARD_REQ
{
    // construct
    tagTASK_REWARD_REQ();
    // operator =
    tagTASK_REWARD_REQ& operator=(const tagTASK_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	task_id;
} TASK_REWARD_REQ;
typedef struct tagTASK_REWARD_ACK
{
    // construct
    tagTASK_REWARD_ACK();
    // operator =
    tagTASK_REWARD_ACK& operator=(const tagTASK_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	task_id;
} TASK_REWARD_ACK;
typedef struct tagTASK_QUALITY_REQ
{
    // construct
    tagTASK_QUALITY_REQ();
    // operator =
    tagTASK_QUALITY_REQ& operator=(const tagTASK_QUALITY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	task_id;
} TASK_QUALITY_REQ;
typedef struct tagTASK_COMPLETE_REQ
{
    // construct
    tagTASK_COMPLETE_REQ();
    // operator =
    tagTASK_COMPLETE_REQ& operator=(const tagTASK_COMPLETE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	task_id;
} TASK_COMPLETE_REQ;
typedef struct tagTASK_ITEM_ACK
{
    // construct
    tagTASK_ITEM_ACK();
    // operator =
    tagTASK_ITEM_ACK& operator=(const tagTASK_ITEM_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	item_id;
} TASK_ITEM_ACK;
typedef struct tagTASK_RECEIVE_BOX_REQ
{
    // construct
    tagTASK_RECEIVE_BOX_REQ();
    // operator =
    tagTASK_RECEIVE_BOX_REQ& operator=(const tagTASK_RECEIVE_BOX_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	box;
} TASK_RECEIVE_BOX_REQ;
typedef struct tagTASK_RECEIVE_BOX_ACK
{
    // construct
    tagTASK_RECEIVE_BOX_ACK();
    // operator =
    tagTASK_RECEIVE_BOX_ACK& operator=(const tagTASK_RECEIVE_BOX_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	box_id;
} TASK_RECEIVE_BOX_ACK;
typedef struct tagTASK_FESTIVAL_REWARD_REQ
{
    // construct
    tagTASK_FESTIVAL_REWARD_REQ();
    // operator =
    tagTASK_FESTIVAL_REWARD_REQ& operator=(const tagTASK_FESTIVAL_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	festival_id;
} TASK_FESTIVAL_REWARD_REQ;
typedef struct tagTASK_FESTIVAL_REWARD_ACK
{
    // construct
    tagTASK_FESTIVAL_REWARD_ACK();
    // operator =
    tagTASK_FESTIVAL_REWARD_ACK& operator=(const tagTASK_FESTIVAL_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    FESTIVAL_RECORD	festival_record;
} TASK_FESTIVAL_REWARD_ACK;
typedef struct tagNOTIFY_OBJ_FLAG
{
    // construct
    tagNOTIFY_OBJ_FLAG();
    // operator =
    tagNOTIFY_OBJ_FLAG& operator=(const tagNOTIFY_OBJ_FLAG& c);
    // Clear
    void Clear();
    // member
    unsigned int	obj_id;
    unsigned char	flag;
} NOTIFY_OBJ_FLAG;
typedef struct tagNOTIFY_OBJ_FLAG_LIST
{
    // construct
    tagNOTIFY_OBJ_FLAG_LIST();
    // operator =
    tagNOTIFY_OBJ_FLAG_LIST& operator=(const tagNOTIFY_OBJ_FLAG_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<NOTIFY_OBJ_FLAG>	list;
} NOTIFY_OBJ_FLAG_LIST;
typedef struct tagDAILY_RESET_ACK
{
    // construct
    tagDAILY_RESET_ACK();
    // operator =
    tagDAILY_RESET_ACK& operator=(const tagDAILY_RESET_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
} DAILY_RESET_ACK;
typedef struct tagTASK_GUARD_BUY_ACK
{
    // construct
    tagTASK_GUARD_BUY_ACK();
    // operator =
    tagTASK_GUARD_BUY_ACK& operator=(const tagTASK_GUARD_BUY_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
} TASK_GUARD_BUY_ACK;
typedef struct tagTASK_GUILD_RESET_ACK
{
    // construct
    tagTASK_GUILD_RESET_ACK();
    // operator =
    tagTASK_GUILD_RESET_ACK& operator=(const tagTASK_GUILD_RESET_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
} TASK_GUILD_RESET_ACK;
typedef struct tagTASK_GUILD_BOX_REWARD_REQ
{
    // construct
    tagTASK_GUILD_BOX_REWARD_REQ();
    // operator =
    tagTASK_GUILD_BOX_REWARD_REQ& operator=(const tagTASK_GUILD_BOX_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	score;
} TASK_GUILD_BOX_REWARD_REQ;
typedef struct tagGUIDE_INFO
{
    // construct
    tagGUIDE_INFO();
    // operator =
    tagGUIDE_INFO& operator=(const tagGUIDE_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<unsigned int>	guide_data;
} GUIDE_INFO;
typedef struct tagOPEN_SYSTEM_INFO
{
    // construct
    tagOPEN_SYSTEM_INFO();
    // operator =
    tagOPEN_SYSTEM_INFO& operator=(const tagOPEN_SYSTEM_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<unsigned int>	open_system_data;
} OPEN_SYSTEM_INFO;
typedef struct tagTRIGGER_ACTIVATE_REQ
{
    // construct
    tagTRIGGER_ACTIVATE_REQ();
    // operator =
    tagTRIGGER_ACTIVATE_REQ& operator=(const tagTRIGGER_ACTIVATE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	trigger_id;
    unsigned int	fun_code;
} TRIGGER_ACTIVATE_REQ;
typedef struct tagTRIGGER_ACTIVATE_ACK
{
    // construct
    tagTRIGGER_ACTIVATE_ACK();
    // operator =
    tagTRIGGER_ACTIVATE_ACK& operator=(const tagTRIGGER_ACTIVATE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	trigger_id;
    unsigned int	fun_code;
    unsigned int	dungeon_id;
} TRIGGER_ACTIVATE_ACK;
typedef struct tagTRIGGER_STATE_NTF
{
    // construct
    tagTRIGGER_STATE_NTF();
    // operator =
    tagTRIGGER_STATE_NTF& operator=(const tagTRIGGER_STATE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    unsigned int	trigger_id;
    unsigned char	enable;
    unsigned char	triggered;
} TRIGGER_STATE_NTF;
typedef struct tagREWARD_POOL_CLEAR_REQ
{
    // construct
    tagREWARD_POOL_CLEAR_REQ();
    // operator =
    tagREWARD_POOL_CLEAR_REQ& operator=(const tagREWARD_POOL_CLEAR_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
} REWARD_POOL_CLEAR_REQ;
typedef struct tagANSWER_INFO
{
    // construct
    tagANSWER_INFO();
    // operator =
    tagANSWER_INFO& operator=(const tagANSWER_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	answer_version;
    unsigned int	reward_version;
    unsigned int	question_id;
    unsigned int	result_id;
    int	add_score;
    int	score;
    int	continuation;
    unsigned char	use_double_flag;
    int	buy_double_num;
    int	sys_double_num;
} ANSWER_INFO;
typedef struct tagSINGLE_ANSWER_INFO
{
    // construct
    tagSINGLE_ANSWER_INFO();
    // operator =
    tagSINGLE_ANSWER_INFO& operator=(const tagSINGLE_ANSWER_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	into_answer;
    int	num;
    int	change_num;
    unsigned int	cd_start_time;
} SINGLE_ANSWER_INFO;
typedef struct tagSINGLE_ANSWER_INI_ACK
{
    // construct
    tagSINGLE_ANSWER_INI_ACK();
    // operator =
    tagSINGLE_ANSWER_INI_ACK& operator=(const tagSINGLE_ANSWER_INI_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	cdtime;
    unsigned int	num;
} SINGLE_ANSWER_INI_ACK;
typedef struct tagSINGLE_ANSWER_CD_TIME_ACK
{
    // construct
    tagSINGLE_ANSWER_CD_TIME_ACK();
    // operator =
    tagSINGLE_ANSWER_CD_TIME_ACK& operator=(const tagSINGLE_ANSWER_CD_TIME_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	cdtime;
    unsigned short	errcode;
} SINGLE_ANSWER_CD_TIME_ACK;
typedef struct tagFCM_INFO
{
    // construct
    tagFCM_INFO();
    // operator =
    tagFCM_INFO& operator=(const tagFCM_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	fcm_flag;
    int	fcm_gain_rate;
    unsigned int	ingame_time;
    unsigned int	outgame_time;
    unsigned int	total_ingame_time;
    unsigned int	total_outgame_time;
} FCM_INFO;
typedef struct tagZOMBIE_INFO
{
    // construct
    tagZOMBIE_INFO();
    // operator =
    tagZOMBIE_INFO& operator=(const tagZOMBIE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	enter_count;
    unsigned int	cumulative_total_time;
    std::vector<unsigned int>	finish_zombie_dungeons;
} ZOMBIE_INFO;
typedef struct tagGIFT_CODE_INFO
{
    // construct
    tagGIFT_CODE_INFO();
    // operator =
    tagGIFT_CODE_INFO& operator=(const tagGIFT_CODE_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<char>	use_info;
} GIFT_CODE_INFO;
typedef struct tagBUFF_FUNC
{
    // construct
    tagBUFF_FUNC();
    // operator =
    tagBUFF_FUNC& operator=(const tagBUFF_FUNC& c);
    // Clear
    void Clear();
    // member
    int	buff_func_type;
    int	arg1;
    int	arg2;
    int	buff_val_index;
} BUFF_FUNC;
typedef struct tagOFFLINE_EQUIP_INFO
{
    // construct
    tagOFFLINE_EQUIP_INFO();
    // operator =
    tagOFFLINE_EQUIP_INFO& operator=(const tagOFFLINE_EQUIP_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	appear_id;
    unsigned char	star;
    int	level;
    unsigned char	quality;
    unsigned int	enchant1;
    unsigned int	enchant2;
    unsigned int	enchant3;
    unsigned int	cur_slot;
    unsigned int	max_slot;
    unsigned int	jewel1;
    unsigned int	jewel2;
    unsigned int	jewel3;
    unsigned int	jewel4;
} OFFLINE_EQUIP_INFO;
typedef struct tagOFFLINE_PLAYER_REQ
{
    // construct
    tagOFFLINE_PLAYER_REQ();
    // operator =
    tagOFFLINE_PLAYER_REQ& operator=(const tagOFFLINE_PLAYER_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_h;
    unsigned int	player_id_l;
    std::string	name;
    unsigned char	reason;
} OFFLINE_PLAYER_REQ;
typedef struct tagBATTLE_POWER_INFO
{
    // construct
    tagBATTLE_POWER_INFO();
    // operator =
    tagBATTLE_POWER_INFO& operator=(const tagBATTLE_POWER_INFO& c);
    // Clear
    void Clear();
    // member
    int	total;
    int	base_prop;
    int	equip;
    int	skill;
    int	horoscope;
    int	jewel;
    int	fashion;
    int	title;
    int	pet_base_prop;
    int	pro_soul;
    int	ride_mark;
    int	ride_altas;
    int	wing_base_prop;
    int	wing_altas;
    int	sword;
    int	braveheart;
} BATTLE_POWER_INFO;
typedef struct tagOFFLINE_PLAYER_INFO
{
    // construct
    tagOFFLINE_PLAYER_INFO();
    // operator =
    tagOFFLINE_PLAYER_INFO& operator=(const tagOFFLINE_PLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    int	vip;
    std::string	name;
    char	sex;
    char	career;
    unsigned int	level;
    unsigned int	exp;
    unsigned int	max_exp;
    std::string	guild_name;
    int	battle_power;
    unsigned short	wing;
    int	score;
    int	achive_count;
    BATTLE_POWER_INFO	battle_power_info;
    std::vector<OFFLINE_EQUIP_INFO>	equip_list;
} OFFLINE_PLAYER_INFO;
typedef struct tagMONSTER_DOOR_INFO
{
    // construct
    tagMONSTER_DOOR_INFO();
    // operator =
    tagMONSTER_DOOR_INFO& operator=(const tagMONSTER_DOOR_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	battle_boss_flag;
    unsigned char	select_boss_index;
    unsigned char	battle_count;
    unsigned short	combat_count;
    unsigned int	combat_flag;
    unsigned int	combat_history_flag;
    unsigned short	reset_count;
    unsigned short	auto_index;
    unsigned int	auto_cd_timestamp;
    unsigned int	auto_cd_seconds;
} MONSTER_DOOR_INFO;
typedef struct tagMONSTER_DOOR_SELECT
{
    // construct
    tagMONSTER_DOOR_SELECT();
    // operator =
    tagMONSTER_DOOR_SELECT& operator=(const tagMONSTER_DOOR_SELECT& c);
    // Clear
    void Clear();
    // member
    unsigned char	select_boss_index;
} MONSTER_DOOR_SELECT;
typedef struct tagMONSTER_DOOR_RAID_ACK
{
    // construct
    tagMONSTER_DOOR_RAID_ACK();
    // operator =
    tagMONSTER_DOOR_RAID_ACK& operator=(const tagMONSTER_DOOR_RAID_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	combat_flag;
} MONSTER_DOOR_RAID_ACK;
typedef struct tagMONSTER_DOOR_AUTO_REQ
{
    // construct
    tagMONSTER_DOOR_AUTO_REQ();
    // operator =
    tagMONSTER_DOOR_AUTO_REQ& operator=(const tagMONSTER_DOOR_AUTO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	select_boss_index;
} MONSTER_DOOR_AUTO_REQ;
typedef struct tagMONSTER_DOOR_AUTO_ACK
{
    // construct
    tagMONSTER_DOOR_AUTO_ACK();
    // operator =
    tagMONSTER_DOOR_AUTO_ACK& operator=(const tagMONSTER_DOOR_AUTO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_ok;
    unsigned char	select_boss_index;
    unsigned int	cd_seconds;
} MONSTER_DOOR_AUTO_ACK;
typedef struct tagMONSTER_DOOR_KILL_CD_ACK
{
    // construct
    tagMONSTER_DOOR_KILL_CD_ACK();
    // operator =
    tagMONSTER_DOOR_KILL_CD_ACK& operator=(const tagMONSTER_DOOR_KILL_CD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_ok;
    unsigned int	combat_flag;
    unsigned short	money_point;
} MONSTER_DOOR_KILL_CD_ACK;
typedef struct tagMONSTER_DOOR_CD_OVER_ACK
{
    // construct
    tagMONSTER_DOOR_CD_OVER_ACK();
    // operator =
    tagMONSTER_DOOR_CD_OVER_ACK& operator=(const tagMONSTER_DOOR_CD_OVER_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_ok;
    unsigned int	combat_flag;
    unsigned char	select_boss_index;
    unsigned int	cd_seconds;
} MONSTER_DOOR_CD_OVER_ACK;
typedef struct tagMONSTER_DOOR_END
{
    // construct
    tagMONSTER_DOOR_END();
    // operator =
    tagMONSTER_DOOR_END& operator=(const tagMONSTER_DOOR_END& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_win;
    unsigned short	id;
    unsigned short	index;
    REWARD_TABLE	rewards;
} MONSTER_DOOR_END;
typedef struct tagPLAYER_DOOR_INFO_REQ
{
    // construct
    tagPLAYER_DOOR_INFO_REQ();
    // operator =
    tagPLAYER_DOOR_INFO_REQ& operator=(const tagPLAYER_DOOR_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    std::vector<BIGINT_ID>	playerList;
} PLAYER_DOOR_INFO_REQ;
typedef struct tagLIMIT_BUY
{
    // construct
    tagLIMIT_BUY();
    // operator =
    tagLIMIT_BUY& operator=(const tagLIMIT_BUY& c);
    // Clear
    void Clear();
    // member
    unsigned int	product_id;
    int	num;
    int	type;
} LIMIT_BUY;
typedef struct tagLIMIT_BUY_LIST
{
    // construct
    tagLIMIT_BUY_LIST();
    // operator =
    tagLIMIT_BUY_LIST& operator=(const tagLIMIT_BUY_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<LIMIT_BUY>	mall_buy_list;
    std::vector<LIMIT_BUY>	bind_money_list;
} LIMIT_BUY_LIST;
typedef struct tagLIMIT_BUY_INFO_ACK
{
    // construct
    tagLIMIT_BUY_INFO_ACK();
    // operator =
    tagLIMIT_BUY_INFO_ACK& operator=(const tagLIMIT_BUY_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	code;
    std::vector<LIMIT_BUY>	mall_buy_list;
    std::vector<LIMIT_BUY>	bind_money_list;
} LIMIT_BUY_INFO_ACK;
typedef struct tagOFFLINE_PLAYER_INFO_LIST
{
    // construct
    tagOFFLINE_PLAYER_INFO_LIST();
    // operator =
    tagOFFLINE_PLAYER_INFO_LIST& operator=(const tagOFFLINE_PLAYER_INFO_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<OFFLINE_PLAYER_INFO>	player_list;
} OFFLINE_PLAYER_INFO_LIST;
typedef struct tagPLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK
{
    // construct
    tagPLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK();
    // operator =
    tagPLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK& operator=(const tagPLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_ok;
    unsigned short	challenge_count;
} PLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK;
typedef struct tagPLAYER_DOOR_SELECT
{
    // construct
    tagPLAYER_DOOR_SELECT();
    // operator =
    tagPLAYER_DOOR_SELECT& operator=(const tagPLAYER_DOOR_SELECT& c);
    // Clear
    void Clear();
    // member
    unsigned short	select_player_rank;
} PLAYER_DOOR_SELECT;
typedef struct tagPLAYER_DOOR_END
{
    // construct
    tagPLAYER_DOOR_END();
    // operator =
    tagPLAYER_DOOR_END& operator=(const tagPLAYER_DOOR_END& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_win;
    unsigned short	rank;
    unsigned short	cur_rank;
    std::string	opponent_name;
    unsigned int	cur_ts;
    int	honor_point;
} PLAYER_DOOR_END;
typedef struct tagPLAYER_DOOR_REWARD_ACK
{
    // construct
    tagPLAYER_DOOR_REWARD_ACK();
    // operator =
    tagPLAYER_DOOR_REWARD_ACK& operator=(const tagPLAYER_DOOR_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_reward;
} PLAYER_DOOR_REWARD_ACK;
typedef struct tagPLAYER_DOOR_REWARD_INFO
{
    // construct
    tagPLAYER_DOOR_REWARD_INFO();
    // operator =
    tagPLAYER_DOOR_REWARD_INFO& operator=(const tagPLAYER_DOOR_REWARD_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	rewarded_today;
    unsigned int	reward_cd_seconds;
} PLAYER_DOOR_REWARD_INFO;
typedef struct tagPLAYER_DOOR_REPORT
{
    // construct
    tagPLAYER_DOOR_REPORT();
    // operator =
    tagPLAYER_DOOR_REPORT& operator=(const tagPLAYER_DOOR_REPORT& c);
    // Clear
    void Clear();
    // member
    unsigned short	report_type;
    std::string	challenger_name;
    unsigned char	is_win;
    unsigned int	cur_ts;
} PLAYER_DOOR_REPORT;
typedef struct tagPLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK
{
    // construct
    tagPLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK();
    // operator =
    tagPLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK& operator=(const tagPLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_ok;
    unsigned short	added_challenge_count;
} PLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK;
typedef struct tagPLAYER_DOOR_KILL_CD_ACK
{
    // construct
    tagPLAYER_DOOR_KILL_CD_ACK();
    // operator =
    tagPLAYER_DOOR_KILL_CD_ACK& operator=(const tagPLAYER_DOOR_KILL_CD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_ok;
    unsigned short	money_point;
} PLAYER_DOOR_KILL_CD_ACK;
typedef struct tagPLAYER_DOOR_CD_OVER_ACK
{
    // construct
    tagPLAYER_DOOR_CD_OVER_ACK();
    // operator =
    tagPLAYER_DOOR_CD_OVER_ACK& operator=(const tagPLAYER_DOOR_CD_OVER_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_ok;
} PLAYER_DOOR_CD_OVER_ACK;
typedef struct tagPLAYER_DOOR_REWARD_CD_OVER_ACK
{
    // construct
    tagPLAYER_DOOR_REWARD_CD_OVER_ACK();
    // operator =
    tagPLAYER_DOOR_REWARD_CD_OVER_ACK& operator=(const tagPLAYER_DOOR_REWARD_CD_OVER_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_ok;
} PLAYER_DOOR_REWARD_CD_OVER_ACK;
typedef struct tagMY_OLD_RANK
{
    // construct
    tagMY_OLD_RANK();
    // operator =
    tagMY_OLD_RANK& operator=(const tagMY_OLD_RANK& c);
    // Clear
    void Clear();
    // member
    int	old_rank;
} MY_OLD_RANK;
typedef struct tagBABEL_INFO
{
    // construct
    tagBABEL_INFO();
    // operator =
    tagBABEL_INFO& operator=(const tagBABEL_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	last_refresh_time;
    int	left_reset_times;
    int	babel_tier;
    int	babel_stage;
    int	pass_tier;
    int	pass_stage;
} BABEL_INFO;
typedef struct tagANSWER_SCORE_SAVE
{
    // construct
    tagANSWER_SCORE_SAVE();
    // operator =
    tagANSWER_SCORE_SAVE& operator=(const tagANSWER_SCORE_SAVE& c);
    // Clear
    void Clear();
    // member
    int	score;
} ANSWER_SCORE_SAVE;
typedef struct tagANSWER_GEN_RANK_NTF
{
    // construct
    tagANSWER_GEN_RANK_NTF();
    // operator =
    tagANSWER_GEN_RANK_NTF& operator=(const tagANSWER_GEN_RANK_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	isend;
} ANSWER_GEN_RANK_NTF;
typedef struct tagANSWER_END_NTF
{
    // construct
    tagANSWER_END_NTF();
    // operator =
    tagANSWER_END_NTF& operator=(const tagANSWER_END_NTF& c);
    // Clear
    void Clear();
    // member
    int	exp;
    int	game_point;
    int	soul_point;
} ANSWER_END_NTF;
typedef struct tagANSWER_READY_ACK
{
    // construct
    tagANSWER_READY_ACK();
    // operator =
    tagANSWER_READY_ACK& operator=(const tagANSWER_READY_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned int	activity_id;
    unsigned int	ready_time;
    unsigned int	left_time;
    int	score;
    unsigned char	use_double_flag;
    int	buy_double_num;
    int	sys_double_num;
} ANSWER_READY_ACK;
typedef struct tagANSWER_QUESTION_NTF
{
    // construct
    tagANSWER_QUESTION_NTF();
    // operator =
    tagANSWER_QUESTION_NTF& operator=(const tagANSWER_QUESTION_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	activity_id;
    unsigned int	question_sn;
    unsigned int	question_id;
    unsigned int	left_time;
} ANSWER_QUESTION_NTF;
typedef struct tagANSWER_QUESTION_CMF
{
    // construct
    tagANSWER_QUESTION_CMF();
    // operator =
    tagANSWER_QUESTION_CMF& operator=(const tagANSWER_QUESTION_CMF& c);
    // Clear
    void Clear();
    // member
    unsigned int	question_id;
    unsigned char	result;
} ANSWER_QUESTION_CMF;
typedef struct tagANSWER_RESULT_NTF
{
    // construct
    tagANSWER_RESULT_NTF();
    // operator =
    tagANSWER_RESULT_NTF& operator=(const tagANSWER_RESULT_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	question_id;
    unsigned int	result_id;
    int	score;
} ANSWER_RESULT_NTF;
typedef struct tagDOUBLE_SCORE_REQ
{
    // construct
    tagDOUBLE_SCORE_REQ();
    // operator =
    tagDOUBLE_SCORE_REQ& operator=(const tagDOUBLE_SCORE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	question_id;
} DOUBLE_SCORE_REQ;
typedef struct tagDOUBLE_SCORE_ACK
{
    // construct
    tagDOUBLE_SCORE_ACK();
    // operator =
    tagDOUBLE_SCORE_ACK& operator=(const tagDOUBLE_SCORE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned char	use_double_flag;
    int	buy_double_num;
    int	sys_double_num;
} DOUBLE_SCORE_ACK;
typedef struct tagANSWER_PLAYER_TOPRANK
{
    // construct
    tagANSWER_PLAYER_TOPRANK();
    // operator =
    tagANSWER_PLAYER_TOPRANK& operator=(const tagANSWER_PLAYER_TOPRANK& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    int	score;
} ANSWER_PLAYER_TOPRANK;
typedef struct tagANSWER_TOPRANK_INFO
{
    // construct
    tagANSWER_TOPRANK_INFO();
    // operator =
    tagANSWER_TOPRANK_INFO& operator=(const tagANSWER_TOPRANK_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	isend;
    std::vector<ANSWER_PLAYER_TOPRANK>	list;
} ANSWER_TOPRANK_INFO;
typedef struct tagANSWER_PLAYER_RANK
{
    // construct
    tagANSWER_PLAYER_RANK();
    // operator =
    tagANSWER_PLAYER_RANK& operator=(const tagANSWER_PLAYER_RANK& c);
    // Clear
    void Clear();
    // member
    int	rank;
} ANSWER_PLAYER_RANK;
typedef struct tagSINGLE_QUESTION_ACK
{
    // construct
    tagSINGLE_QUESTION_ACK();
    // operator =
    tagSINGLE_QUESTION_ACK& operator=(const tagSINGLE_QUESTION_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	question_id;
    unsigned char	errcode;
} SINGLE_QUESTION_ACK;
typedef struct tagSINGLE_ANSWER_RESULT_ACK
{
    // construct
    tagSINGLE_ANSWER_RESULT_ACK();
    // operator =
    tagSINGLE_ANSWER_RESULT_ACK& operator=(const tagSINGLE_ANSWER_RESULT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	question_id;
    unsigned char	errcode;
} SINGLE_ANSWER_RESULT_ACK;
typedef struct tagSINGLE_RESLUT_REQ
{
    // construct
    tagSINGLE_RESLUT_REQ();
    // operator =
    tagSINGLE_RESLUT_REQ& operator=(const tagSINGLE_RESLUT_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	question_id;
    unsigned char	result;
} SINGLE_RESLUT_REQ;
typedef struct tagRACING_ENTER_REQ
{
    // construct
    tagRACING_ENTER_REQ();
    // operator =
    tagRACING_ENTER_REQ& operator=(const tagRACING_ENTER_REQ& c);
    // Clear
    void Clear();
    // member
    int	money;
} RACING_ENTER_REQ;
typedef struct tagRACING_ENTER_ACK
{
    // construct
    tagRACING_ENTER_ACK();
    // operator =
    tagRACING_ENTER_ACK& operator=(const tagRACING_ENTER_ACK& c);
    // Clear
    void Clear();
    // member
    int	rank;
} RACING_ENTER_ACK;
typedef struct tagRACING_INFO
{
    // construct
    tagRACING_INFO();
    // operator =
    tagRACING_INFO& operator=(const tagRACING_INFO& c);
    // Clear
    void Clear();
    // member
    int	count;
    int	refresh;
} RACING_INFO;
typedef struct tagMINING_INFO
{
    // construct
    tagMINING_INFO();
    // operator =
    tagMINING_INFO& operator=(const tagMINING_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	time;
    unsigned int	index;
    unsigned char	type;
    unsigned char	state;
} MINING_INFO;
typedef struct tagMINING_REQ
{
    // construct
    tagMINING_REQ();
    // operator =
    tagMINING_REQ& operator=(const tagMINING_REQ& c);
    // Clear
    void Clear();
    // member
    int	index;
    unsigned char	type;
} MINING_REQ;
typedef struct tagACTIVITY_INFO
{
    // construct
    tagACTIVITY_INFO();
    // operator =
    tagACTIVITY_INFO& operator=(const tagACTIVITY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned short	activity_id;
    unsigned short	activity_type;
    int	activity_state;
    unsigned int	start_time;
    unsigned int	end_time;
} ACTIVITY_INFO;
typedef struct tagTREASURY_INFO
{
    // construct
    tagTREASURY_INFO();
    // operator =
    tagTREASURY_INFO& operator=(const tagTREASURY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	count;
    unsigned int	buy_count;
    unsigned int	daily_time;
    unsigned int	enter_time;
} TREASURY_INFO;
typedef struct tagTREASURY_INFO_NTF
{
    // construct
    tagTREASURY_INFO_NTF();
    // operator =
    tagTREASURY_INFO_NTF& operator=(const tagTREASURY_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    int	remaining_time;
    unsigned int	monster_num;
    unsigned int	game_point;
} TREASURY_INFO_NTF;
typedef struct tagTREASURY_END_NTF
{
    // construct
    tagTREASURY_END_NTF();
    // operator =
    tagTREASURY_END_NTF& operator=(const tagTREASURY_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	num;
    unsigned int	game_point;
} TREASURY_END_NTF;
typedef struct tagTREASURY_BUY_ACK
{
    // construct
    tagTREASURY_BUY_ACK();
    // operator =
    tagTREASURY_BUY_ACK& operator=(const tagTREASURY_BUY_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned int	enter_count;
    unsigned int	buy_count;
} TREASURY_BUY_ACK;
typedef struct tagGOLDTREE_INFO
{
    // construct
    tagGOLDTREE_INFO();
    // operator =
    tagGOLDTREE_INFO& operator=(const tagGOLDTREE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	count;
    unsigned int	buy_count;
    unsigned int	daily_time;
    unsigned int	enter_time;
} GOLDTREE_INFO;
typedef struct tagGOLDTREE_INFO_NTF
{
    // construct
    tagGOLDTREE_INFO_NTF();
    // operator =
    tagGOLDTREE_INFO_NTF& operator=(const tagGOLDTREE_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    int	remaining_time;
    unsigned int	boss_hp;
    unsigned int	game_point;
} GOLDTREE_INFO_NTF;
typedef struct tagGOLDTREE_END_NTF
{
    // construct
    tagGOLDTREE_END_NTF();
    // operator =
    tagGOLDTREE_END_NTF& operator=(const tagGOLDTREE_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	num;
    unsigned int	game_point;
} GOLDTREE_END_NTF;
typedef struct tagGOLDTREE_BUY_ACK
{
    // construct
    tagGOLDTREE_BUY_ACK();
    // operator =
    tagGOLDTREE_BUY_ACK& operator=(const tagGOLDTREE_BUY_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned int	enter_count;
    unsigned int	buy_count;
} GOLDTREE_BUY_ACK;
typedef struct tagADVENTURE_INFO
{
    // construct
    tagADVENTURE_INFO();
    // operator =
    tagADVENTURE_INFO& operator=(const tagADVENTURE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	map_id;
    int	adventure_times;
    unsigned int	refresh_time;
    unsigned int	end_time;
} ADVENTURE_INFO;
typedef struct tagADVENTURER_INFO
{
    // construct
    tagADVENTURER_INFO();
    // operator =
    tagADVENTURER_INFO& operator=(const tagADVENTURER_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_h;
    unsigned int	player_id_l;
    std::string	player_name;
    std::string	guild_name;
    unsigned int	map_id;
    int	rob_times;
    int	rob_gamepoint;
    unsigned int	take_time;
    unsigned int	end_time;
} ADVENTURER_INFO;
typedef struct tagADVENTURER_INFO_LIST
{
    // construct
    tagADVENTURER_INFO_LIST();
    // operator =
    tagADVENTURER_INFO_LIST& operator=(const tagADVENTURER_INFO_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<ADVENTURER_INFO>	list;
} ADVENTURER_INFO_LIST;
typedef struct tagADVENTURE_JOIN_REQ
{
    // construct
    tagADVENTURE_JOIN_REQ();
    // operator =
    tagADVENTURE_JOIN_REQ& operator=(const tagADVENTURE_JOIN_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	map_id;
} ADVENTURE_JOIN_REQ;
typedef struct tagADVENTURE_ROB_REQ
{
    // construct
    tagADVENTURE_ROB_REQ();
    // operator =
    tagADVENTURE_ROB_REQ& operator=(const tagADVENTURE_ROB_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_h;
    unsigned int	player_id_l;
} ADVENTURE_ROB_REQ;
typedef struct tagADVENTURE_ROB_ACK
{
    // construct
    tagADVENTURE_ROB_ACK();
    // operator =
    tagADVENTURE_ROB_ACK& operator=(const tagADVENTURE_ROB_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	gamepoint;
} ADVENTURE_ROB_ACK;
typedef struct tagADVENTURE_ADD_REQ
{
    // construct
    tagADVENTURE_ADD_REQ();
    // operator =
    tagADVENTURE_ADD_REQ& operator=(const tagADVENTURE_ADD_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    std::string	guild_name;
    unsigned int	map_id;
    int	rob_times;
    int	rob_gamepoint;
    unsigned int	take_time;
    unsigned int	end_time;
} ADVENTURE_ADD_REQ;
typedef struct tagPRO_LOCK
{
    // construct
    tagPRO_LOCK();
    // operator =
    tagPRO_LOCK& operator=(const tagPRO_LOCK& c);
    // Clear
    void Clear();
    // member
    int	protype;
    unsigned char	flag;
} PRO_LOCK;
typedef struct tagLOCK_ACK
{
    // construct
    tagLOCK_ACK();
    // operator =
    tagLOCK_ACK& operator=(const tagLOCK_ACK& c);
    // Clear
    void Clear();
    // member
    PRO_LOCK	prolock;
    unsigned short	error;
} LOCK_ACK;
typedef struct tagWING_LOCK_REQ
{
    // construct
    tagWING_LOCK_REQ();
    // operator =
    tagWING_LOCK_REQ& operator=(const tagWING_LOCK_REQ& c);
    // Clear
    void Clear();
    // member
    int	protype;
} WING_LOCK_REQ;
typedef struct tagWING_ONE_INFO
{
    // construct
    tagWING_ONE_INFO();
    // operator =
    tagWING_ONE_INFO& operator=(const tagWING_ONE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	level;
    unsigned int	step;
    unsigned int	star;
} WING_ONE_INFO;
typedef struct tagWING_ADVANCE_REQ
{
    // construct
    tagWING_ADVANCE_REQ();
    // operator =
    tagWING_ADVANCE_REQ& operator=(const tagWING_ADVANCE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned char	type;
} WING_ADVANCE_REQ;
typedef struct tagWING_ADVANCE_ACK
{
    // construct
    tagWING_ADVANCE_ACK();
    // operator =
    tagWING_ADVANCE_ACK& operator=(const tagWING_ADVANCE_ACK& c);
    // Clear
    void Clear();
    // member
    int	err;
    WING_ONE_INFO	info;
} WING_ADVANCE_ACK;
typedef struct tagWING_TRANSMOGRIFICATION_REQ
{
    // construct
    tagWING_TRANSMOGRIFICATION_REQ();
    // operator =
    tagWING_TRANSMOGRIFICATION_REQ& operator=(const tagWING_TRANSMOGRIFICATION_REQ& c);
    // Clear
    void Clear();
    // member
    int	id;
} WING_TRANSMOGRIFICATION_REQ;
typedef struct tagWING_ACTIVATE_REQ
{
    // construct
    tagWING_ACTIVATE_REQ();
    // operator =
    tagWING_ACTIVATE_REQ& operator=(const tagWING_ACTIVATE_REQ& c);
    // Clear
    void Clear();
    // member
    int	id;
} WING_ACTIVATE_REQ;
typedef struct tagHOROSCOPE_INFO
{
    // construct
    tagHOROSCOPE_INFO();
    // operator =
    tagHOROSCOPE_INFO& operator=(const tagHOROSCOPE_INFO& c);
    // Clear
    void Clear();
    // member
    int	horoscope_level;
    unsigned char	levelup_id;
    unsigned int	levelup_time;
} HOROSCOPE_INFO;
typedef struct tagHOROSCOPE_LEVELUP_ACK
{
    // construct
    tagHOROSCOPE_LEVELUP_ACK();
    // operator =
    tagHOROSCOPE_LEVELUP_ACK& operator=(const tagHOROSCOPE_LEVELUP_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	horoscope_level;
    unsigned int	time;
} HOROSCOPE_LEVELUP_ACK;
typedef struct tagHOROSCOPE_LEVELUP_CMPL_ACK
{
    // construct
    tagHOROSCOPE_LEVELUP_CMPL_ACK();
    // operator =
    tagHOROSCOPE_LEVELUP_CMPL_ACK& operator=(const tagHOROSCOPE_LEVELUP_CMPL_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned char	id;
    unsigned char	level;
    unsigned int	time;
} HOROSCOPE_LEVELUP_CMPL_ACK;
typedef struct tagFRIEND_ADD_REQ
{
    // construct
    tagFRIEND_ADD_REQ();
    // operator =
    tagFRIEND_ADD_REQ& operator=(const tagFRIEND_ADD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    std::string	src_name;
    char	src_career;
    int	src_level;
    int	src_vip_level;
    std::string	dst_name;
} FRIEND_ADD_REQ;
typedef struct tagFRIEND_ADD_ACK
{
    // construct
    tagFRIEND_ADD_ACK();
    // operator =
    tagFRIEND_ADD_ACK& operator=(const tagFRIEND_ADD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    std::string	src_name;
    std::string	dst_name;
} FRIEND_ADD_ACK;
typedef struct tagFRIEND_DEL_REQ
{
    // construct
    tagFRIEND_DEL_REQ();
    // operator =
    tagFRIEND_DEL_REQ& operator=(const tagFRIEND_DEL_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} FRIEND_DEL_REQ;
typedef struct tagFRIEND_DEL_ACK
{
    // construct
    tagFRIEND_DEL_ACK();
    // operator =
    tagFRIEND_DEL_ACK& operator=(const tagFRIEND_DEL_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} FRIEND_DEL_ACK;
typedef struct tagFRIEND_QUICK_ADD_REQ
{
    // construct
    tagFRIEND_QUICK_ADD_REQ();
    // operator =
    tagFRIEND_QUICK_ADD_REQ& operator=(const tagFRIEND_QUICK_ADD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	add_robot;
} FRIEND_QUICK_ADD_REQ;
typedef struct tagSET_PLAYER_ID_REQ
{
    // construct
    tagSET_PLAYER_ID_REQ();
    // operator =
    tagSET_PLAYER_ID_REQ& operator=(const tagSET_PLAYER_ID_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	login_id_l;
    unsigned int	login_id_h;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} SET_PLAYER_ID_REQ;
typedef struct tagSOLDIER_ENABLE_REQ
{
    // construct
    tagSOLDIER_ENABLE_REQ();
    // operator =
    tagSOLDIER_ENABLE_REQ& operator=(const tagSOLDIER_ENABLE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_enable;
} SOLDIER_ENABLE_REQ;
typedef struct tagSOLDIER_ENABLE_ACK
{
    // construct
    tagSOLDIER_ENABLE_ACK();
    // operator =
    tagSOLDIER_ENABLE_ACK& operator=(const tagSOLDIER_ENABLE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned char	is_enable;
} SOLDIER_ENABLE_ACK;
typedef struct tagSOLDIER_RESURGENCE_INFO
{
    // construct
    tagSOLDIER_RESURGENCE_INFO();
    // operator =
    tagSOLDIER_RESURGENCE_INFO& operator=(const tagSOLDIER_RESURGENCE_INFO& c);
    // Clear
    void Clear();
    // member
    int	timer;
    int	cd;
} SOLDIER_RESURGENCE_INFO;
typedef struct tagSET_PLAYER_ID_ACK
{
    // construct
    tagSET_PLAYER_ID_ACK();
    // operator =
    tagSET_PLAYER_ID_ACK& operator=(const tagSET_PLAYER_ID_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	login_id_l;
    unsigned int	login_id_h;
} SET_PLAYER_ID_ACK;
typedef struct tagSET_GAMESVR_ID_REQ
{
    // construct
    tagSET_GAMESVR_ID_REQ();
    // operator =
    tagSET_GAMESVR_ID_REQ& operator=(const tagSET_GAMESVR_ID_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    unsigned int	gamesvr_id;
    unsigned int	center_id;
} SET_GAMESVR_ID_REQ;
typedef struct tagSET_GAMESVR_ID_ACK
{
    // construct
    tagSET_GAMESVR_ID_ACK();
    // operator =
    tagSET_GAMESVR_ID_ACK& operator=(const tagSET_GAMESVR_ID_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} SET_GAMESVR_ID_ACK;
typedef struct tagSCORE_MEMBER_INFO
{
    // construct
    tagSCORE_MEMBER_INFO();
    // operator =
    tagSCORE_MEMBER_INFO& operator=(const tagSCORE_MEMBER_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    int	level;
    int	vip;
} SCORE_MEMBER_INFO;
typedef struct tagDUNGEON_SCORE_INFO
{
    // construct
    tagDUNGEON_SCORE_INFO();
    // operator =
    tagDUNGEON_SCORE_INFO& operator=(const tagDUNGEON_SCORE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
    unsigned int	cost_time;
    std::vector<SCORE_MEMBER_INFO>	member_list;
} DUNGEON_SCORE_INFO;
typedef struct tagDUNGEON_READY_COUNTDOWN
{
    // construct
    tagDUNGEON_READY_COUNTDOWN();
    // operator =
    tagDUNGEON_READY_COUNTDOWN& operator=(const tagDUNGEON_READY_COUNTDOWN& c);
    // Clear
    void Clear();
    // member
    unsigned int	ready_time;
    unsigned int	run_time;
    unsigned int	current_time;
} DUNGEON_READY_COUNTDOWN;
typedef struct tagDUNGEON_SCORE_INFO_LIST
{
    // construct
    tagDUNGEON_SCORE_INFO_LIST();
    // operator =
    tagDUNGEON_SCORE_INFO_LIST& operator=(const tagDUNGEON_SCORE_INFO_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<DUNGEON_SCORE_INFO>	dungeon_list;
} DUNGEON_SCORE_INFO_LIST;
typedef struct tagENTER_DUNGEON_REQ
{
    // construct
    tagENTER_DUNGEON_REQ();
    // operator =
    tagENTER_DUNGEON_REQ& operator=(const tagENTER_DUNGEON_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_sameserver;
    unsigned char	jump_type;
    unsigned int	dungeon_id;
    unsigned int	channel_id;
    unsigned int	scene_id;
    unsigned int	object_id;
    int	pos_x;
    int	pos_y;
    BIGINT_ID	fly_player_id;
} ENTER_DUNGEON_REQ;
typedef struct tagDUNGEON_EVENT_NTF
{
    // construct
    tagDUNGEON_EVENT_NTF();
    // operator =
    tagDUNGEON_EVENT_NTF& operator=(const tagDUNGEON_EVENT_NTF& c);
    // Clear
    void Clear();
    // member
    int	event_id;
    std::string	player_name;
} DUNGEON_EVENT_NTF;
typedef struct tagPLAYER_BASE_INFO_ACK
{
    // construct
    tagPLAYER_BASE_INFO_ACK();
    // operator =
    tagPLAYER_BASE_INFO_ACK& operator=(const tagPLAYER_BASE_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} PLAYER_BASE_INFO_ACK;
typedef struct tagREFRESH_VIGOR_ACK
{
    // construct
    tagREFRESH_VIGOR_ACK();
    // operator =
    tagREFRESH_VIGOR_ACK& operator=(const tagREFRESH_VIGOR_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	vigor_reftime;
} REFRESH_VIGOR_ACK;
typedef struct tagONLINE_REWARD_REQ
{
    // construct
    tagONLINE_REWARD_REQ();
    // operator =
    tagONLINE_REWARD_REQ& operator=(const tagONLINE_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	id;
} ONLINE_REWARD_REQ;
typedef struct tagONLINE_REWARD_ACK
{
    // construct
    tagONLINE_REWARD_ACK();
    // operator =
    tagONLINE_REWARD_ACK& operator=(const tagONLINE_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	errcode;
    unsigned int	online_reward_flag;
    std::vector<REWARD_ITEM>	list;
    int	dayfresh;
    unsigned int	time;
    unsigned int	finish_time;
} ONLINE_REWARD_ACK;
typedef struct tagGROW_LEVEL_GIFT_ACK
{
    // construct
    tagGROW_LEVEL_GIFT_ACK();
    // operator =
    tagGROW_LEVEL_GIFT_ACK& operator=(const tagGROW_LEVEL_GIFT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	errcode;
    int	level;
} GROW_LEVEL_GIFT_ACK;
typedef struct tagGROW_LEVEL_GIFT_REQ
{
    // construct
    tagGROW_LEVEL_GIFT_REQ();
    // operator =
    tagGROW_LEVEL_GIFT_REQ& operator=(const tagGROW_LEVEL_GIFT_REQ& c);
    // Clear
    void Clear();
    // member
    int	level;
} GROW_LEVEL_GIFT_REQ;
typedef struct tagBESTOW_REWARD_ACK
{
    // construct
    tagBESTOW_REWARD_ACK();
    // operator =
    tagBESTOW_REWARD_ACK& operator=(const tagBESTOW_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	errcode;
    unsigned int	time;
    int	grownum;
    int	fixednum;
    std::vector<REWARD_ITEM>	grow_list;
} BESTOW_REWARD_ACK;
typedef struct tagONLINE_PK_END_NTF
{
    // construct
    tagONLINE_PK_END_NTF();
    // operator =
    tagONLINE_PK_END_NTF& operator=(const tagONLINE_PK_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	success;
    unsigned int	honor;
} ONLINE_PK_END_NTF;
typedef struct tagPLAYER_LOG_REQ
{
    // construct
    tagPLAYER_LOG_REQ();
    // operator =
    tagPLAYER_LOG_REQ& operator=(const tagPLAYER_LOG_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	log;
} PLAYER_LOG_REQ;
typedef struct tagBEHAVIOR_LOG_REQ
{
    // construct
    tagBEHAVIOR_LOG_REQ();
    // operator =
    tagBEHAVIOR_LOG_REQ& operator=(const tagBEHAVIOR_LOG_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	log;
} BEHAVIOR_LOG_REQ;
typedef struct tagLOG_REQ
{
    // construct
    tagLOG_REQ();
    // operator =
    tagLOG_REQ& operator=(const tagLOG_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	log;
    unsigned int	idflag;
    unsigned int	agreementid;
} LOG_REQ;
typedef struct tagLOGOUT_GAME
{
    // construct
    tagLOGOUT_GAME();
    // operator =
    tagLOGOUT_GAME& operator=(const tagLOGOUT_GAME& c);
    // Clear
    void Clear();
    // member
    unsigned short	exitcode;
    unsigned int	login_id_l;
    unsigned int	login_id_h;
} LOGOUT_GAME;
typedef struct tagKICKOUT_GAME
{
    // construct
    tagKICKOUT_GAME();
    // operator =
    tagKICKOUT_GAME& operator=(const tagKICKOUT_GAME& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} KICKOUT_GAME;
typedef struct tagCREATE_PLAYER_REQ
{
    // construct
    tagCREATE_PLAYER_REQ();
    // operator =
    tagCREATE_PLAYER_REQ& operator=(const tagCREATE_PLAYER_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	token;
    std::string	player_name;
    unsigned char	sex;
    unsigned char	career;
} CREATE_PLAYER_REQ;
typedef struct tagIS_CREATE_PLAYER_NAME_REQ
{
    // construct
    tagIS_CREATE_PLAYER_NAME_REQ();
    // operator =
    tagIS_CREATE_PLAYER_NAME_REQ& operator=(const tagIS_CREATE_PLAYER_NAME_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
} IS_CREATE_PLAYER_NAME_REQ;
typedef struct tagASK_PLAYER_INFO
{
    // construct
    tagASK_PLAYER_INFO();
    // operator =
    tagASK_PLAYER_INFO& operator=(const tagASK_PLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    BIGINT_ID	player_id;
    std::string	platform_server_name;
    int	region;
    char	sex;
    char	career;
    int	level;
    unsigned int	unionmap_id;
} ASK_PLAYER_INFO;
typedef struct tagASK_PLAYER_LIST
{
    // construct
    tagASK_PLAYER_LIST();
    // operator =
    tagASK_PLAYER_LIST& operator=(const tagASK_PLAYER_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<ASK_PLAYER_INFO>	character_list;
} ASK_PLAYER_LIST;
typedef struct tagLOAD_PLAYER_REQ
{
    // construct
    tagLOAD_PLAYER_REQ();
    // operator =
    tagLOAD_PLAYER_REQ& operator=(const tagLOAD_PLAYER_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	character_id;
} LOAD_PLAYER_REQ;
typedef struct tagBATTLEUNIT_APPEAR
{
    // construct
    tagBATTLEUNIT_APPEAR();
    // operator =
    tagBATTLEUNIT_APPEAR& operator=(const tagBATTLEUNIT_APPEAR& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    unsigned int	creature_id;
    int	object_type;
    int	angle;
    int	radius;
    unsigned int	group;
    unsigned int	team_id_h;
    unsigned int	team_id_l;
    unsigned char	state;
    std::string	state_arg;
    int	speed;
    std::string	name;
    unsigned int	region;
    unsigned char	sex;
    unsigned char	career;
    int	level;
    unsigned char	attackable;
    unsigned char	cantmove;
    unsigned char	cantangle;
    unsigned char	cantbuff;
    unsigned char	cantheal;
    unsigned int	showflag;
    int	x;
    int	y;
    int	hp;
    int	max_hp;
    int	mp;
    int	max_mp;
    int	es;
    int	max_es;
} BATTLEUNIT_APPEAR;
typedef struct tagMONSTER_APPEAR
{
    // construct
    tagMONSTER_APPEAR();
    // operator =
    tagMONSTER_APPEAR& operator=(const tagMONSTER_APPEAR& c);
    // Clear
    void Clear();
    // member
    BATTLEUNIT_APPEAR	base;
    unsigned char	can_talk;
    std::vector<unsigned short>	modifier_list;
} MONSTER_APPEAR;
typedef struct tagBOSS_APPEAR
{
    // construct
    tagBOSS_APPEAR();
    // operator =
    tagBOSS_APPEAR& operator=(const tagBOSS_APPEAR& c);
    // Clear
    void Clear();
    // member
    BATTLEUNIT_APPEAR	base;
    unsigned char	bossui;
    unsigned int	createtime;
    unsigned int	lifetime;
    unsigned char	b_corpse;
    int	corpse_time;
} BOSS_APPEAR;
typedef struct tagBATTLEUNIT_DISAPPEAR
{
    // construct
    tagBATTLEUNIT_DISAPPEAR();
    // operator =
    tagBATTLEUNIT_DISAPPEAR& operator=(const tagBATTLEUNIT_DISAPPEAR& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
} BATTLEUNIT_DISAPPEAR;
typedef struct tagSCENEOBJECT_APPEAR
{
    // construct
    tagSCENEOBJECT_APPEAR();
    // operator =
    tagSCENEOBJECT_APPEAR& operator=(const tagSCENEOBJECT_APPEAR& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    unsigned int	object_type;
    unsigned char	object_flag;
    int	x;
    int	y;
    int	angle;
    unsigned int	arg1;
    unsigned int	arg2;
} SCENEOBJECT_APPEAR;
typedef struct tagSCENEOBJECT_DISAPPEAR
{
    // construct
    tagSCENEOBJECT_DISAPPEAR();
    // operator =
    tagSCENEOBJECT_DISAPPEAR& operator=(const tagSCENEOBJECT_DISAPPEAR& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    unsigned int	object_type;
} SCENEOBJECT_DISAPPEAR;
typedef struct tagPICK_DROP_OBJECT
{
    // construct
    tagPICK_DROP_OBJECT();
    // operator =
    tagPICK_DROP_OBJECT& operator=(const tagPICK_DROP_OBJECT& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
} PICK_DROP_OBJECT;
typedef struct tagNOTIFY_PICK_DROP_OJBECT_REQ
{
    // construct
    tagNOTIFY_PICK_DROP_OJBECT_REQ();
    // operator =
    tagNOTIFY_PICK_DROP_OJBECT_REQ& operator=(const tagNOTIFY_PICK_DROP_OJBECT_REQ& c);
    // Clear
    void Clear();
    // member
    std::vector<PICK_DROP_OBJECT>	drop_object_list;
} NOTIFY_PICK_DROP_OJBECT_REQ;
typedef struct tagGAME_START
{
    // construct
    tagGAME_START();
    // operator =
    tagGAME_START& operator=(const tagGAME_START& c);
    // Clear
    void Clear();
    // member
    unsigned char	start;
} GAME_START;
typedef struct tagGAME_LOCK
{
    // construct
    tagGAME_LOCK();
    // operator =
    tagGAME_LOCK& operator=(const tagGAME_LOCK& c);
    // Clear
    void Clear();
    // member
    unsigned char	lock;
} GAME_LOCK;
typedef struct tagMOVE_ACK
{
    // construct
    tagMOVE_ACK();
    // operator =
    tagMOVE_ACK& operator=(const tagMOVE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	x;
    int	y;
} MOVE_ACK;
typedef struct tagJUMP_NTF
{
    // construct
    tagJUMP_NTF();
    // operator =
    tagJUMP_NTF& operator=(const tagJUMP_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    int	time;
    int	x;
    int	y;
    unsigned char	is_stop;
    unsigned char	is_passive;
} JUMP_NTF;
typedef struct tagBOUNCE_NTF
{
    // construct
    tagBOUNCE_NTF();
    // operator =
    tagBOUNCE_NTF& operator=(const tagBOUNCE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    int	time;
    int	height;
} BOUNCE_NTF;
typedef struct tagCREATURE_MOVE
{
    // construct
    tagCREATURE_MOVE();
    // operator =
    tagCREATURE_MOVE& operator=(const tagCREATURE_MOVE& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    int	is_moving;
    int	angle;
    int	pos_x;
    int	pos_y;
    int	vel_x;
    int	vel_y;
} CREATURE_MOVE;
typedef struct tagCREATURE_MOVE_LIST
{
    // construct
    tagCREATURE_MOVE_LIST();
    // operator =
    tagCREATURE_MOVE_LIST& operator=(const tagCREATURE_MOVE_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<CREATURE_MOVE>	list;
} CREATURE_MOVE_LIST;
typedef struct tagCHANGE_DUNGEON_REQ
{
    // construct
    tagCHANGE_DUNGEON_REQ();
    // operator =
    tagCHANGE_DUNGEON_REQ& operator=(const tagCHANGE_DUNGEON_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	jump_type;
    unsigned int	dungeon_id;
    unsigned int	channel_id;
    unsigned int	scene_id;
    unsigned int	object_id;
    BIGINT_ID	fly_player_id;
    int	pos_x;
    int	pos_y;
} CHANGE_DUNGEON_REQ;
typedef struct tagCHANGE_DUNGEON_ACK
{
    // construct
    tagCHANGE_DUNGEON_ACK();
    // operator =
    tagCHANGE_DUNGEON_ACK& operator=(const tagCHANGE_DUNGEON_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned short	server_id;
    unsigned char	gameserver_type;
    unsigned int	player_object_id;
    unsigned int	soldier_object_id;
    unsigned int	union_id;
    int	x;
    int	y;
    int	angle;
    SERVER_TIME	now;
    std::string	language;
    int	timezone;
} CHANGE_DUNGEON_ACK;
typedef struct tagDUNGEON_LIFE_COUNT
{
    // construct
    tagDUNGEON_LIFE_COUNT();
    // operator =
    tagDUNGEON_LIFE_COUNT& operator=(const tagDUNGEON_LIFE_COUNT& c);
    // Clear
    void Clear();
    // member
    int	life_count;
} DUNGEON_LIFE_COUNT;
typedef struct tagSCENE_INFO_REQ
{
    // construct
    tagSCENE_INFO_REQ();
    // operator =
    tagSCENE_INFO_REQ& operator=(const tagSCENE_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	none;
} SCENE_INFO_REQ;
typedef struct tagSCENE_INFO_ACK
{
    // construct
    tagSCENE_INFO_ACK();
    // operator =
    tagSCENE_INFO_ACK& operator=(const tagSCENE_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	channel_id;
    unsigned short	map_level;
    unsigned short	player_num;
    std::vector<unsigned short>	modifier_list;
} SCENE_INFO_ACK;
typedef struct tagCLEAR_SCENE_NTF
{
    // construct
    tagCLEAR_SCENE_NTF();
    // operator =
    tagCLEAR_SCENE_NTF& operator=(const tagCLEAR_SCENE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	trigger_id;
} CLEAR_SCENE_NTF;
typedef struct tagCLEAR_DUNGEON_NTF
{
    // construct
    tagCLEAR_DUNGEON_NTF();
    // operator =
    tagCLEAR_DUNGEON_NTF& operator=(const tagCLEAR_DUNGEON_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned char	score;
    unsigned short	clear_time;
    unsigned short	combo_kill_num;
    unsigned short	combo_kill_max;
    unsigned short	on_hit_num;
    unsigned int	absorb_soul;
    unsigned int	gain_exp;
    unsigned int	gain_gp;
    unsigned int	gain_soul;
    unsigned char	reward_times;
    std::vector<REWARD_ITEM>	gain_item_list;
    std::vector<REWARD_ITEM>	rand_item_list;
    std::vector<REWARD_ITEM>	vip_gain_item_list;
    std::vector<REWARD_ITEM>	vip_rand_item_list;
} CLEAR_DUNGEON_NTF;
typedef struct tagOPEN_BOX_REQ
{
    // construct
    tagOPEN_BOX_REQ();
    // operator =
    tagOPEN_BOX_REQ& operator=(const tagOPEN_BOX_REQ& c);
    // Clear
    void Clear();
    // member
} OPEN_BOX_REQ;
typedef struct tagFLIP_CARD_REQ
{
    // construct
    tagFLIP_CARD_REQ();
    // operator =
    tagFLIP_CARD_REQ& operator=(const tagFLIP_CARD_REQ& c);
    // Clear
    void Clear();
    // member
} FLIP_CARD_REQ;
typedef struct tagCHANGE_SCENE_REQ
{
    // construct
    tagCHANGE_SCENE_REQ();
    // operator =
    tagCHANGE_SCENE_REQ& operator=(const tagCHANGE_SCENE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	scene_id;
    unsigned int	trigger_id;
} CHANGE_SCENE_REQ;
typedef struct tagCHANGE_SCENE_ACK
{
    // construct
    tagCHANGE_SCENE_ACK();
    // operator =
    tagCHANGE_SCENE_ACK& operator=(const tagCHANGE_SCENE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	dungeon_id;
    int	x;
    int	y;
    int	angle;
    unsigned int	soldier_object_id;
} CHANGE_SCENE_ACK;
typedef struct tagDUNGEON_CONDITION
{
    // construct
    tagDUNGEON_CONDITION();
    // operator =
    tagDUNGEON_CONDITION& operator=(const tagDUNGEON_CONDITION& c);
    // Clear
    void Clear();
    // member
    unsigned char	active;
    unsigned int	type;
    int	param1;
    int	param2;
    int	param3;
} DUNGEON_CONDITION;
typedef struct tagDUNGEON_CONDITION_NTF
{
    // construct
    tagDUNGEON_CONDITION_NTF();
    // operator =
    tagDUNGEON_CONDITION_NTF& operator=(const tagDUNGEON_CONDITION_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<DUNGEON_CONDITION>	success;
    std::vector<DUNGEON_CONDITION>	failure;
    std::vector<DUNGEON_CONDITION>	score1;
    std::vector<DUNGEON_CONDITION>	score2;
} DUNGEON_CONDITION_NTF;
typedef struct tagSHOOT_TARGET
{
    // construct
    tagSHOOT_TARGET();
    // operator =
    tagSHOOT_TARGET& operator=(const tagSHOOT_TARGET& c);
    // Clear
    void Clear();
    // member
    unsigned int	caster_id;
    unsigned int	target_id;
    int	target_x;
    int	target_y;
} SHOOT_TARGET;
typedef struct tagSKILL_ARGUMETNS
{
    // construct
    tagSKILL_ARGUMETNS();
    // operator =
    tagSKILL_ARGUMETNS& operator=(const tagSKILL_ARGUMETNS& c);
    // Clear
    void Clear();
    // member
    unsigned char	skill_mode;
    int	cast_speed;
    unsigned char	cast_multi;
    unsigned char	bullet_multi;
    short	bullet_multi_angle;
    unsigned char	bullet_repeat;
    int	bullet_repeat_interval;
    int	bullet_speed;
    int	bullet_chain;
    int	bullet_chain_id;
    unsigned char	hand_left;
} SKILL_ARGUMETNS;
typedef struct tagSKILL_LAUNCH_NTF
{
    // construct
    tagSKILL_LAUNCH_NTF();
    // operator =
    tagSKILL_LAUNCH_NTF& operator=(const tagSKILL_LAUNCH_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	owner_id;
    unsigned int	skill_id;
    unsigned int	skill_obj_id;
} SKILL_LAUNCH_NTF;
typedef struct tagSKILL_BULLET_NTF
{
    // construct
    tagSKILL_BULLET_NTF();
    // operator =
    tagSKILL_BULLET_NTF& operator=(const tagSKILL_BULLET_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	owner_id;
    unsigned int	skill_id;
    unsigned int	skill_obj_id;
    unsigned int	bullet_obj_id;
    SHOOT_TARGET	shoot_target;
} SKILL_BULLET_NTF;
typedef struct tagSKILL_HIT_NTF
{
    // construct
    tagSKILL_HIT_NTF();
    // operator =
    tagSKILL_HIT_NTF& operator=(const tagSKILL_HIT_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	owner_id;
    unsigned int	skill_id;
    unsigned int	skill_obj_id;
    int	hit_direction;
    SHOOT_TARGET	hit_target;
} SKILL_HIT_NTF;
typedef struct tagSKILL_STRIKE_NTF
{
    // construct
    tagSKILL_STRIKE_NTF();
    // operator =
    tagSKILL_STRIKE_NTF& operator=(const tagSKILL_STRIKE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	owner_id;
    unsigned int	target_id;
    unsigned int	skill_id;
    unsigned int	skill_obj_id;
    int	strike_direction;
} SKILL_STRIKE_NTF;
typedef struct tagSKILL_END_NTF
{
    // construct
    tagSKILL_END_NTF();
    // operator =
    tagSKILL_END_NTF& operator=(const tagSKILL_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	owner_id;
    unsigned int	skill_id;
    unsigned int	skill_obj_id;
} SKILL_END_NTF;
typedef struct tagBATTLE_PET_NTF
{
    // construct
    tagBATTLE_PET_NTF();
    // operator =
    tagBATTLE_PET_NTF& operator=(const tagBATTLE_PET_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	pet_id;
    unsigned int	master_id;
    unsigned char	is_destory;
} BATTLE_PET_NTF;
typedef struct tagBUFF_NTF
{
    // construct
    tagBUFF_NTF();
    // operator =
    tagBUFF_NTF& operator=(const tagBUFF_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    int	change;
    unsigned int	buff_id;
    int	buff_val1;
    int	buff_val2;
    int	buff_time;
    int	remain_time;
    unsigned char	overlap_num;
} BUFF_NTF;
typedef struct tagDAMAGE_INFO
{
    // construct
    tagDAMAGE_INFO();
    // operator =
    tagDAMAGE_INFO& operator=(const tagDAMAGE_INFO& c);
    // Clear
    void Clear();
    // member
    int	damage;
    unsigned char	type;
} DAMAGE_INFO;
typedef struct tagTAKE_DAMAGE_NTF
{
    // construct
    tagTAKE_DAMAGE_NTF();
    // operator =
    tagTAKE_DAMAGE_NTF& operator=(const tagTAKE_DAMAGE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	attacker_id;
    unsigned int	object_id;
    DAMAGE_INFO	damage_info;
} TAKE_DAMAGE_NTF;
typedef struct tagTAKE_HEAL_NTF
{
    // construct
    tagTAKE_HEAL_NTF();
    // operator =
    tagTAKE_HEAL_NTF& operator=(const tagTAKE_HEAL_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	caster_id;
    unsigned int	object_id;
    int	heal;
} TAKE_HEAL_NTF;
typedef struct tagDEAD_NTF
{
    // construct
    tagDEAD_NTF();
    // operator =
    tagDEAD_NTF& operator=(const tagDEAD_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    unsigned int	killer_id;
    unsigned int	skill_id;
    unsigned int	skill_obj_id;
} DEAD_NTF;
typedef struct tagRELIVE_NTF
{
    // construct
    tagRELIVE_NTF();
    // operator =
    tagRELIVE_NTF& operator=(const tagRELIVE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
} RELIVE_NTF;
typedef struct tagCOMBO_KILL_NTF
{
    // construct
    tagCOMBO_KILL_NTF();
    // operator =
    tagCOMBO_KILL_NTF& operator=(const tagCOMBO_KILL_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned short	combo;
    unsigned short	combo_max;
    unsigned int	combo_cd;
} COMBO_KILL_NTF;
typedef struct tagPLAYER_DAMAGE_INFO
{
    // construct
    tagPLAYER_DAMAGE_INFO();
    // operator =
    tagPLAYER_DAMAGE_INFO& operator=(const tagPLAYER_DAMAGE_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	name;
    unsigned int	damage;
} PLAYER_DAMAGE_INFO;
typedef struct tagDAMAGE_RANK_NTF
{
    // construct
    tagDAMAGE_RANK_NTF();
    // operator =
    tagDAMAGE_RANK_NTF& operator=(const tagDAMAGE_RANK_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<PLAYER_DAMAGE_INFO>	damage_list;
} DAMAGE_RANK_NTF;
typedef struct tagPICK_DROP_OBJECT_NTF
{
    // construct
    tagPICK_DROP_OBJECT_NTF();
    // operator =
    tagPICK_DROP_OBJECT_NTF& operator=(const tagPICK_DROP_OBJECT_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	drop_object_id;
    unsigned int	owner_id;
} PICK_DROP_OBJECT_NTF;
typedef struct tagOBJECT_DROP_GOLD_NTF
{
    // construct
    tagOBJECT_DROP_GOLD_NTF();
    // operator =
    tagOBJECT_DROP_GOLD_NTF& operator=(const tagOBJECT_DROP_GOLD_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	drop_object_id;
    unsigned int	gold;
} OBJECT_DROP_GOLD_NTF;
typedef struct tagSTATE_NTF
{
    // construct
    tagSTATE_NTF();
    // operator =
    tagSTATE_NTF& operator=(const tagSTATE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    unsigned char	state;
    std::string	state_arg;
} STATE_NTF;
typedef struct tagPROPERTY_NTF
{
    // construct
    tagPROPERTY_NTF();
    // operator =
    tagPROPERTY_NTF& operator=(const tagPROPERTY_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	property_id;
    int	value;
    std::string	str;
} PROPERTY_NTF;
typedef struct tagPROPERTY_LIST_NTF
{
    // construct
    tagPROPERTY_LIST_NTF();
    // operator =
    tagPROPERTY_LIST_NTF& operator=(const tagPROPERTY_LIST_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    std::vector<PROPERTY_NTF>	list;
} PROPERTY_LIST_NTF;
typedef struct tagBATTLE_STATE_NTF
{
    // construct
    tagBATTLE_STATE_NTF();
    // operator =
    tagBATTLE_STATE_NTF& operator=(const tagBATTLE_STATE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	battle_state;
} BATTLE_STATE_NTF;
typedef struct tagAI_DEBUG_REQ
{
    // construct
    tagAI_DEBUG_REQ();
    // operator =
    tagAI_DEBUG_REQ& operator=(const tagAI_DEBUG_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
} AI_DEBUG_REQ;
typedef struct tagAI_DEBUG_ACK
{
    // construct
    tagAI_DEBUG_ACK();
    // operator =
    tagAI_DEBUG_ACK& operator=(const tagAI_DEBUG_ACK& c);
    // Clear
    void Clear();
    // member
    std::string	ai_name;
    unsigned int	ai_state;
} AI_DEBUG_ACK;
typedef struct tagOFFLINE_PLAYER_INFO_REQ
{
    // construct
    tagOFFLINE_PLAYER_INFO_REQ();
    // operator =
    tagOFFLINE_PLAYER_INFO_REQ& operator=(const tagOFFLINE_PLAYER_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    std::string	player_name;
    unsigned char	reason;
} OFFLINE_PLAYER_INFO_REQ;
typedef struct tagOFFLINE_PLAYER_BYNAME_REQ
{
    // construct
    tagOFFLINE_PLAYER_BYNAME_REQ();
    // operator =
    tagOFFLINE_PLAYER_BYNAME_REQ& operator=(const tagOFFLINE_PLAYER_BYNAME_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	name;
} OFFLINE_PLAYER_BYNAME_REQ;
typedef struct tagCHAT_MSG
{
    // construct
    tagCHAT_MSG();
    // operator =
    tagCHAT_MSG& operator=(const tagCHAT_MSG& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	src_vip;
    unsigned int	src_flag;
    std::string	src_name;
    std::string	dst_name;
    unsigned char	channel;
    unsigned int	looptime;
    unsigned char	isloop;
    std::string	chat;
    unsigned int	starttime;
    unsigned int	endtime;
} CHAT_MSG;
typedef struct tagMARQUEE
{
    // construct
    tagMARQUEE();
    // operator =
    tagMARQUEE& operator=(const tagMARQUEE& c);
    // Clear
    void Clear();
    // member
    std::string	tag;
    int	src_vip;
    unsigned int	src_flag;
    std::string	src_name;
    std::vector<std::string>	param_list;
} MARQUEE;
typedef struct tagSERVER_MARQUEE
{
    // construct
    tagSERVER_MARQUEE();
    // operator =
    tagSERVER_MARQUEE& operator=(const tagSERVER_MARQUEE& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    std::vector<std::string>	parame_list;
} SERVER_MARQUEE;
typedef struct tagMESSAGE_NTF
{
    // construct
    tagMESSAGE_NTF();
    // operator =
    tagMESSAGE_NTF& operator=(const tagMESSAGE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    std::vector<std::string>	parame_list;
} MESSAGE_NTF;
typedef struct tagNPC_BUY_REQ
{
    // construct
    tagNPC_BUY_REQ();
    // operator =
    tagNPC_BUY_REQ& operator=(const tagNPC_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	sale_id;
    unsigned int	item_id;
    unsigned char	item_num;
    unsigned char	is_callback;
} NPC_BUY_REQ;
typedef struct tagNPC_BUY_ACK
{
    // construct
    tagNPC_BUY_ACK();
    // operator =
    tagNPC_BUY_ACK& operator=(const tagNPC_BUY_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	item_id;
    unsigned char	item_num;
} NPC_BUY_ACK;
typedef struct tagTEAM_MEMBER
{
    // construct
    tagTEAM_MEMBER();
    // operator =
    tagTEAM_MEMBER& operator=(const tagTEAM_MEMBER& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    unsigned char	is_offline;
    std::string	name;
    char	sex;
    char	career;
    int	level;
    int	battle_power;
    unsigned int	server_id;
    unsigned int	unionmap_id;
    int	pos_x;
    int	pos_y;
    unsigned int	head_icon;
} TEAM_MEMBER;
typedef struct tagTEAM_INFO
{
    // construct
    tagTEAM_INFO();
    // operator =
    tagTEAM_INFO& operator=(const tagTEAM_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    unsigned int	team_id_l;
    unsigned int	team_id_h;
    unsigned char	team_flag;
    unsigned char	team_type;
    unsigned int	game_server_id;
    unsigned int	max_member_num;
    std::string	team_name;
    std::vector<TEAM_MEMBER>	member_list;
} TEAM_INFO;
typedef struct tagTEAM_CREATE_REQ
{
    // construct
    tagTEAM_CREATE_REQ();
    // operator =
    tagTEAM_CREATE_REQ& operator=(const tagTEAM_CREATE_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	team_name;
    TEAM_MEMBER	leader;
} TEAM_CREATE_REQ;
typedef struct tagTEAM_OFFLINE_MEMBER_ADD_REQ
{
    // construct
    tagTEAM_OFFLINE_MEMBER_ADD_REQ();
    // operator =
    tagTEAM_OFFLINE_MEMBER_ADD_REQ& operator=(const tagTEAM_OFFLINE_MEMBER_ADD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	team_id_l;
    unsigned int	team_id_h;
    unsigned int	dungeon_id;
    std::string	src_name;
    std::string	dst_name;
} TEAM_OFFLINE_MEMBER_ADD_REQ;
typedef struct tagTEAM_QUICK_JOIN_REQ
{
    // construct
    tagTEAM_QUICK_JOIN_REQ();
    // operator =
    tagTEAM_QUICK_JOIN_REQ& operator=(const tagTEAM_QUICK_JOIN_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	team_type;
    int	player_level;
} TEAM_QUICK_JOIN_REQ;
typedef struct tagTEAM_JOIN
{
    // construct
    tagTEAM_JOIN();
    // operator =
    tagTEAM_JOIN& operator=(const tagTEAM_JOIN& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	team_id_l;
    unsigned int	team_id_h;
    TEAM_MEMBER	player;
} TEAM_JOIN;
typedef struct tagTEAM_MEMBER_DEL_REQ
{
    // construct
    tagTEAM_MEMBER_DEL_REQ();
    // operator =
    tagTEAM_MEMBER_DEL_REQ& operator=(const tagTEAM_MEMBER_DEL_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} TEAM_MEMBER_DEL_REQ;
typedef struct tagTEAM_MEMBER_DEL_ACK
{
    // construct
    tagTEAM_MEMBER_DEL_ACK();
    // operator =
    tagTEAM_MEMBER_DEL_ACK& operator=(const tagTEAM_MEMBER_DEL_ACK& c);
    // Clear
    void Clear();
    // member
    std::string	src_name;
    std::string	dst_name;
    std::string	leader_name;
} TEAM_MEMBER_DEL_ACK;
typedef struct tagTEAM_FLAG_SET_REQ
{
    // construct
    tagTEAM_FLAG_SET_REQ();
    // operator =
    tagTEAM_FLAG_SET_REQ& operator=(const tagTEAM_FLAG_SET_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	team_flag;
} TEAM_FLAG_SET_REQ;
typedef struct tagTEAM_MEMBER_READY_NTF
{
    // construct
    tagTEAM_MEMBER_READY_NTF();
    // operator =
    tagTEAM_MEMBER_READY_NTF& operator=(const tagTEAM_MEMBER_READY_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned char	team_type;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} TEAM_MEMBER_READY_NTF;
typedef struct tagTEAM_SHOW_INFO
{
    // construct
    tagTEAM_SHOW_INFO();
    // operator =
    tagTEAM_SHOW_INFO& operator=(const tagTEAM_SHOW_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	leader_name;
    char	leader_sex;
    char	leader_career;
    int	leader_level;
    unsigned int	team_id_l;
    unsigned int	team_id_h;
    unsigned char	team_type;
    unsigned int	member_num;
    unsigned int	max_member_num;
} TEAM_SHOW_INFO;
typedef struct tagTEAM_SHOW_LIST_REQ
{
    // construct
    tagTEAM_SHOW_LIST_REQ();
    // operator =
    tagTEAM_SHOW_LIST_REQ& operator=(const tagTEAM_SHOW_LIST_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	team_type;
    unsigned int	page_num;
} TEAM_SHOW_LIST_REQ;
typedef struct tagTEAM_SHOW_LIST_ACK
{
    // construct
    tagTEAM_SHOW_LIST_ACK();
    // operator =
    tagTEAM_SHOW_LIST_ACK& operator=(const tagTEAM_SHOW_LIST_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	curr_page_num;
    unsigned int	total_page_num;
    std::vector<TEAM_INFO>	team_list;
} TEAM_SHOW_LIST_ACK;
typedef struct tagTEAM_DUNGEON_END_NTF
{
    // construct
    tagTEAM_DUNGEON_END_NTF();
    // operator =
    tagTEAM_DUNGEON_END_NTF& operator=(const tagTEAM_DUNGEON_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned int	dungeon_id;
    REWARD_TABLE	reward_table;
} TEAM_DUNGEON_END_NTF;
typedef struct tagTEAM_MEMBER_DAMAGE_INFO
{
    // construct
    tagTEAM_MEMBER_DAMAGE_INFO();
    // operator =
    tagTEAM_MEMBER_DAMAGE_INFO& operator=(const tagTEAM_MEMBER_DAMAGE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	rank;
    std::string	name;
    unsigned int	damage;
    int	level;
} TEAM_MEMBER_DAMAGE_INFO;
typedef struct tagTEAM_DUNGEON_DAMAGE_LIST
{
    // construct
    tagTEAM_DUNGEON_DAMAGE_LIST();
    // operator =
    tagTEAM_DUNGEON_DAMAGE_LIST& operator=(const tagTEAM_DUNGEON_DAMAGE_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<TEAM_MEMBER_DAMAGE_INFO>	damage_list;
} TEAM_DUNGEON_DAMAGE_LIST;
typedef struct tagTEAM_FLY_REQ
{
    // construct
    tagTEAM_FLY_REQ();
    // operator =
    tagTEAM_FLY_REQ& operator=(const tagTEAM_FLY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	dst_player_id_h;
    unsigned int	dst_player_id_l;
} TEAM_FLY_REQ;
typedef struct tagTEAM_MEMBER_ENTER_NTF
{
    // construct
    tagTEAM_MEMBER_ENTER_NTF();
    // operator =
    tagTEAM_MEMBER_ENTER_NTF& operator=(const tagTEAM_MEMBER_ENTER_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_h;
    unsigned int	player_id_l;
    std::string	player_name;
    int	delta_difficult_level;
} TEAM_MEMBER_ENTER_NTF;
typedef struct tagTEAM_MEMBER_LEAVE_NTF
{
    // construct
    tagTEAM_MEMBER_LEAVE_NTF();
    // operator =
    tagTEAM_MEMBER_LEAVE_NTF& operator=(const tagTEAM_MEMBER_LEAVE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_h;
    unsigned int	player_id_l;
    std::string	player_name;
    int	delta_difficult_level;
} TEAM_MEMBER_LEAVE_NTF;
typedef struct tagCROSS_TEAM_MEMBER
{
    // construct
    tagCROSS_TEAM_MEMBER();
    // operator =
    tagCROSS_TEAM_MEMBER& operator=(const tagCROSS_TEAM_MEMBER& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    unsigned char	is_offline;
    unsigned char	is_ready;
    std::string	name;
    char	sex;
    char	career;
    int	level;
    int	battle_power;
} CROSS_TEAM_MEMBER;
typedef struct tagCROSS_TEAM_INFO
{
    // construct
    tagCROSS_TEAM_INFO();
    // operator =
    tagCROSS_TEAM_INFO& operator=(const tagCROSS_TEAM_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    unsigned int	team_id_l;
    unsigned int	team_id_h;
    unsigned char	team_type;
    unsigned char	team_flag;
    unsigned int	dungeon_id;
    unsigned int	channel_id;
    int	team_level;
    unsigned int	max_member_num;
    std::vector<CROSS_TEAM_MEMBER>	member_list;
} CROSS_TEAM_INFO;
typedef struct tagCROSS_TEAM_CREATE_REQ
{
    // construct
    tagCROSS_TEAM_CREATE_REQ();
    // operator =
    tagCROSS_TEAM_CREATE_REQ& operator=(const tagCROSS_TEAM_CREATE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned int	dungeon_id;
    int	team_level;
    CROSS_TEAM_MEMBER	leader;
} CROSS_TEAM_CREATE_REQ;
typedef struct tagCROSS_TEAM_INFO_REQ
{
    // construct
    tagCROSS_TEAM_INFO_REQ();
    // operator =
    tagCROSS_TEAM_INFO_REQ& operator=(const tagCROSS_TEAM_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
} CROSS_TEAM_INFO_REQ;
typedef struct tagCROSS_TEAM_SHOW_LIST_REQ
{
    // construct
    tagCROSS_TEAM_SHOW_LIST_REQ();
    // operator =
    tagCROSS_TEAM_SHOW_LIST_REQ& operator=(const tagCROSS_TEAM_SHOW_LIST_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned char	team_type;
    unsigned int	page_num;
} CROSS_TEAM_SHOW_LIST_REQ;
typedef struct tagCROSS_TEAM_SHOW_INFO
{
    // construct
    tagCROSS_TEAM_SHOW_INFO();
    // operator =
    tagCROSS_TEAM_SHOW_INFO& operator=(const tagCROSS_TEAM_SHOW_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	leader_name;
    char	leader_sex;
    char	leader_career;
    int	leader_level;
    unsigned int	team_id_l;
    unsigned int	team_id_h;
    unsigned char	team_type;
    unsigned int	member_num;
    unsigned int	dungeon_id;
    unsigned int	max_member_num;
} CROSS_TEAM_SHOW_INFO;
typedef struct tagCROSS_TEAM_MEMBER_DEL_REQ
{
    // construct
    tagCROSS_TEAM_MEMBER_DEL_REQ();
    // operator =
    tagCROSS_TEAM_MEMBER_DEL_REQ& operator=(const tagCROSS_TEAM_MEMBER_DEL_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} CROSS_TEAM_MEMBER_DEL_REQ;
typedef struct tagCROSS_TEAM_MEMBER_DEL_ACK
{
    // construct
    tagCROSS_TEAM_MEMBER_DEL_ACK();
    // operator =
    tagCROSS_TEAM_MEMBER_DEL_ACK& operator=(const tagCROSS_TEAM_MEMBER_DEL_ACK& c);
    // Clear
    void Clear();
    // member
    std::string	src_name;
    std::string	dst_name;
    std::string	leader_name;
} CROSS_TEAM_MEMBER_DEL_ACK;
typedef struct tagCROSS_TEAM_MEMBER_ADD_REQ
{
    // construct
    tagCROSS_TEAM_MEMBER_ADD_REQ();
    // operator =
    tagCROSS_TEAM_MEMBER_ADD_REQ& operator=(const tagCROSS_TEAM_MEMBER_ADD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	team_id_l;
    unsigned int	team_id_h;
    unsigned int	src_gate_id;
    BIGINT_ID	src_player_id;
    std::string	src_name;
    std::string	dst_name;
} CROSS_TEAM_MEMBER_ADD_REQ;
typedef struct tagCROSS_TEAM_QUICK_JOIN_REQ
{
    // construct
    tagCROSS_TEAM_QUICK_JOIN_REQ();
    // operator =
    tagCROSS_TEAM_QUICK_JOIN_REQ& operator=(const tagCROSS_TEAM_QUICK_JOIN_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned char	team_type;
    int	player_level;
    std::string	player_name;
    CROSS_TEAM_MEMBER	member;
} CROSS_TEAM_QUICK_JOIN_REQ;
typedef struct tagCROSS_TEAM_MEMBER_ADD_ACK
{
    // construct
    tagCROSS_TEAM_MEMBER_ADD_ACK();
    // operator =
    tagCROSS_TEAM_MEMBER_ADD_ACK& operator=(const tagCROSS_TEAM_MEMBER_ADD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	team_id_l;
    unsigned int	team_id_h;
    unsigned int	src_gate_id;
    std::string	src_name;
    std::string	dst_name;
    CROSS_TEAM_MEMBER	member;
} CROSS_TEAM_MEMBER_ADD_ACK;
typedef struct tagCROSS_TEAM_MEMBER_READY_NTF
{
    // construct
    tagCROSS_TEAM_MEMBER_READY_NTF();
    // operator =
    tagCROSS_TEAM_MEMBER_READY_NTF& operator=(const tagCROSS_TEAM_MEMBER_READY_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	gatesvr_id;
    unsigned char	team_type;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} CROSS_TEAM_MEMBER_READY_NTF;
typedef struct tagCROSS_TEAM_DUNGEON_SCORE_INFO_REQ
{
    // construct
    tagCROSS_TEAM_DUNGEON_SCORE_INFO_REQ();
    // operator =
    tagCROSS_TEAM_DUNGEON_SCORE_INFO_REQ& operator=(const tagCROSS_TEAM_DUNGEON_SCORE_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
} CROSS_TEAM_DUNGEON_SCORE_INFO_REQ;
typedef struct tagCROSS_TEAM_DUNGEON_SCORE_INFO_LIST
{
    // construct
    tagCROSS_TEAM_DUNGEON_SCORE_INFO_LIST();
    // operator =
    tagCROSS_TEAM_DUNGEON_SCORE_INFO_LIST& operator=(const tagCROSS_TEAM_DUNGEON_SCORE_INFO_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    std::vector<DUNGEON_SCORE_INFO>	dungeon_list;
} CROSS_TEAM_DUNGEON_SCORE_INFO_LIST;
typedef struct tagMAIL_INFO
{
    // construct
    tagMAIL_INFO();
    // operator =
    tagMAIL_INFO& operator=(const tagMAIL_INFO& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	mail_id;
    BIGINT_ID	receiver_id;
    BIGINT_ID	sender_id;
    std::string	sender_name;
    unsigned int	send_time;
    unsigned char	mail_type;
    unsigned char	mail_flag;
    std::string	title;
    std::string	message;
    unsigned char	attachment_flag;
    std::vector<REWARD_ITEM>	attachment_list;
} MAIL_INFO;
typedef struct tagMAIL_SYSTEM_INFO
{
    // construct
    tagMAIL_SYSTEM_INFO();
    // operator =
    tagMAIL_SYSTEM_INFO& operator=(const tagMAIL_SYSTEM_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<MAIL_INFO>	player_mail_list;
    std::vector<MAIL_INFO>	system_mail_list;
} MAIL_SYSTEM_INFO;
typedef struct tagMAIL_OPT_REQ
{
    // construct
    tagMAIL_OPT_REQ();
    // operator =
    tagMAIL_OPT_REQ& operator=(const tagMAIL_OPT_REQ& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	mail_id;
    unsigned char	mail_type;
    unsigned char	mail_flag;
    unsigned int	attach_flag;
} MAIL_OPT_REQ;
typedef struct tagMAIL_GET_ATTACH
{
    // construct
    tagMAIL_GET_ATTACH();
    // operator =
    tagMAIL_GET_ATTACH& operator=(const tagMAIL_GET_ATTACH& c);
    // Clear
    void Clear();
    // member
    unsigned int	mail_id_h;
    unsigned int	mail_id_l;
} MAIL_GET_ATTACH;
typedef struct tagMAIL_SEND_REQ
{
    // construct
    tagMAIL_SEND_REQ();
    // operator =
    tagMAIL_SEND_REQ& operator=(const tagMAIL_SEND_REQ& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	mail_id;
    BIGINT_ID	receiver_id;
    std::string	receiver_name;
    BIGINT_ID	sender_id;
    std::string	sender_name;
    BIGINT_ID	trade_order_id;
    unsigned int	send_time;
    unsigned char	mail_type;
    unsigned char	mail_flag;
    std::string	title;
    std::string	message;
    unsigned char	attachment_flag;
    std::vector<REWARD_ITEM>	attachment_list;
    std::string	receiver_condition;
} MAIL_SEND_REQ;
typedef struct tagMAIL_DEL_EXPIRED_MAIL_NTF
{
    // construct
    tagMAIL_DEL_EXPIRED_MAIL_NTF();
    // operator =
    tagMAIL_DEL_EXPIRED_MAIL_NTF& operator=(const tagMAIL_DEL_EXPIRED_MAIL_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	mail_id_h;
} MAIL_DEL_EXPIRED_MAIL_NTF;
typedef struct tagBABEL_START_REQ
{
    // construct
    tagBABEL_START_REQ();
    // operator =
    tagBABEL_START_REQ& operator=(const tagBABEL_START_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	tier;
    unsigned int	stage;
    unsigned char	is_auto;
} BABEL_START_REQ;
typedef struct tagBABEL_START_ACK
{
    // construct
    tagBABEL_START_ACK();
    // operator =
    tagBABEL_START_ACK& operator=(const tagBABEL_START_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	tier;
    unsigned int	stage;
    unsigned char	is_auto;
} BABEL_START_ACK;
typedef struct tagBABEL_RESET_ACK
{
    // construct
    tagBABEL_RESET_ACK();
    // operator =
    tagBABEL_RESET_ACK& operator=(const tagBABEL_RESET_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	reset;
    unsigned char	is_ok;
} BABEL_RESET_ACK;
typedef struct tagBABEL_RAIDS_ACK
{
    // construct
    tagBABEL_RAIDS_ACK();
    // operator =
    tagBABEL_RAIDS_ACK& operator=(const tagBABEL_RAIDS_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	tier;
    unsigned int	stage;
} BABEL_RAIDS_ACK;
typedef struct tagBABEL_OPEN_NTF
{
    // construct
    tagBABEL_OPEN_NTF();
    // operator =
    tagBABEL_OPEN_NTF& operator=(const tagBABEL_OPEN_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	tier;
    unsigned int	stage;
} BABEL_OPEN_NTF;
typedef struct tagBABEL_END
{
    // construct
    tagBABEL_END();
    // operator =
    tagBABEL_END& operator=(const tagBABEL_END& c);
    // Clear
    void Clear();
    // member
    unsigned int	tier;
    unsigned int	stage;
    unsigned char	is_pass;
    unsigned char	is_this_stage;
    REWARD_TABLE	rewards;
} BABEL_END;
typedef struct tagBESTOW_REWARD_REQ
{
    // construct
    tagBESTOW_REWARD_REQ();
    // operator =
    tagBESTOW_REWARD_REQ& operator=(const tagBESTOW_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	fixed_reward_num;
} BESTOW_REWARD_REQ;
typedef struct tagONLINE_REWARD_INFO
{
    // construct
    tagONLINE_REWARD_INFO();
    // operator =
    tagONLINE_REWARD_INFO& operator=(const tagONLINE_REWARD_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	online_reward_time;
    unsigned int	online_reward_day;
    unsigned int	online_reward_flag;
    unsigned int	online_level_reward_flag;
    std::vector<REWARD_ITEM>	grow_list;
    unsigned int	level;
    unsigned int	day;
    unsigned int	interval_time;
    unsigned int	grow_reward_num;
    unsigned int	fixed_reward_num;
    int	cirtnum;
    int	open_time;
} ONLINE_REWARD_INFO;
typedef struct tagONLINE_REWARD_INFO_ACK
{
    // construct
    tagONLINE_REWARD_INFO_ACK();
    // operator =
    tagONLINE_REWARD_INFO_ACK& operator=(const tagONLINE_REWARD_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	time;
    ONLINE_REWARD_INFO	online_info;
    unsigned int	finish_time;
} ONLINE_REWARD_INFO_ACK;
typedef struct tagSIGN_INFO
{
    // construct
    tagSIGN_INFO();
    // operator =
    tagSIGN_INFO& operator=(const tagSIGN_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	last_sign_time;
    unsigned int	days;
    unsigned int	sign_refresh_time;
    unsigned int	sign_sheet_refresh_time;
    unsigned int	sign_gain_sheet_idx;
} SIGN_INFO;
typedef struct tagSIGN_ACK
{
    // construct
    tagSIGN_ACK();
    // operator =
    tagSIGN_ACK& operator=(const tagSIGN_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	days;
    unsigned char	isOk;
} SIGN_ACK;
typedef struct tagBH_ADDITION
{
    // construct
    tagBH_ADDITION();
    // operator =
    tagBH_ADDITION& operator=(const tagBH_ADDITION& c);
    // Clear
    void Clear();
    // member
    unsigned int	add_prop;
    int	add_value;
} BH_ADDITION;
typedef struct tagBH_INFO
{
    // construct
    tagBH_INFO();
    // operator =
    tagBH_INFO& operator=(const tagBH_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	today_count;
    unsigned int	is_selected;
    int	cur_type;
    int	pass_type;
    int	pass_stage;
    int	heart_point;
    int	heart_point_sum;
    int	cur_diff;
    std::vector<BH_ADDITION>	addition_list;
} BH_INFO;
typedef struct tagBH_SELECT_TYPE_REQ
{
    // construct
    tagBH_SELECT_TYPE_REQ();
    // operator =
    tagBH_SELECT_TYPE_REQ& operator=(const tagBH_SELECT_TYPE_REQ& c);
    // Clear
    void Clear();
    // member
    int	bh_type;
} BH_SELECT_TYPE_REQ;
typedef struct tagBH_SELECT_TYPE_ACK
{
    // construct
    tagBH_SELECT_TYPE_ACK();
    // operator =
    tagBH_SELECT_TYPE_ACK& operator=(const tagBH_SELECT_TYPE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	bh_type;
} BH_SELECT_TYPE_ACK;
typedef struct tagBH_START_REQ
{
    // construct
    tagBH_START_REQ();
    // operator =
    tagBH_START_REQ& operator=(const tagBH_START_REQ& c);
    // Clear
    void Clear();
    // member
    int	bh_diff;
} BH_START_REQ;
typedef struct tagBH_START_ACK
{
    // construct
    tagBH_START_ACK();
    // operator =
    tagBH_START_ACK& operator=(const tagBH_START_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	bh_diff;
} BH_START_ACK;
typedef struct tagBH_REDEEM_REQ
{
    // construct
    tagBH_REDEEM_REQ();
    // operator =
    tagBH_REDEEM_REQ& operator=(const tagBH_REDEEM_REQ& c);
    // Clear
    void Clear();
    // member
    int	idx;
    int	attr;
    int	heart_point_cost;
} BH_REDEEM_REQ;
typedef struct tagBH_REDEEM_ACK
{
    // construct
    tagBH_REDEEM_ACK();
    // operator =
    tagBH_REDEEM_ACK& operator=(const tagBH_REDEEM_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	idx;
    int	attr;
    int	attr_val;
    int	heart_point_cost;
} BH_REDEEM_ACK;
typedef struct tagBH_REWARD_REQ
{
    // construct
    tagBH_REWARD_REQ();
    // operator =
    tagBH_REWARD_REQ& operator=(const tagBH_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    int	cur_type;
} BH_REWARD_REQ;
typedef struct tagBH_REWARD_ACK
{
    // construct
    tagBH_REWARD_ACK();
    // operator =
    tagBH_REWARD_ACK& operator=(const tagBH_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} BH_REWARD_ACK;
typedef struct tagBH_END
{
    // construct
    tagBH_END();
    // operator =
    tagBH_END& operator=(const tagBH_END& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_win;
    int	heart_point;
} BH_END;
typedef struct tagTEASER_END
{
    // construct
    tagTEASER_END();
    // operator =
    tagTEASER_END& operator=(const tagTEASER_END& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_win;
} TEASER_END;
typedef struct tagAUTO_FIGHT_SETTING_INFO
{
    // construct
    tagAUTO_FIGHT_SETTING_INFO();
    // operator =
    tagAUTO_FIGHT_SETTING_INFO& operator=(const tagAUTO_FIGHT_SETTING_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned short	hp;
    unsigned char	hp_order;
    unsigned short	mp;
    unsigned char	mp_order;
    unsigned char	skills;
    unsigned char	auto_revival;
    unsigned char	auto_fight;
    unsigned char	auto_buy_hp_drug;
    unsigned char	auto_buy_mp_drug;
    unsigned char	auto_buy_attack_drug;
    unsigned char	auto_buy_defence_drug;
    unsigned char	auto_buy_speed_drug;
    unsigned char	auto_use_attack_drug;
    unsigned char	auto_use_defence_drug;
    unsigned char	auto_use_speed_drug;
} AUTO_FIGHT_SETTING_INFO;
typedef struct tagSYSTEM_SETTING_INFO
{
    // construct
    tagSYSTEM_SETTING_INFO();
    // operator =
    tagSYSTEM_SETTING_INFO& operator=(const tagSYSTEM_SETTING_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned short	volume;
    unsigned short	se_volume;
    unsigned short	show_player;
    unsigned short	show_pet;
    unsigned short	show_shadow;
    unsigned short	show_particle;
    unsigned short	mipmap;
    unsigned short	fullscreen;
    unsigned short	ride_pet;
    unsigned short	illumination;
    unsigned short	light;
    unsigned short	quality_state;
    unsigned short	effect_level;
    unsigned short	fog;
    unsigned short	frame;
} SYSTEM_SETTING_INFO;
typedef struct tagPLAYER_SETTING_INFO
{
    // construct
    tagPLAYER_SETTING_INFO();
    // operator =
    tagPLAYER_SETTING_INFO& operator=(const tagPLAYER_SETTING_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned short	hp;
    unsigned short	mp;
} PLAYER_SETTING_INFO;
typedef struct tagAUTOBUY_SETTING_INFO
{
    // construct
    tagAUTOBUY_SETTING_INFO();
    // operator =
    tagAUTOBUY_SETTING_INFO& operator=(const tagAUTOBUY_SETTING_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<int>	autobuyList;
} AUTOBUY_SETTING_INFO;
typedef struct tagVOID_FIELD_SETTING_INFO
{
    // construct
    tagVOID_FIELD_SETTING_INFO();
    // operator =
    tagVOID_FIELD_SETTING_INFO& operator=(const tagVOID_FIELD_SETTING_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned short	auto_use_revival;
    unsigned short	auto_buy_revival;
    unsigned short	current_revival;
    unsigned short	reconnect_on_loss;
} VOID_FIELD_SETTING_INFO;
typedef struct tagAUTO_FIGHT_SETTING_CHANGE_REQ
{
    // construct
    tagAUTO_FIGHT_SETTING_CHANGE_REQ();
    // operator =
    tagAUTO_FIGHT_SETTING_CHANGE_REQ& operator=(const tagAUTO_FIGHT_SETTING_CHANGE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	key;
    unsigned short	value;
} AUTO_FIGHT_SETTING_CHANGE_REQ;
typedef struct tagSYSTEM_SETTING_CHANGE_REQ
{
    // construct
    tagSYSTEM_SETTING_CHANGE_REQ();
    // operator =
    tagSYSTEM_SETTING_CHANGE_REQ& operator=(const tagSYSTEM_SETTING_CHANGE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	key;
    unsigned short	value;
    unsigned short	quality_state;
} SYSTEM_SETTING_CHANGE_REQ;
typedef struct tagPLAYER_SETTING_CHANGE_REQ
{
    // construct
    tagPLAYER_SETTING_CHANGE_REQ();
    // operator =
    tagPLAYER_SETTING_CHANGE_REQ& operator=(const tagPLAYER_SETTING_CHANGE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	key;
    unsigned short	value;
} PLAYER_SETTING_CHANGE_REQ;
typedef struct tagAUTOBUY_SETTING_CHANGE_REQ
{
    // construct
    tagAUTOBUY_SETTING_CHANGE_REQ();
    // operator =
    tagAUTOBUY_SETTING_CHANGE_REQ& operator=(const tagAUTOBUY_SETTING_CHANGE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	key;
    unsigned short	value;
} AUTOBUY_SETTING_CHANGE_REQ;
typedef struct tagVOID_FIELD_SETTING_CHANGE_REQ
{
    // construct
    tagVOID_FIELD_SETTING_CHANGE_REQ();
    // operator =
    tagVOID_FIELD_SETTING_CHANGE_REQ& operator=(const tagVOID_FIELD_SETTING_CHANGE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	key;
    unsigned short	value;
} VOID_FIELD_SETTING_CHANGE_REQ;
typedef struct tagOPEN_DUNGEON_INFO
{
    // construct
    tagOPEN_DUNGEON_INFO();
    // operator =
    tagOPEN_DUNGEON_INFO& operator=(const tagOPEN_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<unsigned int>	open_dungeon_list;
} OPEN_DUNGEON_INFO;
typedef struct tagDUNGEON_CLEAR_RECORD
{
    // construct
    tagDUNGEON_CLEAR_RECORD();
    // operator =
    tagDUNGEON_CLEAR_RECORD& operator=(const tagDUNGEON_CLEAR_RECORD& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
    unsigned char	score;
    unsigned int	exp;
} DUNGEON_CLEAR_RECORD;
typedef struct tagDUNGEON_RECORD
{
    // construct
    tagDUNGEON_RECORD();
    // operator =
    tagDUNGEON_RECORD& operator=(const tagDUNGEON_RECORD& c);
    // Clear
    void Clear();
    // member
    std::vector<DUNGEON_CLEAR_RECORD>	dungeon_record_list;
} DUNGEON_RECORD;
typedef struct tagPLOT_UNIT_DUNGEON_INFO
{
    // construct
    tagPLOT_UNIT_DUNGEON_INFO();
    // operator =
    tagPLOT_UNIT_DUNGEON_INFO& operator=(const tagPLOT_UNIT_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
    unsigned int	dungeon_exp;
} PLOT_UNIT_DUNGEON_INFO;
typedef struct tagSOUL_UNIT_DUNGEON_INFO
{
    // construct
    tagSOUL_UNIT_DUNGEON_INFO();
    // operator =
    tagSOUL_UNIT_DUNGEON_INFO& operator=(const tagSOUL_UNIT_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
} SOUL_UNIT_DUNGEON_INFO;
typedef struct tagDAILY_UNIT_DUNGEON_INFO
{
    // construct
    tagDAILY_UNIT_DUNGEON_INFO();
    // operator =
    tagDAILY_UNIT_DUNGEON_INFO& operator=(const tagDAILY_UNIT_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
} DAILY_UNIT_DUNGEON_INFO;
typedef struct tagGUILD_WELFARE_INFO
{
    // construct
    tagGUILD_WELFARE_INFO();
    // operator =
    tagGUILD_WELFARE_INFO& operator=(const tagGUILD_WELFARE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	reward_welfare_time;
    unsigned int	reward_turntalbe_time;
    int	member_turntable_buy_times;
    std::vector<unsigned int>	turntable_item_list;
} GUILD_WELFARE_INFO;
typedef struct tagMEMBER_PROP_NTF
{
    // construct
    tagMEMBER_PROP_NTF();
    // operator =
    tagMEMBER_PROP_NTF& operator=(const tagMEMBER_PROP_NTF& c);
    // Clear
    void Clear();
    // member
    int	level;
    int	battle_power;
    unsigned int	dungeon_id;
} MEMBER_PROP_NTF;
typedef struct tagGUILD_UPDATE_INFO
{
    // construct
    tagGUILD_UPDATE_INFO();
    // operator =
    tagGUILD_UPDATE_INFO& operator=(const tagGUILD_UPDATE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	guild_id;
} GUILD_UPDATE_INFO;
typedef struct tagGUILD_PLAYER_ADDITION
{
    // construct
    tagGUILD_PLAYER_ADDITION();
    // operator =
    tagGUILD_PLAYER_ADDITION& operator=(const tagGUILD_PLAYER_ADDITION& c);
    // Clear
    void Clear();
    // member
    int	id;
    int	promote_time_gamepoint;
    int	promote_time_moneypoint;
} GUILD_PLAYER_ADDITION;
typedef struct tagGUILD_ADDITION
{
    // construct
    tagGUILD_ADDITION();
    // operator =
    tagGUILD_ADDITION& operator=(const tagGUILD_ADDITION& c);
    // Clear
    void Clear();
    // member
    int	id;
    int	level;
    int	exp;
    int	promote_count_gamepoint;
    int	promote_count_moneypoint;
} GUILD_ADDITION;
typedef struct tagCREATE_GUILD_REQ
{
    // construct
    tagCREATE_GUILD_REQ();
    // operator =
    tagCREATE_GUILD_REQ& operator=(const tagCREATE_GUILD_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	guild_name;
} CREATE_GUILD_REQ;
typedef struct tagVIEW_GUILD_INFO_REQ
{
    // construct
    tagVIEW_GUILD_INFO_REQ();
    // operator =
    tagVIEW_GUILD_INFO_REQ& operator=(const tagVIEW_GUILD_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	guild_name;
} VIEW_GUILD_INFO_REQ;
typedef struct tagGUILD_BRIEF_INFO
{
    // construct
    tagGUILD_BRIEF_INFO();
    // operator =
    tagGUILD_BRIEF_INFO& operator=(const tagGUILD_BRIEF_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	guild_id_h;
    unsigned int	guild_id_l;
    std::string	guild_name;
    int	level;
    unsigned char	flag;
    int	member_count;
    int	battle_power;
} GUILD_BRIEF_INFO;
typedef struct tagGUILD_LIST_REQ
{
    // construct
    tagGUILD_LIST_REQ();
    // operator =
    tagGUILD_LIST_REQ& operator=(const tagGUILD_LIST_REQ& c);
    // Clear
    void Clear();
    // member
    int	page;
} GUILD_LIST_REQ;
typedef struct tagGUILD_LIST_ACK
{
    // construct
    tagGUILD_LIST_ACK();
    // operator =
    tagGUILD_LIST_ACK& operator=(const tagGUILD_LIST_ACK& c);
    // Clear
    void Clear();
    // member
    int	curr_page;
    int	total_page;
    std::vector<GUILD_BRIEF_INFO>	guild_list;
} GUILD_LIST_ACK;
typedef struct tagGUILD_APPLY_INFO
{
    // construct
    tagGUILD_APPLY_INFO();
    // operator =
    tagGUILD_APPLY_INFO& operator=(const tagGUILD_APPLY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_h;
    unsigned int	player_id_l;
    std::string	player_name;
    int	player_level;
    int	player_career;
} GUILD_APPLY_INFO;
typedef struct tagGUILD_APPLY_LIST
{
    // construct
    tagGUILD_APPLY_LIST();
    // operator =
    tagGUILD_APPLY_LIST& operator=(const tagGUILD_APPLY_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<GUILD_APPLY_INFO>	apply_list;
} GUILD_APPLY_LIST;
typedef struct tagINVITE_JOIN_GUILD_REQ
{
    // construct
    tagINVITE_JOIN_GUILD_REQ();
    // operator =
    tagINVITE_JOIN_GUILD_REQ& operator=(const tagINVITE_JOIN_GUILD_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    std::string	inviter_player_name;
    std::string	guild_name;
    unsigned int	guild_id_h;
    unsigned int	guild_id_l;
    BIGINT_ID	inviter_player_id;
    unsigned int	inviter_gate_id;
} INVITE_JOIN_GUILD_REQ;
typedef struct tagINVITE_JOIN_GUILD_ACK
{
    // construct
    tagINVITE_JOIN_GUILD_ACK();
    // operator =
    tagINVITE_JOIN_GUILD_ACK& operator=(const tagINVITE_JOIN_GUILD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	guild_id_h;
    unsigned int	guild_id_l;
    std::string	player_name;
    BIGINT_ID	inviter_player_id;
    unsigned int	inviter_gate_id;
} INVITE_JOIN_GUILD_ACK;
typedef struct tagAPPLY_JOIN_GUILD_REQ
{
    // construct
    tagAPPLY_JOIN_GUILD_REQ();
    // operator =
    tagAPPLY_JOIN_GUILD_REQ& operator=(const tagAPPLY_JOIN_GUILD_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    unsigned int	player_id_h;
    unsigned int	player_id_l;
    std::string	guild_name;
    unsigned int	guild_id_h;
    unsigned int	guild_id_l;
} APPLY_JOIN_GUILD_REQ;
typedef struct tagAPPLY_JOIN_GUILD_ACK
{
    // construct
    tagAPPLY_JOIN_GUILD_ACK();
    // operator =
    tagAPPLY_JOIN_GUILD_ACK& operator=(const tagAPPLY_JOIN_GUILD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	player_id_h;
    unsigned int	player_id_l;
} APPLY_JOIN_GUILD_ACK;
typedef struct tagGUILD_ID_NTF
{
    // construct
    tagGUILD_ID_NTF();
    // operator =
    tagGUILD_ID_NTF& operator=(const tagGUILD_ID_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	guild_id_l;
    unsigned int	guild_id_h;
} GUILD_ID_NTF;
typedef struct tagGUILD_MEMBER_DEL_REQ
{
    // construct
    tagGUILD_MEMBER_DEL_REQ();
    // operator =
    tagGUILD_MEMBER_DEL_REQ& operator=(const tagGUILD_MEMBER_DEL_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_h;
    unsigned int	player_id_l;
} GUILD_MEMBER_DEL_REQ;
typedef struct tagGUILD_SET_OFFICE_REQ
{
    // construct
    tagGUILD_SET_OFFICE_REQ();
    // operator =
    tagGUILD_SET_OFFICE_REQ& operator=(const tagGUILD_SET_OFFICE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	player_id_h;
    unsigned int	player_id_l;
    int	office;
} GUILD_SET_OFFICE_REQ;
typedef struct tagGUILD_SET_FLAG_REQ
{
    // construct
    tagGUILD_SET_FLAG_REQ();
    // operator =
    tagGUILD_SET_FLAG_REQ& operator=(const tagGUILD_SET_FLAG_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	guild_flag;
} GUILD_SET_FLAG_REQ;
typedef struct tagGUILD_DONATE_REQ
{
    // construct
    tagGUILD_DONATE_REQ();
    // operator =
    tagGUILD_DONATE_REQ& operator=(const tagGUILD_DONATE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	donate_type;
    int	donate_value;
    int	donate_back_guild_point;
} GUILD_DONATE_REQ;
typedef struct tagGUILD_DONATE_ACK
{
    // construct
    tagGUILD_DONATE_ACK();
    // operator =
    tagGUILD_DONATE_ACK& operator=(const tagGUILD_DONATE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    int	donate_game_point;
    int	donate_back_guild_point;
} GUILD_DONATE_ACK;
typedef struct tagGUILD_ADD_GUILDPOINT_NTF
{
    // construct
    tagGUILD_ADD_GUILDPOINT_NTF();
    // operator =
    tagGUILD_ADD_GUILDPOINT_NTF& operator=(const tagGUILD_ADD_GUILDPOINT_NTF& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	player_id;
    int	guild_point;
} GUILD_ADD_GUILDPOINT_NTF;
typedef struct tagGUILD_ADDITION_PROMOTE_REQ
{
    // construct
    tagGUILD_ADDITION_PROMOTE_REQ();
    // operator =
    tagGUILD_ADDITION_PROMOTE_REQ& operator=(const tagGUILD_ADDITION_PROMOTE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	addition_id;
    int	cost_type;
} GUILD_ADDITION_PROMOTE_REQ;
typedef struct tagGUILD_ADDITION_PROMOTE_ACK
{
    // construct
    tagGUILD_ADDITION_PROMOTE_ACK();
    // operator =
    tagGUILD_ADDITION_PROMOTE_ACK& operator=(const tagGUILD_ADDITION_PROMOTE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned short	addition_id;
    int	exp;
    int	level;
    int	gamepoint_count;
    int	moneypoint_count;
} GUILD_ADDITION_PROMOTE_ACK;
typedef struct tagGUILD_ADDITION_PROMOTE_TO_CENTER
{
    // construct
    tagGUILD_ADDITION_PROMOTE_TO_CENTER();
    // operator =
    tagGUILD_ADDITION_PROMOTE_TO_CENTER& operator=(const tagGUILD_ADDITION_PROMOTE_TO_CENTER& c);
    // Clear
    void Clear();
    // member
    unsigned short	addition_id;
    int	cost_type;
    int	times;
    int	point_num;
} GUILD_ADDITION_PROMOTE_TO_CENTER;
typedef struct tagGUILD_ADDITION_PROMOTE_TO_GAME
{
    // construct
    tagGUILD_ADDITION_PROMOTE_TO_GAME();
    // operator =
    tagGUILD_ADDITION_PROMOTE_TO_GAME& operator=(const tagGUILD_ADDITION_PROMOTE_TO_GAME& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned short	addition_id;
    int	cost_type;
    int	times;
    int	point_num;
} GUILD_ADDITION_PROMOTE_TO_GAME;
typedef struct tagGUILD_PLAYER_SCIENCE_INFO
{
    // construct
    tagGUILD_PLAYER_SCIENCE_INFO();
    // operator =
    tagGUILD_PLAYER_SCIENCE_INFO& operator=(const tagGUILD_PLAYER_SCIENCE_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<GUILD_PLAYER_ADDITION>	guild_player_addition_list;
} GUILD_PLAYER_SCIENCE_INFO;
typedef struct tagGUILD_SCIENCE_INFO
{
    // construct
    tagGUILD_SCIENCE_INFO();
    // operator =
    tagGUILD_SCIENCE_INFO& operator=(const tagGUILD_SCIENCE_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<GUILD_ADDITION>	guild_addition;
} GUILD_SCIENCE_INFO;
typedef struct tagGUILD_SET_BULLETIN_REQ
{
    // construct
    tagGUILD_SET_BULLETIN_REQ();
    // operator =
    tagGUILD_SET_BULLETIN_REQ& operator=(const tagGUILD_SET_BULLETIN_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	bulletin;
} GUILD_SET_BULLETIN_REQ;
typedef struct tagGUILD_BUY_REQ
{
    // construct
    tagGUILD_BUY_REQ();
    // operator =
    tagGUILD_BUY_REQ& operator=(const tagGUILD_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	item_id;
    unsigned int	item_num;
} GUILD_BUY_REQ;
typedef struct tagGUILD_BOSS_COUNTDOWN
{
    // construct
    tagGUILD_BOSS_COUNTDOWN();
    // operator =
    tagGUILD_BOSS_COUNTDOWN& operator=(const tagGUILD_BOSS_COUNTDOWN& c);
    // Clear
    void Clear();
    // member
    unsigned char	flag;
    unsigned int	time;
} GUILD_BOSS_COUNTDOWN;
typedef struct tagGUILD_BOSS_SET_TIME_REQ
{
    // construct
    tagGUILD_BOSS_SET_TIME_REQ();
    // operator =
    tagGUILD_BOSS_SET_TIME_REQ& operator=(const tagGUILD_BOSS_SET_TIME_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	start_time;
} GUILD_BOSS_SET_TIME_REQ;
typedef struct tagGUILD_CRUSADE_BOSS_END_NTF
{
    // construct
    tagGUILD_CRUSADE_BOSS_END_NTF();
    // operator =
    tagGUILD_CRUSADE_BOSS_END_NTF& operator=(const tagGUILD_CRUSADE_BOSS_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned int	boss_id;
    REWARD_TABLE	reward_table;
} GUILD_CRUSADE_BOSS_END_NTF;
typedef struct tagGUILD_CRUSADE_BOSS_TIME
{
    // construct
    tagGUILD_CRUSADE_BOSS_TIME();
    // operator =
    tagGUILD_CRUSADE_BOSS_TIME& operator=(const tagGUILD_CRUSADE_BOSS_TIME& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	guild_id;
    int	flag;
} GUILD_CRUSADE_BOSS_TIME;
typedef struct tagGUILD_BOSS_DAMAGE_INFO
{
    // construct
    tagGUILD_BOSS_DAMAGE_INFO();
    // operator =
    tagGUILD_BOSS_DAMAGE_INFO& operator=(const tagGUILD_BOSS_DAMAGE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	rank;
    std::string	name;
    unsigned int	damage;
    int	level;
} GUILD_BOSS_DAMAGE_INFO;
typedef struct tagGUILD_CRUSADE_BOSS_RANK_ACK
{
    // construct
    tagGUILD_CRUSADE_BOSS_RANK_ACK();
    // operator =
    tagGUILD_CRUSADE_BOSS_RANK_ACK& operator=(const tagGUILD_CRUSADE_BOSS_RANK_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	countdown;
} GUILD_CRUSADE_BOSS_RANK_ACK;
typedef struct tagGUILD_DAMAGE_RANK_LIST
{
    // construct
    tagGUILD_DAMAGE_RANK_LIST();
    // operator =
    tagGUILD_DAMAGE_RANK_LIST& operator=(const tagGUILD_DAMAGE_RANK_LIST& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	guild_id;
    std::vector<GUILD_BOSS_DAMAGE_INFO>	damage_list;
} GUILD_DAMAGE_RANK_LIST;
typedef struct tagGUILD_TWILIGHT_WAR_BATTLEFIELD_NTF
{
    // construct
    tagGUILD_TWILIGHT_WAR_BATTLEFIELD_NTF();
    // operator =
    tagGUILD_TWILIGHT_WAR_BATTLEFIELD_NTF& operator=(const tagGUILD_TWILIGHT_WAR_BATTLEFIELD_NTF& c);
    // Clear
    void Clear();
    // member
    int	flag;
    BIGINT_ID	guild_id_a;
    std::string	guild_name_a;
    std::string	name_a;
    BIGINT_ID	guild_id_b;
    std::string	guild_name_b;
    std::string	name_b;
} GUILD_TWILIGHT_WAR_BATTLEFIELD_NTF;
typedef struct tagGUILD_TWILIGHT_WAR_END_NTF
{
    // construct
    tagGUILD_TWILIGHT_WAR_END_NTF();
    // operator =
    tagGUILD_TWILIGHT_WAR_END_NTF& operator=(const tagGUILD_TWILIGHT_WAR_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    std::string	guild_name;
    unsigned int	boss_id;
    unsigned int	damage;
    unsigned int	rank;
    REWARD_TABLE	reward_table;
} GUILD_TWILIGHT_WAR_END_NTF;
typedef struct tagCITY_FIGHT_ENTER_REQ
{
    // construct
    tagCITY_FIGHT_ENTER_REQ();
    // operator =
    tagCITY_FIGHT_ENTER_REQ& operator=(const tagCITY_FIGHT_ENTER_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	city_id;
} CITY_FIGHT_ENTER_REQ;
typedef struct tagCITY_FIGHT_ENTER_ACK
{
    // construct
    tagCITY_FIGHT_ENTER_ACK();
    // operator =
    tagCITY_FIGHT_ENTER_ACK& operator=(const tagCITY_FIGHT_ENTER_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned int	city_id;
} CITY_FIGHT_ENTER_ACK;
typedef struct tagCITY_FIGHT_REWARD_REQ
{
    // construct
    tagCITY_FIGHT_REWARD_REQ();
    // operator =
    tagCITY_FIGHT_REWARD_REQ& operator=(const tagCITY_FIGHT_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	city_id;
} CITY_FIGHT_REWARD_REQ;
typedef struct tagCITY_FIGHT_REWARD_ACK
{
    // construct
    tagCITY_FIGHT_REWARD_ACK();
    // operator =
    tagCITY_FIGHT_REWARD_ACK& operator=(const tagCITY_FIGHT_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
    unsigned short	city_id;
} CITY_FIGHT_REWARD_ACK;
typedef struct tagCITY_FIGHT_GUILD_SCORE
{
    // construct
    tagCITY_FIGHT_GUILD_SCORE();
    // operator =
    tagCITY_FIGHT_GUILD_SCORE& operator=(const tagCITY_FIGHT_GUILD_SCORE& c);
    // Clear
    void Clear();
    // member
    std::string	guild_name;
    int	score;
} CITY_FIGHT_GUILD_SCORE;
typedef struct tagCITY_FIGHT_CITY_INFO
{
    // construct
    tagCITY_FIGHT_CITY_INFO();
    // operator =
    tagCITY_FIGHT_CITY_INFO& operator=(const tagCITY_FIGHT_CITY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	city_id;
    unsigned char	flag;
    unsigned char	reward_flag;
    std::string	guild_name;
    unsigned int	total_guild_num;
    std::vector<CITY_FIGHT_GUILD_SCORE>	rank_list;
} CITY_FIGHT_CITY_INFO;
typedef struct tagCITY_FIGHT_ALL_CITY_INFO
{
    // construct
    tagCITY_FIGHT_ALL_CITY_INFO();
    // operator =
    tagCITY_FIGHT_ALL_CITY_INFO& operator=(const tagCITY_FIGHT_ALL_CITY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	open;
    std::vector<CITY_FIGHT_CITY_INFO>	city_list;
} CITY_FIGHT_ALL_CITY_INFO;
typedef struct tagCITY_FIGHT_CITY_OCCUPY_NTF
{
    // construct
    tagCITY_FIGHT_CITY_OCCUPY_NTF();
    // operator =
    tagCITY_FIGHT_CITY_OCCUPY_NTF& operator=(const tagCITY_FIGHT_CITY_OCCUPY_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	city_id;
    unsigned char	result;
    REWARD_TABLE	reward_table;
} CITY_FIGHT_CITY_OCCUPY_NTF;
typedef struct tagCITY_FIGHT_ONE_CITY_INFO
{
    // construct
    tagCITY_FIGHT_ONE_CITY_INFO();
    // operator =
    tagCITY_FIGHT_ONE_CITY_INFO& operator=(const tagCITY_FIGHT_ONE_CITY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	city_id;
    unsigned int	timestamp;
} CITY_FIGHT_ONE_CITY_INFO;
typedef struct tagCITY_FIGHT_PLAYER_INFO
{
    // construct
    tagCITY_FIGHT_PLAYER_INFO();
    // operator =
    tagCITY_FIGHT_PLAYER_INFO& operator=(const tagCITY_FIGHT_PLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<CITY_FIGHT_ONE_CITY_INFO>	city_list;
} CITY_FIGHT_PLAYER_INFO;
typedef struct tagCITY_FIGHT_ONE_CITY_NTF
{
    // construct
    tagCITY_FIGHT_ONE_CITY_NTF();
    // operator =
    tagCITY_FIGHT_ONE_CITY_NTF& operator=(const tagCITY_FIGHT_ONE_CITY_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	city_id;
    unsigned char	flag;
    std::string	guild_name;
    unsigned int	timestamp;
    std::vector<CITY_FIGHT_GUILD_SCORE>	guild_list;
} CITY_FIGHT_ONE_CITY_NTF;
typedef struct tagCITY_FIGHT_INFO_NTF
{
    // construct
    tagCITY_FIGHT_INFO_NTF();
    // operator =
    tagCITY_FIGHT_INFO_NTF& operator=(const tagCITY_FIGHT_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	open;
    unsigned char	save_in_db;
    std::vector<CITY_FIGHT_ONE_CITY_NTF>	city_list;
} CITY_FIGHT_INFO_NTF;
typedef struct tagCITY_SURVIVAL_INFO
{
    // construct
    tagCITY_SURVIVAL_INFO();
    // operator =
    tagCITY_SURVIVAL_INFO& operator=(const tagCITY_SURVIVAL_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	open;
} CITY_SURVIVAL_INFO;
typedef struct tagCITY_SURVIVAL_RANK_INFO
{
    // construct
    tagCITY_SURVIVAL_RANK_INFO();
    // operator =
    tagCITY_SURVIVAL_RANK_INFO& operator=(const tagCITY_SURVIVAL_RANK_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank;
    std::string	name;
    unsigned int	kill_num;
} CITY_SURVIVAL_RANK_INFO;
typedef struct tagCITY_SURVIVAL_RANK_NTF
{
    // construct
    tagCITY_SURVIVAL_RANK_NTF();
    // operator =
    tagCITY_SURVIVAL_RANK_NTF& operator=(const tagCITY_SURVIVAL_RANK_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<CITY_SURVIVAL_RANK_INFO>	rank_list;
} CITY_SURVIVAL_RANK_NTF;
typedef struct tagCITY_SURVIVAL_WAVE_INFO
{
    // construct
    tagCITY_SURVIVAL_WAVE_INFO();
    // operator =
    tagCITY_SURVIVAL_WAVE_INFO& operator=(const tagCITY_SURVIVAL_WAVE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	index;
} CITY_SURVIVAL_WAVE_INFO;
typedef struct tagCITY_SURVIVAL_REWARDS_NTF
{
    // construct
    tagCITY_SURVIVAL_REWARDS_NTF();
    // operator =
    tagCITY_SURVIVAL_REWARDS_NTF& operator=(const tagCITY_SURVIVAL_REWARDS_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	wave_num;
    unsigned int	kill_num;
    REWARD_TABLE	reward_table;
} CITY_SURVIVAL_REWARDS_NTF;
typedef struct tagCITY_SURVIVAL_INFO_NTF
{
    // construct
    tagCITY_SURVIVAL_INFO_NTF();
    // operator =
    tagCITY_SURVIVAL_INFO_NTF& operator=(const tagCITY_SURVIVAL_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<BIGINT_ID>	player_list;
} CITY_SURVIVAL_INFO_NTF;
typedef struct tagWORLD_BOSS_START_NTF
{
    // construct
    tagWORLD_BOSS_START_NTF();
    // operator =
    tagWORLD_BOSS_START_NTF& operator=(const tagWORLD_BOSS_START_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
    unsigned int	boss_id;
} WORLD_BOSS_START_NTF;
typedef struct tagWORLD_BOSS_END_NTF
{
    // construct
    tagWORLD_BOSS_END_NTF();
    // operator =
    tagWORLD_BOSS_END_NTF& operator=(const tagWORLD_BOSS_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
} WORLD_BOSS_END_NTF;
typedef struct tagWORLD_BOSS_DAMAGE_INFO
{
    // construct
    tagWORLD_BOSS_DAMAGE_INFO();
    // operator =
    tagWORLD_BOSS_DAMAGE_INFO& operator=(const tagWORLD_BOSS_DAMAGE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	rank;
    std::string	name;
    unsigned int	damage;
    unsigned int	damage_percent;
} WORLD_BOSS_DAMAGE_INFO;
typedef struct tagWORLD_BOSS_DAMAGE_LIST
{
    // construct
    tagWORLD_BOSS_DAMAGE_LIST();
    // operator =
    tagWORLD_BOSS_DAMAGE_LIST& operator=(const tagWORLD_BOSS_DAMAGE_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<WORLD_BOSS_DAMAGE_INFO>	damage_list;
} WORLD_BOSS_DAMAGE_LIST;
typedef struct tagWORLD_BOSS_CLEAR_NTF
{
    // construct
    tagWORLD_BOSS_CLEAR_NTF();
    // operator =
    tagWORLD_BOSS_CLEAR_NTF& operator=(const tagWORLD_BOSS_CLEAR_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	boss_id;
    unsigned char	succeed;
    unsigned int	damage;
    REWARD_TABLE	reward_table;
    int	rank;
    std::string	last_straw;
} WORLD_BOSS_CLEAR_NTF;
typedef struct tagWORLD_BOSS_KILL_INFO_NTF
{
    // construct
    tagWORLD_BOSS_KILL_INFO_NTF();
    // operator =
    tagWORLD_BOSS_KILL_INFO_NTF& operator=(const tagWORLD_BOSS_KILL_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	boss_kill;
    std::string	first_name;
    REWARD_TABLE	first_reward;
    std::string	second_name;
    REWARD_TABLE	second_reward;
    std::string	third_name;
    REWARD_TABLE	third_reward;
    std::string	last_hit_name;
    REWARD_TABLE	last_hit_reward;
} WORLD_BOSS_KILL_INFO_NTF;
typedef struct tagWORLD_BOSS_INFO
{
    // construct
    tagWORLD_BOSS_INFO();
    // operator =
    tagWORLD_BOSS_INFO& operator=(const tagWORLD_BOSS_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	save_id;
    unsigned int	boss_id;
    int	strong_level;
    unsigned int	dead_time;
} WORLD_BOSS_INFO;
typedef struct tagWORLD_BOSS_INFO_LIST
{
    // construct
    tagWORLD_BOSS_INFO_LIST();
    // operator =
    tagWORLD_BOSS_INFO_LIST& operator=(const tagWORLD_BOSS_INFO_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<WORLD_BOSS_INFO>	boss_list;
} WORLD_BOSS_INFO_LIST;
typedef struct tagVIP_GIFT_REQ
{
    // construct
    tagVIP_GIFT_REQ();
    // operator =
    tagVIP_GIFT_REQ& operator=(const tagVIP_GIFT_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	level;
} VIP_GIFT_REQ;
typedef struct tagVIP_GIFT_ACK
{
    // construct
    tagVIP_GIFT_ACK();
    // operator =
    tagVIP_GIFT_ACK& operator=(const tagVIP_GIFT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	level;
    unsigned short	errcode;
} VIP_GIFT_ACK;
typedef struct tagVIP_INFO
{
    // construct
    tagVIP_INFO();
    // operator =
    tagVIP_INFO& operator=(const tagVIP_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	vip_first_ts;
    unsigned int	vip_ts;
    unsigned char	is_vip;
    unsigned short	vip_card_1_num;
    unsigned short	vip_card_2_num;
    unsigned short	vip_card_3_num;
    unsigned char	is_vip_reward_today;
    unsigned int	vip_gif_flag;
    int	experience_vip_state;
    unsigned int	server_open_time;
    unsigned int	experience_vip_time;
    int	growth_point_no_recharge;
    int	growth_point_recharge;
    int	recharge_count;
} VIP_INFO;
typedef struct tagVIP_BUY_REQ
{
    // construct
    tagVIP_BUY_REQ();
    // operator =
    tagVIP_BUY_REQ& operator=(const tagVIP_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    int	vip_card;
    unsigned short	num;
    std::string	offer_name;
} VIP_BUY_REQ;
typedef struct tagITEM_BUY_REQ
{
    // construct
    tagITEM_BUY_REQ();
    // operator =
    tagITEM_BUY_REQ& operator=(const tagITEM_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    int	num;
    int	type;
} ITEM_BUY_REQ;
typedef struct tagITEM_BUY_ACK
{
    // construct
    tagITEM_BUY_ACK();
    // operator =
    tagITEM_BUY_ACK& operator=(const tagITEM_BUY_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} ITEM_BUY_ACK;
typedef struct tagPRODUCT_INFO
{
    // construct
    tagPRODUCT_INFO();
    // operator =
    tagPRODUCT_INFO& operator=(const tagPRODUCT_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	product_id;
    int	product_num;
    char	money_type;
    int	tag_type;
    int	home_page;
    int	sell_type;
    char	show_flag;
    char	hot_flag;
    char	new_flag;
    char	present_flag;
    unsigned int	item_id;
    int	item_num;
    int	discount;
    int	price;
    int	show_price;
    int	vip_price;
    int	show_vip_price;
    int	again_discount;
    int	again_price;
    int	show_again_price;
    unsigned int	again_start_time;
    unsigned int	again_end_time;
    int	personal_limit_num;
    int	global_limit_num;
    int	global_limit_counter;
    unsigned int	start_time;
    unsigned int	end_time;
} PRODUCT_INFO;
typedef struct tagMALL_LIST
{
    // construct
    tagMALL_LIST();
    // operator =
    tagMALL_LIST& operator=(const tagMALL_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<PRODUCT_INFO>	mall_list;
} MALL_LIST;
typedef struct tagMALL_PRODUCT_REQ
{
    // construct
    tagMALL_PRODUCT_REQ();
    // operator =
    tagMALL_PRODUCT_REQ& operator=(const tagMALL_PRODUCT_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	product_id;
} MALL_PRODUCT_REQ;
typedef struct tagMALL_PRODUCT_ACK
{
    // construct
    tagMALL_PRODUCT_ACK();
    // operator =
    tagMALL_PRODUCT_ACK& operator=(const tagMALL_PRODUCT_ACK& c);
    // Clear
    void Clear();
    // member
    PRODUCT_INFO	product_info;
} MALL_PRODUCT_ACK;
typedef struct tagMALL_BUY_REQ
{
    // construct
    tagMALL_BUY_REQ();
    // operator =
    tagMALL_BUY_REQ& operator=(const tagMALL_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	product_id;
    int	sell_type;
    int	num;
    std::string	receiver_name;
    unsigned char	buy_reason;
} MALL_BUY_REQ;
typedef struct tagMALL_BUY_ACK
{
    // construct
    tagMALL_BUY_ACK();
    // operator =
    tagMALL_BUY_ACK& operator=(const tagMALL_BUY_ACK& c);
    // Clear
    void Clear();
    // member
    PRODUCT_INFO	product_info;
    int	num;
    std::string	receiver_name;
    unsigned char	buy_reason;
} MALL_BUY_ACK;
typedef struct tagMALL_BUY_CFM
{
    // construct
    tagMALL_BUY_CFM();
    // operator =
    tagMALL_BUY_CFM& operator=(const tagMALL_BUY_CFM& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	product_id;
    int	num;
} MALL_BUY_CFM;
typedef struct tagRESTRICTION
{
    // construct
    tagRESTRICTION();
    // operator =
    tagRESTRICTION& operator=(const tagRESTRICTION& c);
    // Clear
    void Clear();
    // member
    int	product_id;
    int	num;
} RESTRICTION;
typedef struct tagRESTRICTION_LIST
{
    // construct
    tagRESTRICTION_LIST();
    // operator =
    tagRESTRICTION_LIST& operator=(const tagRESTRICTION_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<RESTRICTION>	restriction_list;
} RESTRICTION_LIST;
typedef struct tagPLAYER_RECHARGE_RECORDER
{
    // construct
    tagPLAYER_RECHARGE_RECORDER();
    // operator =
    tagPLAYER_RECHARGE_RECORDER& operator=(const tagPLAYER_RECHARGE_RECORDER& c);
    // Clear
    void Clear();
    // member
    int	money_point;
    int	max_single;
    unsigned int	update_time;
} PLAYER_RECHARGE_RECORDER;
typedef struct tagPLAYER_RECHARGE_INFO
{
    // construct
    tagPLAYER_RECHARGE_INFO();
    // operator =
    tagPLAYER_RECHARGE_INFO& operator=(const tagPLAYER_RECHARGE_INFO& c);
    // Clear
    void Clear();
    // member
    PLAYER_RECHARGE_RECORDER	recharge_total;
    std::vector<PLAYER_RECHARGE_RECORDER>	recharge_daily_list;
} PLAYER_RECHARGE_INFO;
typedef struct tagPAY_ORDER_INFO
{
    // construct
    tagPAY_ORDER_INFO();
    // operator =
    tagPAY_ORDER_INFO& operator=(const tagPAY_ORDER_INFO& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	payid;
    BIGINT_ID	player_id;
    unsigned int	item_id;
    int	money_point;
    int	reason;
    int	paystate;
} PAY_ORDER_INFO;
typedef struct tagTRADE_ORDER_INFO
{
    // construct
    tagTRADE_ORDER_INFO();
    // operator =
    tagTRADE_ORDER_INFO& operator=(const tagTRADE_ORDER_INFO& c);
    // Clear
    void Clear();
    // member
    int	err_code;
    BIGINT_ID	order_id;
    int	order_state;
    unsigned int	center_id;
    std::string	buyer_account;
    std::string	buyer_name;
    BIGINT_ID	buyer_id;
    std::string	receiver_account;
    std::string	receiver_name;
    BIGINT_ID	receiver_id;
    int	pay_reason;
    unsigned int	product_id;
    int	product_num;
    int	item_type;
    unsigned int	item_id;
    int	item_num;
    int	unit_price;
    int	total_price;
    int	param_1;
    std::string	ext;
} TRADE_ORDER_INFO;
typedef struct tagTRADE_ORDER_STATE_NTF
{
    // construct
    tagTRADE_ORDER_STATE_NTF();
    // operator =
    tagTRADE_ORDER_STATE_NTF& operator=(const tagTRADE_ORDER_STATE_NTF& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	order_id;
    int	order_state;
} TRADE_ORDER_STATE_NTF;
typedef struct tagTRADE_ORDER_GROWTH_POINT
{
    // construct
    tagTRADE_ORDER_GROWTH_POINT();
    // operator =
    tagTRADE_ORDER_GROWTH_POINT& operator=(const tagTRADE_ORDER_GROWTH_POINT& c);
    // Clear
    void Clear();
    // member
    int	total_price;
} TRADE_ORDER_GROWTH_POINT;
typedef struct tagRANKING_LIST_REQ
{
    // construct
    tagRANKING_LIST_REQ();
    // operator =
    tagRANKING_LIST_REQ& operator=(const tagRANKING_LIST_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank_type;
} RANKING_LIST_REQ;
typedef struct tagRANKING_REFRESH_REQ
{
    // construct
    tagRANKING_REFRESH_REQ();
    // operator =
    tagRANKING_REFRESH_REQ& operator=(const tagRANKING_REFRESH_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank_type;
} RANKING_REFRESH_REQ;
typedef struct tagRANKING_CHANGE_REQ
{
    // construct
    tagRANKING_CHANGE_REQ();
    // operator =
    tagRANKING_CHANGE_REQ& operator=(const tagRANKING_CHANGE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank_type;
    BIGINT_ID	player1;
    BIGINT_ID	player2;
    int	level1;
    int	level2;
} RANKING_CHANGE_REQ;
typedef struct tagRANKING_CHANGE_ACK
{
    // construct
    tagRANKING_CHANGE_ACK();
    // operator =
    tagRANKING_CHANGE_ACK& operator=(const tagRANKING_CHANGE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank_type;
    ERROR_CODE	err_code;
} RANKING_CHANGE_ACK;
typedef struct tagPLAYER_RANK_INFO
{
    // construct
    tagPLAYER_RANK_INFO();
    // operator =
    tagPLAYER_RANK_INFO& operator=(const tagPLAYER_RANK_INFO& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	player_id;
    int	rank;
} PLAYER_RANK_INFO;
typedef struct tagTOP_RANK_INFO
{
    // construct
    tagTOP_RANK_INFO();
    // operator =
    tagTOP_RANK_INFO& operator=(const tagTOP_RANK_INFO& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	player_id;
    int	player_level;
    int	rank;
} TOP_RANK_INFO;
typedef struct tagRANKING_RANK_REQ
{
    // construct
    tagRANKING_RANK_REQ();
    // operator =
    tagRANKING_RANK_REQ& operator=(const tagRANKING_RANK_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	reason;
    unsigned char	rank_type;
    std::vector<BIGINT_ID>	playerList;
} RANKING_RANK_REQ;
typedef struct tagRANKING_RANK_ACK
{
    // construct
    tagRANKING_RANK_ACK();
    // operator =
    tagRANKING_RANK_ACK& operator=(const tagRANKING_RANK_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	reason;
    unsigned char	rank_type;
    std::vector<PLAYER_RANK_INFO>	playerList;
} RANKING_RANK_ACK;
typedef struct tagRANKING_TOP_RANK_NTF
{
    // construct
    tagRANKING_TOP_RANK_NTF();
    // operator =
    tagRANKING_TOP_RANK_NTF& operator=(const tagRANKING_TOP_RANK_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	reason;
    unsigned char	rank_type;
    std::vector<TOP_RANK_INFO>	rankList;
} RANKING_TOP_RANK_NTF;
typedef struct tagRANKING_PLAYER_ID_REQ
{
    // construct
    tagRANKING_PLAYER_ID_REQ();
    // operator =
    tagRANKING_PLAYER_ID_REQ& operator=(const tagRANKING_PLAYER_ID_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	reason;
    unsigned char	rank_type;
    std::vector<int>	rankList;
} RANKING_PLAYER_ID_REQ;
typedef struct tagRANKING_PLAYER_ID_ACK
{
    // construct
    tagRANKING_PLAYER_ID_ACK();
    // operator =
    tagRANKING_PLAYER_ID_ACK& operator=(const tagRANKING_PLAYER_ID_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	reason;
    unsigned char	rank_type;
    std::vector<PLAYER_RANK_INFO>	playerList;
} RANKING_PLAYER_ID_ACK;
typedef struct tagRANKING_INFO_REQ
{
    // construct
    tagRANKING_INFO_REQ();
    // operator =
    tagRANKING_INFO_REQ& operator=(const tagRANKING_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank_type;
} RANKING_INFO_REQ;
typedef struct tagREGULAR_PLAYER_DEAD
{
    // construct
    tagREGULAR_PLAYER_DEAD();
    // operator =
    tagREGULAR_PLAYER_DEAD& operator=(const tagREGULAR_PLAYER_DEAD& c);
    // Clear
    void Clear();
    // member
    unsigned char	regular_type;
    unsigned char	dead_action;
    int	count_down;
} REGULAR_PLAYER_DEAD;
typedef struct tagRESURGENCE_TYPE
{
    // construct
    tagRESURGENCE_TYPE();
    // operator =
    tagRESURGENCE_TYPE& operator=(const tagRESURGENCE_TYPE& c);
    // Clear
    void Clear();
    // member
    unsigned char	resurgence;
} RESURGENCE_TYPE;
typedef struct tagSEND_RESURGENCE
{
    // construct
    tagSEND_RESURGENCE();
    // operator =
    tagSEND_RESURGENCE& operator=(const tagSEND_RESURGENCE& c);
    // Clear
    void Clear();
    // member
    int	resurgence_count;
    int	delay_time;
} SEND_RESURGENCE;
typedef struct tagRESURGENCE_AND_SEND_DEAD
{
    // construct
    tagRESURGENCE_AND_SEND_DEAD();
    // operator =
    tagRESURGENCE_AND_SEND_DEAD& operator=(const tagRESURGENCE_AND_SEND_DEAD& c);
    // Clear
    void Clear();
    // member
    int	trigger_id;
    int	resurgence_count;
    int	delay_time;
} RESURGENCE_AND_SEND_DEAD;
typedef struct tagHONOR_BUY_REQ
{
    // construct
    tagHONOR_BUY_REQ();
    // operator =
    tagHONOR_BUY_REQ& operator=(const tagHONOR_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	item_id;
    unsigned int	item_num;
} HONOR_BUY_REQ;
typedef struct tagBIND_MONEY_POINT_BUY_REQ
{
    // construct
    tagBIND_MONEY_POINT_BUY_REQ();
    // operator =
    tagBIND_MONEY_POINT_BUY_REQ& operator=(const tagBIND_MONEY_POINT_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	item_id;
    unsigned int	item_num;
} BIND_MONEY_POINT_BUY_REQ;
typedef struct tagONE_DAY_INVESTMENT_INFO
{
    // construct
    tagONE_DAY_INVESTMENT_INFO();
    // operator =
    tagONE_DAY_INVESTMENT_INFO& operator=(const tagONE_DAY_INVESTMENT_INFO& c);
    // Clear
    void Clear();
    // member
    int	day;
    unsigned char	status;
} ONE_DAY_INVESTMENT_INFO;
typedef struct tagDAY_INVESTMENT_INFO
{
    // construct
    tagDAY_INVESTMENT_INFO();
    // operator =
    tagDAY_INVESTMENT_INFO& operator=(const tagDAY_INVESTMENT_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	invest_begin_time;
    int	recharge_num;
    std::vector<ONE_DAY_INVESTMENT_INFO>	info_list;
} DAY_INVESTMENT_INFO;
typedef struct tagDAY_INVESTMENT_ACK
{
    // construct
    tagDAY_INVESTMENT_ACK();
    // operator =
    tagDAY_INVESTMENT_ACK& operator=(const tagDAY_INVESTMENT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	need_active_time;
    int	invested_money;
    std::vector<ONE_DAY_INVESTMENT_INFO>	info_list;
} DAY_INVESTMENT_ACK;
typedef struct tagDAY_INVESTMENT_ACCEPT_REWARD_REQ
{
    // construct
    tagDAY_INVESTMENT_ACCEPT_REWARD_REQ();
    // operator =
    tagDAY_INVESTMENT_ACCEPT_REWARD_REQ& operator=(const tagDAY_INVESTMENT_ACCEPT_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    int	day;
} DAY_INVESTMENT_ACCEPT_REWARD_REQ;
typedef struct tagDAY_INVESTMENT_ACCEPT_REWARD_ACK
{
    // construct
    tagDAY_INVESTMENT_ACCEPT_REWARD_ACK();
    // operator =
    tagDAY_INVESTMENT_ACCEPT_REWARD_ACK& operator=(const tagDAY_INVESTMENT_ACCEPT_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	day;
} DAY_INVESTMENT_ACCEPT_REWARD_ACK;
typedef struct tagDAY_INVESTMENT_INFO_ACK
{
    // construct
    tagDAY_INVESTMENT_INFO_ACK();
    // operator =
    tagDAY_INVESTMENT_INFO_ACK& operator=(const tagDAY_INVESTMENT_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    int	invested_money;
    int	need_active_time;
    std::vector<ONE_DAY_INVESTMENT_INFO>	info_list;
} DAY_INVESTMENT_INFO_ACK;
typedef struct tagSAVE_DAY_INVESTMENT_INFO_REQ
{
    // construct
    tagSAVE_DAY_INVESTMENT_INFO_REQ();
    // operator =
    tagSAVE_DAY_INVESTMENT_INFO_REQ& operator=(const tagSAVE_DAY_INVESTMENT_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    DAY_INVESTMENT_INFO	investment_info;
    int	day;
} SAVE_DAY_INVESTMENT_INFO_REQ;
typedef struct tagSAVE_DAY_INVESTMENT_INFO_ACK
{
    // construct
    tagSAVE_DAY_INVESTMENT_INFO_ACK();
    // operator =
    tagSAVE_DAY_INVESTMENT_INFO_ACK& operator=(const tagSAVE_DAY_INVESTMENT_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    int	day;
} SAVE_DAY_INVESTMENT_INFO_ACK;
typedef struct tagONE_LEVEL_INVESTMENT_INFO
{
    // construct
    tagONE_LEVEL_INVESTMENT_INFO();
    // operator =
    tagONE_LEVEL_INVESTMENT_INFO& operator=(const tagONE_LEVEL_INVESTMENT_INFO& c);
    // Clear
    void Clear();
    // member
    int	level;
    unsigned char	status;
} ONE_LEVEL_INVESTMENT_INFO;
typedef struct tagLEVEL_INVESTMENT_INFO
{
    // construct
    tagLEVEL_INVESTMENT_INFO();
    // operator =
    tagLEVEL_INVESTMENT_INFO& operator=(const tagLEVEL_INVESTMENT_INFO& c);
    // Clear
    void Clear();
    // member
    int	invested_money;
    std::vector<ONE_LEVEL_INVESTMENT_INFO>	info_list;
} LEVEL_INVESTMENT_INFO;
typedef struct tagLEVEL_INVESTMENT_REQ
{
    // construct
    tagLEVEL_INVESTMENT_REQ();
    // operator =
    tagLEVEL_INVESTMENT_REQ& operator=(const tagLEVEL_INVESTMENT_REQ& c);
    // Clear
    void Clear();
    // member
    int	invest_money;
} LEVEL_INVESTMENT_REQ;
typedef struct tagLEVEL_INVESTMENT_ACK
{
    // construct
    tagLEVEL_INVESTMENT_ACK();
    // operator =
    tagLEVEL_INVESTMENT_ACK& operator=(const tagLEVEL_INVESTMENT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    LEVEL_INVESTMENT_INFO	investment_info;
} LEVEL_INVESTMENT_ACK;
typedef struct tagLEVEL_INVESTMENT_INFO_ACK
{
    // construct
    tagLEVEL_INVESTMENT_INFO_ACK();
    // operator =
    tagLEVEL_INVESTMENT_INFO_ACK& operator=(const tagLEVEL_INVESTMENT_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    LEVEL_INVESTMENT_INFO	investment_info;
} LEVEL_INVESTMENT_INFO_ACK;
typedef struct tagLEVEL_INVESTMENT_ACCEPT_REWARD_REQ
{
    // construct
    tagLEVEL_INVESTMENT_ACCEPT_REWARD_REQ();
    // operator =
    tagLEVEL_INVESTMENT_ACCEPT_REWARD_REQ& operator=(const tagLEVEL_INVESTMENT_ACCEPT_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    int	level;
} LEVEL_INVESTMENT_ACCEPT_REWARD_REQ;
typedef struct tagLEVEL_INVESTMENT_ACCEPT_REWARD_ACK
{
    // construct
    tagLEVEL_INVESTMENT_ACCEPT_REWARD_ACK();
    // operator =
    tagLEVEL_INVESTMENT_ACCEPT_REWARD_ACK& operator=(const tagLEVEL_INVESTMENT_ACCEPT_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	level;
    int	reward_money;
} LEVEL_INVESTMENT_ACCEPT_REWARD_ACK;
typedef struct tagSAVE_LEVEL_INVESTMENT_INFO_REQ
{
    // construct
    tagSAVE_LEVEL_INVESTMENT_INFO_REQ();
    // operator =
    tagSAVE_LEVEL_INVESTMENT_INFO_REQ& operator=(const tagSAVE_LEVEL_INVESTMENT_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    LEVEL_INVESTMENT_INFO	investment_info;
    int	level;
    int	reward_money;
} SAVE_LEVEL_INVESTMENT_INFO_REQ;
typedef struct tagSAVE_LEVEL_INVESTMENT_INFO_ACK
{
    // construct
    tagSAVE_LEVEL_INVESTMENT_INFO_ACK();
    // operator =
    tagSAVE_LEVEL_INVESTMENT_INFO_ACK& operator=(const tagSAVE_LEVEL_INVESTMENT_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    int	level;
    int	reward_money;
} SAVE_LEVEL_INVESTMENT_INFO_ACK;
typedef struct tagINVESTMENT_OPERATION_REQ
{
    // construct
    tagINVESTMENT_OPERATION_REQ();
    // operator =
    tagINVESTMENT_OPERATION_REQ& operator=(const tagINVESTMENT_OPERATION_REQ& c);
    // Clear
    void Clear();
    // member
    int	count;
} INVESTMENT_OPERATION_REQ;
typedef struct tagINVESTMENT_OPERATION_NTF
{
    // construct
    tagINVESTMENT_OPERATION_NTF();
    // operator =
    tagINVESTMENT_OPERATION_NTF& operator=(const tagINVESTMENT_OPERATION_NTF& c);
    // Clear
    void Clear();
    // member
    std::string	name;
    unsigned char	type;
    unsigned char	operation;
    int	money;
} INVESTMENT_OPERATION_NTF;
typedef struct tagPASSIVE_SKILL_INFO
{
    // construct
    tagPASSIVE_SKILL_INFO();
    // operator =
    tagPASSIVE_SKILL_INFO& operator=(const tagPASSIVE_SKILL_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    int	level;
    unsigned char	unlocked;
} PASSIVE_SKILL_INFO;
typedef struct tagPASSIVE_SKILL_LIST
{
    // construct
    tagPASSIVE_SKILL_LIST();
    // operator =
    tagPASSIVE_SKILL_LIST& operator=(const tagPASSIVE_SKILL_LIST& c);
    // Clear
    void Clear();
    // member
    int	available_points;
    std::vector<PASSIVE_SKILL_INFO>	passive_skill;
} PASSIVE_SKILL_LIST;
typedef struct tagSKILL_ID
{
    // construct
    tagSKILL_ID();
    // operator =
    tagSKILL_ID& operator=(const tagSKILL_ID& c);
    // Clear
    void Clear();
    // member
    unsigned int	skill_id;
} SKILL_ID;
typedef struct tagSPECIAL_ACTIVITY_INFO
{
    // construct
    tagSPECIAL_ACTIVITY_INFO();
    // operator =
    tagSPECIAL_ACTIVITY_INFO& operator=(const tagSPECIAL_ACTIVITY_INFO& c);
    // Clear
    void Clear();
    // member
    int	param1;
    int	param2;
    unsigned char	status;
} SPECIAL_ACTIVITY_INFO;
typedef struct tagSPECIAL_ACTIVITY_INFO_LIST
{
    // construct
    tagSPECIAL_ACTIVITY_INFO_LIST();
    // operator =
    tagSPECIAL_ACTIVITY_INFO_LIST& operator=(const tagSPECIAL_ACTIVITY_INFO_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<SPECIAL_ACTIVITY_INFO>	infos;
} SPECIAL_ACTIVITY_INFO_LIST;
typedef struct tagSAVE_LEVEL_ACTIVITY_INFO_REQ
{
    // construct
    tagSAVE_LEVEL_ACTIVITY_INFO_REQ();
    // operator =
    tagSAVE_LEVEL_ACTIVITY_INFO_REQ& operator=(const tagSAVE_LEVEL_ACTIVITY_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    LEVEL_ACTIVITY_INFO	level_activity_info;
    int	level;
} SAVE_LEVEL_ACTIVITY_INFO_REQ;
typedef struct tagSAVE_LEVEL_ACTIVITY_INFO_ACK
{
    // construct
    tagSAVE_LEVEL_ACTIVITY_INFO_ACK();
    // operator =
    tagSAVE_LEVEL_ACTIVITY_INFO_ACK& operator=(const tagSAVE_LEVEL_ACTIVITY_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    int	level;
} SAVE_LEVEL_ACTIVITY_INFO_ACK;
typedef struct tagSPECIAL_ACTIVITY_RANKING_INFO
{
    // construct
    tagSPECIAL_ACTIVITY_RANKING_INFO();
    // operator =
    tagSPECIAL_ACTIVITY_RANKING_INFO& operator=(const tagSPECIAL_ACTIVITY_RANKING_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	name;
} SPECIAL_ACTIVITY_RANKING_INFO;
typedef struct tagSPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK
{
    // construct
    tagSPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK();
    // operator =
    tagSPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK& operator=(const tagSPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<SPECIAL_ACTIVITY_RANKING_INFO>	ranking_list;
} SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK;
typedef struct tagSPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_INFO
{
    // construct
    tagSPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_INFO();
    // operator =
    tagSPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_INFO& operator=(const tagSPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_INFO& c);
    // Clear
    void Clear();
    // member
    int	time;
} SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_INFO;
typedef struct tagFIRST_TIME_RECHARGE_INFO
{
    // construct
    tagFIRST_TIME_RECHARGE_INFO();
    // operator =
    tagFIRST_TIME_RECHARGE_INFO& operator=(const tagFIRST_TIME_RECHARGE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	start_time;
    unsigned int	end_time;
    unsigned char	status;
    REWARD_TABLE	rewards;
} FIRST_TIME_RECHARGE_INFO;
typedef struct tagFIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK
{
    // construct
    tagFIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK();
    // operator =
    tagFIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK& operator=(const tagFIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
} FIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK;
typedef struct tagSPECIAL_ACTIVITY_STORE_INFO
{
    // construct
    tagSPECIAL_ACTIVITY_STORE_INFO();
    // operator =
    tagSPECIAL_ACTIVITY_STORE_INFO& operator=(const tagSPECIAL_ACTIVITY_STORE_INFO& c);
    // Clear
    void Clear();
    // member
    int	activity_id;
    int	status;
    int	param;
} SPECIAL_ACTIVITY_STORE_INFO;
typedef struct tagSPECIAL_ACTIVITY_INFO_REQ
{
    // construct
    tagSPECIAL_ACTIVITY_INFO_REQ();
    // operator =
    tagSPECIAL_ACTIVITY_INFO_REQ& operator=(const tagSPECIAL_ACTIVITY_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    int	activity_id;
    int	param;
} SPECIAL_ACTIVITY_INFO_REQ;
typedef struct tagSPECIAL_ACTIVITY_INFO_ACK
{
    // construct
    tagSPECIAL_ACTIVITY_INFO_ACK();
    // operator =
    tagSPECIAL_ACTIVITY_INFO_ACK& operator=(const tagSPECIAL_ACTIVITY_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    int	activity_id;
    int	param;
    unsigned int	start_time;
    unsigned int	end_time;
    SPECIAL_ACTIVITY_INFO_LIST	info_list;
    REWARD_TABLE_LIST	reward_list;
} SPECIAL_ACTIVITY_INFO_ACK;
typedef struct tagSPECIAL_ACTIVITY_ACCEPT_REWARD_REQ
{
    // construct
    tagSPECIAL_ACTIVITY_ACCEPT_REWARD_REQ();
    // operator =
    tagSPECIAL_ACTIVITY_ACCEPT_REWARD_REQ& operator=(const tagSPECIAL_ACTIVITY_ACCEPT_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    int	activity_id;
    int	param;
} SPECIAL_ACTIVITY_ACCEPT_REWARD_REQ;
typedef struct tagSPECIAL_ACTIVITY_ACCEPT_REWARD_ACK
{
    // construct
    tagSPECIAL_ACTIVITY_ACCEPT_REWARD_ACK();
    // operator =
    tagSPECIAL_ACTIVITY_ACCEPT_REWARD_ACK& operator=(const tagSPECIAL_ACTIVITY_ACCEPT_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	activity_id;
    int	param;
    SPECIAL_ACTIVITY_INFO_LIST	info_list;
} SPECIAL_ACTIVITY_ACCEPT_REWARD_ACK;
typedef struct tagLIVENESS_TARGET_INFO
{
    // construct
    tagLIVENESS_TARGET_INFO();
    // operator =
    tagLIVENESS_TARGET_INFO& operator=(const tagLIVENESS_TARGET_INFO& c);
    // Clear
    void Clear();
    // member
    int	target;
    int	cur_count;
    int	need_count;
    unsigned char	finish;
    int	liveness;
} LIVENESS_TARGET_INFO;
typedef struct tagLIVENESS_INFO
{
    // construct
    tagLIVENESS_INFO();
    // operator =
    tagLIVENESS_INFO& operator=(const tagLIVENESS_INFO& c);
    // Clear
    void Clear();
    // member
    int	cur_liveness;
    std::vector<LIVENESS_TARGET_INFO>	info_list;
    std::vector<unsigned char>	reward_list;
} LIVENESS_INFO;
typedef struct tagLIVENESS_ACCEPT_REWARD_REQ
{
    // construct
    tagLIVENESS_ACCEPT_REWARD_REQ();
    // operator =
    tagLIVENESS_ACCEPT_REWARD_REQ& operator=(const tagLIVENESS_ACCEPT_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    int	index;
} LIVENESS_ACCEPT_REWARD_REQ;
typedef struct tagLIVENESS_ACCEPT_REWARD_ACK
{
    // construct
    tagLIVENESS_ACCEPT_REWARD_ACK();
    // operator =
    tagLIVENESS_ACCEPT_REWARD_ACK& operator=(const tagLIVENESS_ACCEPT_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	index;
} LIVENESS_ACCEPT_REWARD_ACK;
typedef struct tagCURRENT_WAVE_INFO
{
    // construct
    tagCURRENT_WAVE_INFO();
    // operator =
    tagCURRENT_WAVE_INFO& operator=(const tagCURRENT_WAVE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	index;
    unsigned int	nextTime;
} CURRENT_WAVE_INFO;
typedef struct tagTD_RANK_INFO
{
    // construct
    tagTD_RANK_INFO();
    // operator =
    tagTD_RANK_INFO& operator=(const tagTD_RANK_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank;
    std::string	name;
    unsigned int	damage;
} TD_RANK_INFO;
typedef struct tagTD_RANK_NTF
{
    // construct
    tagTD_RANK_NTF();
    // operator =
    tagTD_RANK_NTF& operator=(const tagTD_RANK_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<TD_RANK_INFO>	rank_list;
} TD_RANK_NTF;
typedef struct tagTD_PLAYER_ENTER_NTF
{
    // construct
    tagTD_PLAYER_ENTER_NTF();
    // operator =
    tagTD_PLAYER_ENTER_NTF& operator=(const tagTD_PLAYER_ENTER_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	enter_or_leave;
    std::string	player_name;
} TD_PLAYER_ENTER_NTF;
typedef struct tagTD_ENTER_ACK
{
    // construct
    tagTD_ENTER_ACK();
    // operator =
    tagTD_ENTER_ACK& operator=(const tagTD_ENTER_ACK& c);
    // Clear
    void Clear();
    // member
    int	err_code;
    int	total_wave;
} TD_ENTER_ACK;
typedef struct tagDUNGEON_TIMES_INFO
{
    // construct
    tagDUNGEON_TIMES_INFO();
    // operator =
    tagDUNGEON_TIMES_INFO& operator=(const tagDUNGEON_TIMES_INFO& c);
    // Clear
    void Clear();
    // member
    int	enter_count;
    unsigned int	refresh_time;
    unsigned int	dungeon_id;
} DUNGEON_TIMES_INFO;
typedef struct tagDUNGEON_TIMES_LIST
{
    // construct
    tagDUNGEON_TIMES_LIST();
    // operator =
    tagDUNGEON_TIMES_LIST& operator=(const tagDUNGEON_TIMES_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<DUNGEON_TIMES_INFO>	list;
} DUNGEON_TIMES_LIST;
typedef struct tagTD_ENTER_TRIGGER_NTF
{
    // construct
    tagTD_ENTER_TRIGGER_NTF();
    // operator =
    tagTD_ENTER_TRIGGER_NTF& operator=(const tagTD_ENTER_TRIGGER_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	enter_count;
    unsigned int	max_enter_count;
} TD_ENTER_TRIGGER_NTF;
typedef struct tagTD_START_NTF
{
    // construct
    tagTD_START_NTF();
    // operator =
    tagTD_START_NTF& operator=(const tagTD_START_NTF& c);
    // Clear
    void Clear();
    // member
    int	current_time;
} TD_START_NTF;
typedef struct tagFACTION_PK_ACK
{
    // construct
    tagFACTION_PK_ACK();
    // operator =
    tagFACTION_PK_ACK& operator=(const tagFACTION_PK_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
} FACTION_PK_ACK;
typedef struct tagFACTION_PK_END_ACK
{
    // construct
    tagFACTION_PK_END_ACK();
    // operator =
    tagFACTION_PK_END_ACK& operator=(const tagFACTION_PK_END_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	success;
    REWARD_TABLE	reward_table;
} FACTION_PK_END_ACK;
typedef struct tagFACTION_PLAYER_INFO
{
    // construct
    tagFACTION_PLAYER_INFO();
    // operator =
    tagFACTION_PLAYER_INFO& operator=(const tagFACTION_PLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    int	score;
    int	combo_kill;
    int	kill_count;
    int	rank;
    unsigned char	group_type;
    unsigned char	is_leave;
    unsigned char	channel;
} FACTION_PLAYER_INFO;
typedef struct tagFACTION_PK_SCORE_NTF
{
    // construct
    tagFACTION_PK_SCORE_NTF();
    // operator =
    tagFACTION_PK_SCORE_NTF& operator=(const tagFACTION_PK_SCORE_NTF& c);
    // Clear
    void Clear();
    // member
    int	blue_score;
    int	red_score;
} FACTION_PK_SCORE_NTF;
typedef struct tagFACTION_PK_START_NTF
{
    // construct
    tagFACTION_PK_START_NTF();
    // operator =
    tagFACTION_PK_START_NTF& operator=(const tagFACTION_PK_START_NTF& c);
    // Clear
    void Clear();
    // member
    int	curr_time;
} FACTION_PK_START_NTF;
typedef struct tagFACTION_PK_BATTLE_NTF
{
    // construct
    tagFACTION_PK_BATTLE_NTF();
    // operator =
    tagFACTION_PK_BATTLE_NTF& operator=(const tagFACTION_PK_BATTLE_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    std::string	attack_name;
    std::string	deader_name;
    int	combo;
} FACTION_PK_BATTLE_NTF;
typedef struct tagFACTION_PK_ADD_SCORE
{
    // construct
    tagFACTION_PK_ADD_SCORE();
    // operator =
    tagFACTION_PK_ADD_SCORE& operator=(const tagFACTION_PK_ADD_SCORE& c);
    // Clear
    void Clear();
    // member
    int	score;
} FACTION_PK_ADD_SCORE;
typedef struct tagTIMING_TRIGGER_START_NTF
{
    // construct
    tagTIMING_TRIGGER_START_NTF();
    // operator =
    tagTIMING_TRIGGER_START_NTF& operator=(const tagTIMING_TRIGGER_START_NTF& c);
    // Clear
    void Clear();
    // member
    int	timer_id;
} TIMING_TRIGGER_START_NTF;
typedef struct tagTIMING_TRIGGER_END_NTF
{
    // construct
    tagTIMING_TRIGGER_END_NTF();
    // operator =
    tagTIMING_TRIGGER_END_NTF& operator=(const tagTIMING_TRIGGER_END_NTF& c);
    // Clear
    void Clear();
    // member
    int	timer_id;
} TIMING_TRIGGER_END_NTF;
typedef struct tagGAMEPLAY_TIMES_NOTIFY_REQ
{
    // construct
    tagGAMEPLAY_TIMES_NOTIFY_REQ();
    // operator =
    tagGAMEPLAY_TIMES_NOTIFY_REQ& operator=(const tagGAMEPLAY_TIMES_NOTIFY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	game_id;
} GAMEPLAY_TIMES_NOTIFY_REQ;
typedef struct tagGAMEPLAY_TIMES_NOTIFY
{
    // construct
    tagGAMEPLAY_TIMES_NOTIFY();
    // operator =
    tagGAMEPLAY_TIMES_NOTIFY& operator=(const tagGAMEPLAY_TIMES_NOTIFY& c);
    // Clear
    void Clear();
    // member
    unsigned short	game_id;
    int	curr_times;
    int	sum_times;
} GAMEPLAY_TIMES_NOTIFY;
typedef struct tagGAMEPLAY_TIMES_NOTIFY_LIST
{
    // construct
    tagGAMEPLAY_TIMES_NOTIFY_LIST();
    // operator =
    tagGAMEPLAY_TIMES_NOTIFY_LIST& operator=(const tagGAMEPLAY_TIMES_NOTIFY_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<GAMEPLAY_TIMES_NOTIFY>	game_notify_list;
} GAMEPLAY_TIMES_NOTIFY_LIST;
typedef struct tagGAME_CONTRAST_REQ
{
    // construct
    tagGAME_CONTRAST_REQ();
    // operator =
    tagGAME_CONTRAST_REQ& operator=(const tagGAME_CONTRAST_REQ& c);
    // Clear
    void Clear();
    // member
    std::string	roleName;
} GAME_CONTRAST_REQ;
typedef struct tagGAME_CONTRASTS
{
    // construct
    tagGAME_CONTRASTS();
    // operator =
    tagGAME_CONTRASTS& operator=(const tagGAME_CONTRASTS& c);
    // Clear
    void Clear();
    // member
    OFFLINE_PLAYER_INFO	me;
    OFFLINE_PLAYER_INFO	other;
} GAME_CONTRASTS;
typedef struct tagTOUCH_START_REQ
{
    // construct
    tagTOUCH_START_REQ();
    // operator =
    tagTOUCH_START_REQ& operator=(const tagTOUCH_START_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	touch_id;
} TOUCH_START_REQ;
typedef struct tagTOUCH_START_ACK
{
    // construct
    tagTOUCH_START_ACK();
    // operator =
    tagTOUCH_START_ACK& operator=(const tagTOUCH_START_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	touch_id;
    int	err;
    int	remainingTime;
} TOUCH_START_ACK;
typedef struct tagTOUCH_BREAK_NTF
{
    // construct
    tagTOUCH_BREAK_NTF();
    // operator =
    tagTOUCH_BREAK_NTF& operator=(const tagTOUCH_BREAK_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	touch_id;
} TOUCH_BREAK_NTF;
typedef struct tagTOUCH_END_NTF
{
    // construct
    tagTOUCH_END_NTF();
    // operator =
    tagTOUCH_END_NTF& operator=(const tagTOUCH_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	touch_id;
    int	arg1;
} TOUCH_END_NTF;
typedef struct tagCAPTURE_FLAG_START_NTF
{
    // construct
    tagCAPTURE_FLAG_START_NTF();
    // operator =
    tagCAPTURE_FLAG_START_NTF& operator=(const tagCAPTURE_FLAG_START_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	current_time;
} CAPTURE_FLAG_START_NTF;
typedef struct tagCAPTURE_FLAG_RANK_INFO
{
    // construct
    tagCAPTURE_FLAG_RANK_INFO();
    // operator =
    tagCAPTURE_FLAG_RANK_INFO& operator=(const tagCAPTURE_FLAG_RANK_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	name;
    int	rank;
    int	score;
    int	group_type;
} CAPTURE_FLAG_RANK_INFO;
typedef struct tagCAPTURE_FLAG_RANK_LIST
{
    // construct
    tagCAPTURE_FLAG_RANK_LIST();
    // operator =
    tagCAPTURE_FLAG_RANK_LIST& operator=(const tagCAPTURE_FLAG_RANK_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<CAPTURE_FLAG_RANK_INFO>	rank_list;
} CAPTURE_FLAG_RANK_LIST;
typedef struct tagCAPTURE_FLAG_GROUP_SCORE
{
    // construct
    tagCAPTURE_FLAG_GROUP_SCORE();
    // operator =
    tagCAPTURE_FLAG_GROUP_SCORE& operator=(const tagCAPTURE_FLAG_GROUP_SCORE& c);
    // Clear
    void Clear();
    // member
    int	blue_group;
    int	red_group;
    int	blue_flags_num;
    int	red_flags_num;
} CAPTURE_FLAG_GROUP_SCORE;
typedef struct tagCAPTURE_FLAG_END_ACK
{
    // construct
    tagCAPTURE_FLAG_END_ACK();
    // operator =
    tagCAPTURE_FLAG_END_ACK& operator=(const tagCAPTURE_FLAG_END_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	success;
    int	my_rank;
    REWARD_TABLE	reward_table;
} CAPTURE_FLAG_END_ACK;
typedef struct tagYESTERDAY_COUNT
{
    // construct
    tagYESTERDAY_COUNT();
    // operator =
    tagYESTERDAY_COUNT& operator=(const tagYESTERDAY_COUNT& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    int	count;
    unsigned char	state;
} YESTERDAY_COUNT;
typedef struct tagACTIVITY_ENTER
{
    // construct
    tagACTIVITY_ENTER();
    // operator =
    tagACTIVITY_ENTER& operator=(const tagACTIVITY_ENTER& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned char	is_enter;
} ACTIVITY_ENTER;
typedef struct tagGET_MEAL_VIGOR_ACK
{
    // construct
    tagGET_MEAL_VIGOR_ACK();
    // operator =
    tagGET_MEAL_VIGOR_ACK& operator=(const tagGET_MEAL_VIGOR_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	result;
    unsigned int	last_time;
} GET_MEAL_VIGOR_ACK;
typedef struct tagVIGOR_INFO
{
    // construct
    tagVIGOR_INFO();
    // operator =
    tagVIGOR_INFO& operator=(const tagVIGOR_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	last_time;
} VIGOR_INFO;
typedef struct tagOFF_LINE_VIGOR_INFO
{
    // construct
    tagOFF_LINE_VIGOR_INFO();
    // operator =
    tagOFF_LINE_VIGOR_INFO& operator=(const tagOFF_LINE_VIGOR_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	start_time;
    int	b_get;
    unsigned int	count_time;
    unsigned int	off_voigor_point;
} OFF_LINE_VIGOR_INFO;
typedef struct tagOFF_LINE_VIGOR_ACK
{
    // construct
    tagOFF_LINE_VIGOR_ACK();
    // operator =
    tagOFF_LINE_VIGOR_ACK& operator=(const tagOFF_LINE_VIGOR_ACK& c);
    // Clear
    void Clear();
    // member
    int	b_get;
    int	point;
} OFF_LINE_VIGOR_ACK;
typedef struct tagGET_OFF_LINE_VIGOR_REQ
{
    // construct
    tagGET_OFF_LINE_VIGOR_REQ();
    // operator =
    tagGET_OFF_LINE_VIGOR_REQ& operator=(const tagGET_OFF_LINE_VIGOR_REQ& c);
    // Clear
    void Clear();
    // member
    int	id;
} GET_OFF_LINE_VIGOR_REQ;
typedef struct tagGET_OFF_LINE_VIGOR_ACK
{
    // construct
    tagGET_OFF_LINE_VIGOR_ACK();
    // operator =
    tagGET_OFF_LINE_VIGOR_ACK& operator=(const tagGET_OFF_LINE_VIGOR_ACK& c);
    // Clear
    void Clear();
    // member
    int	b_get;
    int	point;
    unsigned short	errcode;
} GET_OFF_LINE_VIGOR_ACK;
typedef struct tagZOMBIE_DUNGEON_STATUS
{
    // construct
    tagZOMBIE_DUNGEON_STATUS();
    // operator =
    tagZOMBIE_DUNGEON_STATUS& operator=(const tagZOMBIE_DUNGEON_STATUS& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
    unsigned short	lock_status;
} ZOMBIE_DUNGEON_STATUS;
typedef struct tagSWORD_ONE_INFO
{
    // construct
    tagSWORD_ONE_INFO();
    // operator =
    tagSWORD_ONE_INFO& operator=(const tagSWORD_ONE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    int	level;
    int	star;
    std::vector<int>	lock;
} SWORD_ONE_INFO;
typedef struct tagSWORD_NEW_INFO
{
    // construct
    tagSWORD_NEW_INFO();
    // operator =
    tagSWORD_NEW_INFO& operator=(const tagSWORD_NEW_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<SWORD_ONE_INFO>	sword_list;
    int	battle;
    int	equip_id;
} SWORD_NEW_INFO;
typedef struct tagSWORD_INFO
{
    // construct
    tagSWORD_INFO();
    // operator =
    tagSWORD_INFO& operator=(const tagSWORD_INFO& c);
    // Clear
    void Clear();
    // member
    int	star;
    int	star_exp;
    int	advance;
    int	advance_level;
    int	upgrade_level;
    int	advance_exp;
    int	swordId;
    int	battle;
} SWORD_INFO;
typedef struct tagSWORD_UPGRADE_REQ
{
    // construct
    tagSWORD_UPGRADE_REQ();
    // operator =
    tagSWORD_UPGRADE_REQ& operator=(const tagSWORD_UPGRADE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned char	type;
} SWORD_UPGRADE_REQ;
typedef struct tagSWORD_UPGRADE_ACK
{
    // construct
    tagSWORD_UPGRADE_ACK();
    // operator =
    tagSWORD_UPGRADE_ACK& operator=(const tagSWORD_UPGRADE_ACK& c);
    // Clear
    void Clear();
    // member
    int	err;
    unsigned int	id;
    SWORD_ONE_INFO	info;
} SWORD_UPGRADE_ACK;
typedef struct tagSWORD_ADVANCE_REQ
{
    // construct
    tagSWORD_ADVANCE_REQ();
    // operator =
    tagSWORD_ADVANCE_REQ& operator=(const tagSWORD_ADVANCE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
} SWORD_ADVANCE_REQ;
typedef struct tagSWORD_ADVANCE_ACK
{
    // construct
    tagSWORD_ADVANCE_ACK();
    // operator =
    tagSWORD_ADVANCE_ACK& operator=(const tagSWORD_ADVANCE_ACK& c);
    // Clear
    void Clear();
    // member
    int	err;
    unsigned int	id;
    SWORD_ONE_INFO	info;
} SWORD_ADVANCE_ACK;
typedef struct tagSWORD_ACTIVATE_REQ
{
    // construct
    tagSWORD_ACTIVATE_REQ();
    // operator =
    tagSWORD_ACTIVATE_REQ& operator=(const tagSWORD_ACTIVATE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
} SWORD_ACTIVATE_REQ;
typedef struct tagSWORD_ACTIVATE_ACK
{
    // construct
    tagSWORD_ACTIVATE_ACK();
    // operator =
    tagSWORD_ACTIVATE_ACK& operator=(const tagSWORD_ACTIVATE_ACK& c);
    // Clear
    void Clear();
    // member
    int	err;
    unsigned int	id;
    SWORD_NEW_INFO	info;
} SWORD_ACTIVATE_ACK;
typedef struct tagSWORD_LOCK_REQ
{
    // construct
    tagSWORD_LOCK_REQ();
    // operator =
    tagSWORD_LOCK_REQ& operator=(const tagSWORD_LOCK_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	lock_id;
} SWORD_LOCK_REQ;
typedef struct tagSWORD_LOCK_ACK
{
    // construct
    tagSWORD_LOCK_ACK();
    // operator =
    tagSWORD_LOCK_ACK& operator=(const tagSWORD_LOCK_ACK& c);
    // Clear
    void Clear();
    // member
    int	err;
    unsigned int	id;
    SWORD_ONE_INFO	info;
} SWORD_LOCK_ACK;
typedef struct tagSWORD_EQUIP_REQ
{
    // construct
    tagSWORD_EQUIP_REQ();
    // operator =
    tagSWORD_EQUIP_REQ& operator=(const tagSWORD_EQUIP_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
} SWORD_EQUIP_REQ;
typedef struct tagSWORD_EQUIP_ACK
{
    // construct
    tagSWORD_EQUIP_ACK();
    // operator =
    tagSWORD_EQUIP_ACK& operator=(const tagSWORD_EQUIP_ACK& c);
    // Clear
    void Clear();
    // member
    int	err;
    unsigned int	id;
} SWORD_EQUIP_ACK;
typedef struct tagZOMBIE_WAR_INFO
{
    // construct
    tagZOMBIE_WAR_INFO();
    // operator =
    tagZOMBIE_WAR_INFO& operator=(const tagZOMBIE_WAR_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	live_time;
    unsigned short	last_enter_count;
    std::vector<ZOMBIE_DUNGEON_STATUS>	zombie_info_list;
} ZOMBIE_WAR_INFO;
typedef struct tagZOMBIE_WAR_UPDATE
{
    // construct
    tagZOMBIE_WAR_UPDATE();
    // operator =
    tagZOMBIE_WAR_UPDATE& operator=(const tagZOMBIE_WAR_UPDATE& c);
    // Clear
    void Clear();
    // member
    unsigned int	multiple;
} ZOMBIE_WAR_UPDATE;
typedef struct tagZOMBIE_WAR_ENTER_REQ
{
    // construct
    tagZOMBIE_WAR_ENTER_REQ();
    // operator =
    tagZOMBIE_WAR_ENTER_REQ& operator=(const tagZOMBIE_WAR_ENTER_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
} ZOMBIE_WAR_ENTER_REQ;
typedef struct tagZOMBIE_WAR_END
{
    // construct
    tagZOMBIE_WAR_END();
    // operator =
    tagZOMBIE_WAR_END& operator=(const tagZOMBIE_WAR_END& c);
    // Clear
    void Clear();
    // member
    unsigned int	dungeon_id;
    int	b_pass;
} ZOMBIE_WAR_END;
typedef struct tagVOID_FIELD_CHANNEL_INFO
{
    // construct
    tagVOID_FIELD_CHANNEL_INFO();
    // operator =
    tagVOID_FIELD_CHANNEL_INFO& operator=(const tagVOID_FIELD_CHANNEL_INFO& c);
    // Clear
    void Clear();
    // member
    int	channel_num;
    int	player_num;
    int	void_field_type;
} VOID_FIELD_CHANNEL_INFO;
typedef struct tagVOID_FIELD_CHANNEL_INFO_REQ
{
    // construct
    tagVOID_FIELD_CHANNEL_INFO_REQ();
    // operator =
    tagVOID_FIELD_CHANNEL_INFO_REQ& operator=(const tagVOID_FIELD_CHANNEL_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	gate_id;
    BIGINT_ID	player_id;
    unsigned int	dungeon_id;
} VOID_FIELD_CHANNEL_INFO_REQ;
typedef struct tagVOID_FIELD_REGULAR_TYPE_NTF
{
    // construct
    tagVOID_FIELD_REGULAR_TYPE_NTF();
    // operator =
    tagVOID_FIELD_REGULAR_TYPE_NTF& operator=(const tagVOID_FIELD_REGULAR_TYPE_NTF& c);
    // Clear
    void Clear();
    // member
    int	void_field_type;
    unsigned int	start_time;
    unsigned int	run_time;
} VOID_FIELD_REGULAR_TYPE_NTF;
typedef struct tagVOID_FIELD_STATE_INFO
{
    // construct
    tagVOID_FIELD_STATE_INFO();
    // operator =
    tagVOID_FIELD_STATE_INFO& operator=(const tagVOID_FIELD_STATE_INFO& c);
    // Clear
    void Clear();
    // member
    int	type;
    unsigned int	open_time;
    unsigned int	open_channel_num;
    unsigned int	open_channel_max;
} VOID_FIELD_STATE_INFO;
typedef struct tagVOID_FIELD_CHESTS_NUM
{
    // construct
    tagVOID_FIELD_CHESTS_NUM();
    // operator =
    tagVOID_FIELD_CHESTS_NUM& operator=(const tagVOID_FIELD_CHESTS_NUM& c);
    // Clear
    void Clear();
    // member
    int	chests_num;
} VOID_FIELD_CHESTS_NUM;
typedef struct tagVOID_FIELD_BATTLE_INFO
{
    // construct
    tagVOID_FIELD_BATTLE_INFO();
    // operator =
    tagVOID_FIELD_BATTLE_INFO& operator=(const tagVOID_FIELD_BATTLE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    unsigned int	crature_id;
} VOID_FIELD_BATTLE_INFO;
typedef struct tagVOID_FIELD_PERSONAL_INFO_NTF
{
    // construct
    tagVOID_FIELD_PERSONAL_INFO_NTF();
    // operator =
    tagVOID_FIELD_PERSONAL_INFO_NTF& operator=(const tagVOID_FIELD_PERSONAL_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<VOID_FIELD_BATTLE_INFO>	battle_list;
    REWARD_TABLE	reward_table;
} VOID_FIELD_PERSONAL_INFO_NTF;
typedef struct tagVOID_FIELD_SET_HOOK_POS_REQ
{
    // construct
    tagVOID_FIELD_SET_HOOK_POS_REQ();
    // operator =
    tagVOID_FIELD_SET_HOOK_POS_REQ& operator=(const tagVOID_FIELD_SET_HOOK_POS_REQ& c);
    // Clear
    void Clear();
    // member
    int	hook_x;
    int	hook_y;
} VOID_FIELD_SET_HOOK_POS_REQ;
typedef struct tagVOID_FIELD_HOOK_POS_NTF
{
    // construct
    tagVOID_FIELD_HOOK_POS_NTF();
    // operator =
    tagVOID_FIELD_HOOK_POS_NTF& operator=(const tagVOID_FIELD_HOOK_POS_NTF& c);
    // Clear
    void Clear();
    // member
    int	hook_x;
    int	hook_y;
} VOID_FIELD_HOOK_POS_NTF;
typedef struct tagMULTISERVER_BATTLE_ITEM_INFO
{
    // construct
    tagMULTISERVER_BATTLE_ITEM_INFO();
    // operator =
    tagMULTISERVER_BATTLE_ITEM_INFO& operator=(const tagMULTISERVER_BATTLE_ITEM_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	type;
    int	today_count;
    int	today_exploit;
    unsigned int	last_time;
} MULTISERVER_BATTLE_ITEM_INFO;
typedef struct tagMULTISERVER_BATTLE_BAG
{
    // construct
    tagMULTISERVER_BATTLE_BAG();
    // operator =
    tagMULTISERVER_BATTLE_BAG& operator=(const tagMULTISERVER_BATTLE_BAG& c);
    // Clear
    void Clear();
    // member
    int	integral;
    unsigned int	win_count;
    unsigned int	lose_count;
    int	exploit_point;
    int	alliance_point;
    int	season_point;
    unsigned int	exploit_time;
    unsigned int	alliance_time;
    unsigned int	yesterday_count;
    unsigned int	yesterday_3v3_count;
    unsigned int	yesterday_integral;
    std::vector<MULTISERVER_BATTLE_ITEM_INFO>	list;
    std::vector<LIMIT_BUY>	item_list;
    int	enter_num;
    int	yesterday_num;
    int	yesterday_3v3_num;
    int	season_time;
} MULTISERVER_BATTLE_BAG;
typedef struct tagMULTISERVER_BATTLE_APPLY_REQ
{
    // construct
    tagMULTISERVER_BATTLE_APPLY_REQ();
    // operator =
    tagMULTISERVER_BATTLE_APPLY_REQ& operator=(const tagMULTISERVER_BATTLE_APPLY_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	gate_id;
    unsigned int	game_id;
    BIGINT_ID	player_id;
    unsigned int	battle_type;
    unsigned int	channel_id;
    unsigned int	battle_power;
    unsigned int	apply_time;
    unsigned int	wait_time;
} MULTISERVER_BATTLE_APPLY_REQ;
typedef struct tagMULTISERVER_BATTLE_APPLY_ACK
{
    // construct
    tagMULTISERVER_BATTLE_APPLY_ACK();
    // operator =
    tagMULTISERVER_BATTLE_APPLY_ACK& operator=(const tagMULTISERVER_BATTLE_APPLY_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	battle_type;
    unsigned int	channel_id;
    unsigned int	ack_state;
} MULTISERVER_BATTLE_APPLY_ACK;
typedef struct tagMULTISERVER_BATTLE_INFO_ACK
{
    // construct
    tagMULTISERVER_BATTLE_INFO_ACK();
    // operator =
    tagMULTISERVER_BATTLE_INFO_ACK& operator=(const tagMULTISERVER_BATTLE_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    MULTISERVER_BATTLE_BAG	info;
} MULTISERVER_BATTLE_INFO_ACK;
typedef struct tagMULTISERVER_BATTLE_PK_END_INFO
{
    // construct
    tagMULTISERVER_BATTLE_PK_END_INFO();
    // operator =
    tagMULTISERVER_BATTLE_PK_END_INFO& operator=(const tagMULTISERVER_BATTLE_PK_END_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	name;
    unsigned int	integral;
    unsigned int	exploit;
    unsigned char	success;
} MULTISERVER_BATTLE_PK_END_INFO;
typedef struct tagMULTISERVER_BATTLE_PK_END_ACK
{
    // construct
    tagMULTISERVER_BATTLE_PK_END_ACK();
    // operator =
    tagMULTISERVER_BATTLE_PK_END_ACK& operator=(const tagMULTISERVER_BATTLE_PK_END_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	battle_type;
    unsigned char	success;
    std::vector<MULTISERVER_BATTLE_PK_END_INFO>	list;
} MULTISERVER_BATTLE_PK_END_ACK;
typedef struct tagMULTISERVER_BATTLE_WAIT_ACK
{
    // construct
    tagMULTISERVER_BATTLE_WAIT_ACK();
    // operator =
    tagMULTISERVER_BATTLE_WAIT_ACK& operator=(const tagMULTISERVER_BATTLE_WAIT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	gate_id;
    BIGINT_ID	player_id;
    unsigned int	battle_type;
    unsigned int	game_server_id;
} MULTISERVER_BATTLE_WAIT_ACK;
typedef struct tagMULTISERVER_MATCH_COUNT
{
    // construct
    tagMULTISERVER_MATCH_COUNT();
    // operator =
    tagMULTISERVER_MATCH_COUNT& operator=(const tagMULTISERVER_MATCH_COUNT& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	player_id;
    unsigned int	count;
} MULTISERVER_MATCH_COUNT;
typedef struct tagMULTISERVER_BATTLE_SEASON_NTF
{
    // construct
    tagMULTISERVER_BATTLE_SEASON_NTF();
    // operator =
    tagMULTISERVER_BATTLE_SEASON_NTF& operator=(const tagMULTISERVER_BATTLE_SEASON_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	season_time;
} MULTISERVER_BATTLE_SEASON_NTF;
typedef struct tagMULTISERVER_BATTLE_ABOUT_RANK_NTF
{
    // construct
    tagMULTISERVER_BATTLE_ABOUT_RANK_NTF();
    // operator =
    tagMULTISERVER_BATTLE_ABOUT_RANK_NTF& operator=(const tagMULTISERVER_BATTLE_ABOUT_RANK_NTF& c);
    // Clear
    void Clear();
    // member
    int	my_rank;
    std::string	player_name;
    int	vip_level;
    int	battle_power;
} MULTISERVER_BATTLE_ABOUT_RANK_NTF;
typedef struct tagPUSH_360_NTF
{
    // construct
    tagPUSH_360_NTF();
    // operator =
    tagPUSH_360_NTF& operator=(const tagPUSH_360_NTF& c);
    // Clear
    void Clear();
    // member
    int	type;
    std::string	msg;
} PUSH_360_NTF;
typedef struct tagPROCLAMATION_INFO
{
    // construct
    tagPROCLAMATION_INFO();
    // operator =
    tagPROCLAMATION_INFO& operator=(const tagPROCLAMATION_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	type;
    unsigned int	state;
    unsigned int	time;
    std::string	msg;
} PROCLAMATION_INFO;
typedef struct tagSHORCUT_BAG
{
    // construct
    tagSHORCUT_BAG();
    // operator =
    tagSHORCUT_BAG& operator=(const tagSHORCUT_BAG& c);
    // Clear
    void Clear();
    // member
    unsigned int	shorcut_flag;
    unsigned int	taste_vip;
    unsigned int	like_flag;
    unsigned int	dftime;
} SHORCUT_BAG;
typedef struct tagGAME_SETTING_CHANNEL_NUM
{
    // construct
    tagGAME_SETTING_CHANNEL_NUM();
    // operator =
    tagGAME_SETTING_CHANNEL_NUM& operator=(const tagGAME_SETTING_CHANNEL_NUM& c);
    // Clear
    void Clear();
    // member
    unsigned int	num;
} GAME_SETTING_CHANNEL_NUM;
typedef struct tagDROP_CHEST_TIME
{
    // construct
    tagDROP_CHEST_TIME();
    // operator =
    tagDROP_CHEST_TIME& operator=(const tagDROP_CHEST_TIME& c);
    // Clear
    void Clear();
    // member
    int	time;
} DROP_CHEST_TIME;
typedef struct tagGMT_VALUE
{
    // construct
    tagGMT_VALUE();
    // operator =
    tagGMT_VALUE& operator=(const tagGMT_VALUE& c);
    // Clear
    void Clear();
    // member
    int	val;
    std::string	txt;
} GMT_VALUE;
typedef struct tagGMT_MSG
{
    // construct
    tagGMT_MSG();
    // operator =
    tagGMT_MSG& operator=(const tagGMT_MSG& c);
    // Clear
    void Clear();
    // member
    int	type;
    int	value;
    std::string	text;
    std::vector<GMT_VALUE>	val_list;
} GMT_MSG;
typedef struct tagGMT_MSG_SET_GAME
{
    // construct
    tagGMT_MSG_SET_GAME();
    // operator =
    tagGMT_MSG_SET_GAME& operator=(const tagGMT_MSG_SET_GAME& c);
    // Clear
    void Clear();
    // member
    int	type;
    int	value;
} GMT_MSG_SET_GAME;
typedef struct tagGMT_MSG_SET_GAME_LIST
{
    // construct
    tagGMT_MSG_SET_GAME_LIST();
    // operator =
    tagGMT_MSG_SET_GAME_LIST& operator=(const tagGMT_MSG_SET_GAME_LIST& c);
    // Clear
    void Clear();
    // member
    int	type;
    std::vector<GMT_VALUE>	val_list;
    std::vector<GMT_MSG_SET_GAME>	gmtsetgame_list;
} GMT_MSG_SET_GAME_LIST;
typedef struct tagFIELD_BOSS_INFO
{
    // construct
    tagFIELD_BOSS_INFO();
    // operator =
    tagFIELD_BOSS_INFO& operator=(const tagFIELD_BOSS_INFO& c);
    // Clear
    void Clear();
    // member
    int	dungeon_id;
    int	scene_id;
    int	channel_id;
    std::string	killer_name;
} FIELD_BOSS_INFO;
typedef struct tagFIELD_BOSS_INFO_REQ
{
    // construct
    tagFIELD_BOSS_INFO_REQ();
    // operator =
    tagFIELD_BOSS_INFO_REQ& operator=(const tagFIELD_BOSS_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	gate_id;
    BIGINT_ID	player_id;
    int	dungeon_id;
} FIELD_BOSS_INFO_REQ;
typedef struct tagFIELD_BOSS_INFO_ACK
{
    // construct
    tagFIELD_BOSS_INFO_ACK();
    // operator =
    tagFIELD_BOSS_INFO_ACK& operator=(const tagFIELD_BOSS_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	world_level;
    std::vector<FIELD_BOSS_INFO>	boss_list;
    unsigned int	fresh_boss_time;
} FIELD_BOSS_INFO_ACK;
typedef struct tagFIELD_BOSS_UPDATE_DROP_STATE_ACK
{
    // construct
    tagFIELD_BOSS_UPDATE_DROP_STATE_ACK();
    // operator =
    tagFIELD_BOSS_UPDATE_DROP_STATE_ACK& operator=(const tagFIELD_BOSS_UPDATE_DROP_STATE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    int	arrive_time;
} FIELD_BOSS_UPDATE_DROP_STATE_ACK;
typedef struct tagFIELD_BOSS_PLAYER_IS_OFFLINE_REQ
{
    // construct
    tagFIELD_BOSS_PLAYER_IS_OFFLINE_REQ();
    // operator =
    tagFIELD_BOSS_PLAYER_IS_OFFLINE_REQ& operator=(const tagFIELD_BOSS_PLAYER_IS_OFFLINE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	game_id;
    BIGINT_ID	player_id;
} FIELD_BOSS_PLAYER_IS_OFFLINE_REQ;
typedef struct tagFIELD_BOSS_PLAYER_IS_OFFLINE_ACK
{
    // construct
    tagFIELD_BOSS_PLAYER_IS_OFFLINE_ACK();
    // operator =
    tagFIELD_BOSS_PLAYER_IS_OFFLINE_ACK& operator=(const tagFIELD_BOSS_PLAYER_IS_OFFLINE_ACK& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	player_id;
} FIELD_BOSS_PLAYER_IS_OFFLINE_ACK;
typedef struct tagFIELD_BOSS_SET_HOOK_POS_REQ
{
    // construct
    tagFIELD_BOSS_SET_HOOK_POS_REQ();
    // operator =
    tagFIELD_BOSS_SET_HOOK_POS_REQ& operator=(const tagFIELD_BOSS_SET_HOOK_POS_REQ& c);
    // Clear
    void Clear();
    // member
    int	hook_x;
    int	hook_y;
} FIELD_BOSS_SET_HOOK_POS_REQ;
typedef struct tagTOP_UP_RANK_QUERY_CREATE_REQ
{
    // construct
    tagTOP_UP_RANK_QUERY_CREATE_REQ();
    // operator =
    tagTOP_UP_RANK_QUERY_CREATE_REQ& operator=(const tagTOP_UP_RANK_QUERY_CREATE_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	festival_id;
    unsigned int	loop;
    unsigned int	rank_type;
    int	begin_time;
    int	end_time;
    unsigned int	total_recharge_line;
    unsigned int	update_interval;
} TOP_UP_RANK_QUERY_CREATE_REQ;
typedef struct tagTOP_UP_RANK_INFO
{
    // construct
    tagTOP_UP_RANK_INFO();
    // operator =
    tagTOP_UP_RANK_INFO& operator=(const tagTOP_UP_RANK_INFO& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	player_id;
    std::string	name;
    unsigned int	value;
    char	sex;
    char	career;
} TOP_UP_RANK_INFO;
typedef struct tagTOP_UP_RANK_INFO_ACK
{
    // construct
    tagTOP_UP_RANK_INFO_ACK();
    // operator =
    tagTOP_UP_RANK_INFO_ACK& operator=(const tagTOP_UP_RANK_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	festival_id;
    unsigned int	rank_type;
    std::vector<TOP_UP_RANK_INFO>	rank_list;
    unsigned int	update_time;
} TOP_UP_RANK_INFO_ACK;
typedef struct tagPAY_POINT_LOTTERY_ITEM
{
    // construct
    tagPAY_POINT_LOTTERY_ITEM();
    // operator =
    tagPAY_POINT_LOTTERY_ITEM& operator=(const tagPAY_POINT_LOTTERY_ITEM& c);
    // Clear
    void Clear();
    // member
    unsigned int	tid;
    int	color;
    int	number;
    int	cost;
} PAY_POINT_LOTTERY_ITEM;
typedef struct tagPAY_POINT_LOTTERY_PACKAGE
{
    // construct
    tagPAY_POINT_LOTTERY_PACKAGE();
    // operator =
    tagPAY_POINT_LOTTERY_PACKAGE& operator=(const tagPAY_POINT_LOTTERY_PACKAGE& c);
    // Clear
    void Clear();
    // member
    unsigned int	tid;
    int	vip_min_level;
    int	vip_max_level;
} PAY_POINT_LOTTERY_PACKAGE;
typedef struct tagPAY_POINT_LOTTERY_GET_RECORD
{
    // construct
    tagPAY_POINT_LOTTERY_GET_RECORD();
    // operator =
    tagPAY_POINT_LOTTERY_GET_RECORD& operator=(const tagPAY_POINT_LOTTERY_GET_RECORD& c);
    // Clear
    void Clear();
    // member
    std::string	owner_name;
    unsigned int	item_tid;
    int	item_color;
} PAY_POINT_LOTTERY_GET_RECORD;
typedef struct tagPAY_POINT_LOTTERY_INFO
{
    // construct
    tagPAY_POINT_LOTTERY_INFO();
    // operator =
    tagPAY_POINT_LOTTERY_INFO& operator=(const tagPAY_POINT_LOTTERY_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	record_time;
    int	exchange_enable;
    int	pay_point;
    int	get_count;
    std::vector<PAY_POINT_LOTTERY_GET_RECORD>	world_get_record;
    std::vector<PAY_POINT_LOTTERY_GET_RECORD>	local_get_record;
} PAY_POINT_LOTTERY_INFO;
typedef struct tagPAY_POINT_LOTTERY_INFO_ACK
{
    // construct
    tagPAY_POINT_LOTTERY_INFO_ACK();
    // operator =
    tagPAY_POINT_LOTTERY_INFO_ACK& operator=(const tagPAY_POINT_LOTTERY_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	exchange_enable;
    int	pay_point;
    int	get_count;
} PAY_POINT_LOTTERY_INFO_ACK;
typedef struct tagPAY_POINT_LOTTERY_OUTPUT_ACK
{
    // construct
    tagPAY_POINT_LOTTERY_OUTPUT_ACK();
    // operator =
    tagPAY_POINT_LOTTERY_OUTPUT_ACK& operator=(const tagPAY_POINT_LOTTERY_OUTPUT_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<int>	idx_list;
} PAY_POINT_LOTTERY_OUTPUT_ACK;
typedef struct tagPAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ
{
    // construct
    tagPAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ();
    // operator =
    tagPAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ& operator=(const tagPAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ& c);
    // Clear
    void Clear();
    // member
    int	idx;
} PAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ;
typedef struct tagPAY_POINT_LOTTERY_NTF
{
    // construct
    tagPAY_POINT_LOTTERY_NTF();
    // operator =
    tagPAY_POINT_LOTTERY_NTF& operator=(const tagPAY_POINT_LOTTERY_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<PAY_POINT_LOTTERY_GET_RECORD>	local_get_record;
} PAY_POINT_LOTTERY_NTF;
typedef struct tagVIP_ONLY_DUNGEON_CFG
{
    // construct
    tagVIP_ONLY_DUNGEON_CFG();
    // operator =
    tagVIP_ONLY_DUNGEON_CFG& operator=(const tagVIP_ONLY_DUNGEON_CFG& c);
    // Clear
    void Clear();
    // member
    int	level;
    int	max_pay_count;
    int	max_free_count;
    int	money_point_cost;
    int	discount;
} VIP_ONLY_DUNGEON_CFG;
typedef struct tagVIP_ONLY_DUNGEON_INFO
{
    // construct
    tagVIP_ONLY_DUNGEON_INFO();
    // operator =
    tagVIP_ONLY_DUNGEON_INFO& operator=(const tagVIP_ONLY_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	record_time;
    int	used_free_count;
    int	used_pay_count;
} VIP_ONLY_DUNGEON_INFO;
typedef struct tagVIP_ONLY_DUNGEON_INFO_ACK
{
    // construct
    tagVIP_ONLY_DUNGEON_INFO_ACK();
    // operator =
    tagVIP_ONLY_DUNGEON_INFO_ACK& operator=(const tagVIP_ONLY_DUNGEON_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	used_free_count;
    int	used_pay_count;
} VIP_ONLY_DUNGEON_INFO_ACK;
typedef struct tagVIP_ONLY_DUNGEON_END_ACK
{
    // construct
    tagVIP_ONLY_DUNGEON_END_ACK();
    // operator =
    tagVIP_ONLY_DUNGEON_END_ACK& operator=(const tagVIP_ONLY_DUNGEON_END_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	is_win;
    int	soul_value;
} VIP_ONLY_DUNGEON_END_ACK;
typedef struct tagINVESTMENT_PLAN_DAY_STATE
{
    // construct
    tagINVESTMENT_PLAN_DAY_STATE();
    // operator =
    tagINVESTMENT_PLAN_DAY_STATE& operator=(const tagINVESTMENT_PLAN_DAY_STATE& c);
    // Clear
    void Clear();
    // member
    unsigned char	day;
    unsigned char	state;
    unsigned int	moneypoint;
} INVESTMENT_PLAN_DAY_STATE;
typedef struct tagINVESTMENT_PLAN_TYPE_INFO
{
    // construct
    tagINVESTMENT_PLAN_TYPE_INFO();
    // operator =
    tagINVESTMENT_PLAN_TYPE_INFO& operator=(const tagINVESTMENT_PLAN_TYPE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	cur_moneypoint;
    unsigned int	investment_time;
    std::vector<INVESTMENT_PLAN_DAY_STATE>	day_info_list;
} INVESTMENT_PLAN_TYPE_INFO;
typedef struct tagINVESTMENT_PLAN_INFO
{
    // construct
    tagINVESTMENT_PLAN_INFO();
    // operator =
    tagINVESTMENT_PLAN_INFO& operator=(const tagINVESTMENT_PLAN_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<INVESTMENT_PLAN_TYPE_INFO>	type_info_list;
} INVESTMENT_PLAN_INFO;
typedef struct tagINVESTMENT_PLAN_INVESTMENT_REQ
{
    // construct
    tagINVESTMENT_PLAN_INVESTMENT_REQ();
    // operator =
    tagINVESTMENT_PLAN_INVESTMENT_REQ& operator=(const tagINVESTMENT_PLAN_INVESTMENT_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	moneypoint;
} INVESTMENT_PLAN_INVESTMENT_REQ;
typedef struct tagINVESTMENT_PLAN_INVESTMENT_ACK
{
    // construct
    tagINVESTMENT_PLAN_INVESTMENT_ACK();
    // operator =
    tagINVESTMENT_PLAN_INVESTMENT_ACK& operator=(const tagINVESTMENT_PLAN_INVESTMENT_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
} INVESTMENT_PLAN_INVESTMENT_ACK;
typedef struct tagINVESTMENT_PLAN_ADDITIONAL_REQ
{
    // construct
    tagINVESTMENT_PLAN_ADDITIONAL_REQ();
    // operator =
    tagINVESTMENT_PLAN_ADDITIONAL_REQ& operator=(const tagINVESTMENT_PLAN_ADDITIONAL_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	moneypoint;
} INVESTMENT_PLAN_ADDITIONAL_REQ;
typedef struct tagINVESTMENT_PLAN_ADDITIONAL_ACK
{
    // construct
    tagINVESTMENT_PLAN_ADDITIONAL_ACK();
    // operator =
    tagINVESTMENT_PLAN_ADDITIONAL_ACK& operator=(const tagINVESTMENT_PLAN_ADDITIONAL_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
} INVESTMENT_PLAN_ADDITIONAL_ACK;
typedef struct tagINVESTMENT_PLAN_REWARD_REQ
{
    // construct
    tagINVESTMENT_PLAN_REWARD_REQ();
    // operator =
    tagINVESTMENT_PLAN_REWARD_REQ& operator=(const tagINVESTMENT_PLAN_REWARD_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    unsigned int	day;
} INVESTMENT_PLAN_REWARD_REQ;
typedef struct tagINVESTMENT_PLAN_REWARD_ACK
{
    // construct
    tagINVESTMENT_PLAN_REWARD_ACK();
    // operator =
    tagINVESTMENT_PLAN_REWARD_ACK& operator=(const tagINVESTMENT_PLAN_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	err_code;
} INVESTMENT_PLAN_REWARD_ACK;
typedef struct tagOFFLINE_EVENT_INFO
{
    // construct
    tagOFFLINE_EVENT_INFO();
    // operator =
    tagOFFLINE_EVENT_INFO& operator=(const tagOFFLINE_EVENT_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	event_id;
    std::string	info_str;
} OFFLINE_EVENT_INFO;
typedef struct tagOFFLINE_EVENT_LIST
{
    // construct
    tagOFFLINE_EVENT_LIST();
    // operator =
    tagOFFLINE_EVENT_LIST& operator=(const tagOFFLINE_EVENT_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<OFFLINE_EVENT_INFO>	event_list;
} OFFLINE_EVENT_LIST;
typedef struct tagGAME_SETTING_INFO
{
    // construct
    tagGAME_SETTING_INFO();
    // operator =
    tagGAME_SETTING_INFO& operator=(const tagGAME_SETTING_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	id;
    std::string	info_json;
} GAME_SETTING_INFO;
typedef struct tagGAME_SETTING_LIST
{
    // construct
    tagGAME_SETTING_LIST();
    // operator =
    tagGAME_SETTING_LIST& operator=(const tagGAME_SETTING_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<GAME_SETTING_INFO>	setting_list;
} GAME_SETTING_LIST;
typedef struct tagVIP_STATISTICS_DATA
{
    // construct
    tagVIP_STATISTICS_DATA();
    // operator =
    tagVIP_STATISTICS_DATA& operator=(const tagVIP_STATISTICS_DATA& c);
    // Clear
    void Clear();
    // member
    unsigned int	level;
    unsigned int	max_value;
    unsigned int	cycles_minute;
    unsigned int	auto_value;
} VIP_STATISTICS_DATA;
typedef struct tagVIP_STATISTICS_CONFIG
{
    // construct
    tagVIP_STATISTICS_CONFIG();
    // operator =
    tagVIP_STATISTICS_CONFIG& operator=(const tagVIP_STATISTICS_CONFIG& c);
    // Clear
    void Clear();
    // member
    std::vector<VIP_STATISTICS_DATA>	vip_list;
} VIP_STATISTICS_CONFIG;
typedef struct tagGAME_SETTING_DONATE_CONFIG
{
    // construct
    tagGAME_SETTING_DONATE_CONFIG();
    // operator =
    tagGAME_SETTING_DONATE_CONFIG& operator=(const tagGAME_SETTING_DONATE_CONFIG& c);
    // Clear
    void Clear();
    // member
    unsigned int	after_minute;
    unsigned int	add_value;
} GAME_SETTING_DONATE_CONFIG;
typedef struct tagGAME_SETTING_VOID_FIELD_MULTI_CONFIG
{
    // construct
    tagGAME_SETTING_VOID_FIELD_MULTI_CONFIG();
    // operator =
    tagGAME_SETTING_VOID_FIELD_MULTI_CONFIG& operator=(const tagGAME_SETTING_VOID_FIELD_MULTI_CONFIG& c);
    // Clear
    void Clear();
    // member
    unsigned int	world_level_need;
    unsigned int	regular_boss_player_num;
    unsigned int	regular_moonless_player_num;
    unsigned int	regular_boss_channel_num;
    unsigned int	regular_moonless_channel_num;
    unsigned int	regular_boss_cd;
    unsigned int	regular_moonless_cd;
    unsigned int	timerange;
} GAME_SETTING_VOID_FIELD_MULTI_CONFIG;
typedef struct tagGAME_SETTING_VOID_FIELD_SOLO_CONFIG
{
    // construct
    tagGAME_SETTING_VOID_FIELD_SOLO_CONFIG();
    // operator =
    tagGAME_SETTING_VOID_FIELD_SOLO_CONFIG& operator=(const tagGAME_SETTING_VOID_FIELD_SOLO_CONFIG& c);
    // Clear
    void Clear();
    // member
    unsigned int	world_level_need;
    unsigned int	regular_boss_player_num;
    unsigned int	regular_boss_channel_num;
    unsigned int	regular_boss_cd;
    unsigned int	timerange;
} GAME_SETTING_VOID_FIELD_SOLO_CONFIG;
typedef struct tagVIP_STATISTICS_AUTO_GROWTH
{
    // construct
    tagVIP_STATISTICS_AUTO_GROWTH();
    // operator =
    tagVIP_STATISTICS_AUTO_GROWTH& operator=(const tagVIP_STATISTICS_AUTO_GROWTH& c);
    // Clear
    void Clear();
    // member
    unsigned char	vip_level;
    unsigned int	auto_value;
} VIP_STATISTICS_AUTO_GROWTH;
typedef struct tagVIP_STATISTICS_AUTO_GROWTH_LIST
{
    // construct
    tagVIP_STATISTICS_AUTO_GROWTH_LIST();
    // operator =
    tagVIP_STATISTICS_AUTO_GROWTH_LIST& operator=(const tagVIP_STATISTICS_AUTO_GROWTH_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<VIP_STATISTICS_AUTO_GROWTH>	auto_list;
} VIP_STATISTICS_AUTO_GROWTH_LIST;
typedef struct tagVIP_STATISTICS_PLAYER_VIP
{
    // construct
    tagVIP_STATISTICS_PLAYER_VIP();
    // operator =
    tagVIP_STATISTICS_PLAYER_VIP& operator=(const tagVIP_STATISTICS_PLAYER_VIP& c);
    // Clear
    void Clear();
    // member
    BIGINT_ID	player_id;
    unsigned char	vip_level;
} VIP_STATISTICS_PLAYER_VIP;
typedef struct tagVIP_STATISTICS_VIP_PLAYER_NUM
{
    // construct
    tagVIP_STATISTICS_VIP_PLAYER_NUM();
    // operator =
    tagVIP_STATISTICS_VIP_PLAYER_NUM& operator=(const tagVIP_STATISTICS_VIP_PLAYER_NUM& c);
    // Clear
    void Clear();
    // member
    unsigned char	vip_level;
    unsigned int	player_num;
} VIP_STATISTICS_VIP_PLAYER_NUM;
typedef struct tagVIP_STATISTICS_INFO
{
    // construct
    tagVIP_STATISTICS_INFO();
    // operator =
    tagVIP_STATISTICS_INFO& operator=(const tagVIP_STATISTICS_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<VIP_STATISTICS_VIP_PLAYER_NUM>	vip_list;
} VIP_STATISTICS_INFO;
typedef struct tagDONATE_INFO
{
    // construct
    tagDONATE_INFO();
    // operator =
    tagDONATE_INFO& operator=(const tagDONATE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	money_point;
    unsigned int	timer;
    unsigned int	state;
} DONATE_INFO;
typedef struct tagDONATE_ALL_INFO
{
    // construct
    tagDONATE_ALL_INFO();
    // operator =
    tagDONATE_ALL_INFO& operator=(const tagDONATE_ALL_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	money_point;
} DONATE_ALL_INFO;
typedef struct tagDONATE_PUT
{
    // construct
    tagDONATE_PUT();
    // operator =
    tagDONATE_PUT& operator=(const tagDONATE_PUT& c);
    // Clear
    void Clear();
    // member
    unsigned int	money_point;
} DONATE_PUT;
typedef struct tagDONATE_ADD_BINDMONEY_NTF
{
    // construct
    tagDONATE_ADD_BINDMONEY_NTF();
    // operator =
    tagDONATE_ADD_BINDMONEY_NTF& operator=(const tagDONATE_ADD_BINDMONEY_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	money_point;
} DONATE_ADD_BINDMONEY_NTF;
typedef struct tagDONATE_ALL_BINDMONEY_NTF
{
    // construct
    tagDONATE_ALL_BINDMONEY_NTF();
    // operator =
    tagDONATE_ALL_BINDMONEY_NTF& operator=(const tagDONATE_ALL_BINDMONEY_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	money_point;
} DONATE_ALL_BINDMONEY_NTF;
typedef struct tagDONATE_REWARD_MONEYPOINT
{
    // construct
    tagDONATE_REWARD_MONEYPOINT();
    // operator =
    tagDONATE_REWARD_MONEYPOINT& operator=(const tagDONATE_REWARD_MONEYPOINT& c);
    // Clear
    void Clear();
    // member
    unsigned int	money_point;
} DONATE_REWARD_MONEYPOINT;
typedef struct tagCHAOS_KILL_NUM_NTF
{
    // construct
    tagCHAOS_KILL_NUM_NTF();
    // operator =
    tagCHAOS_KILL_NUM_NTF& operator=(const tagCHAOS_KILL_NUM_NTF& c);
    // Clear
    void Clear();
    // member
    int	red_kill_num;
    int	blue_kill_num;
} CHAOS_KILL_NUM_NTF;
typedef struct tagCHAOS_PLAYER_INFO
{
    // construct
    tagCHAOS_PLAYER_INFO();
    // operator =
    tagCHAOS_PLAYER_INFO& operator=(const tagCHAOS_PLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    std::string	name;
    unsigned char	group;
    unsigned int	score;
    unsigned int	kill_num;
    unsigned int	rank;
} CHAOS_PLAYER_INFO;
typedef struct tagCHAOS_SCORE_RANK_NTF
{
    // construct
    tagCHAOS_SCORE_RANK_NTF();
    // operator =
    tagCHAOS_SCORE_RANK_NTF& operator=(const tagCHAOS_SCORE_RANK_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	my_rank;
    unsigned int	my_score;
    std::vector<CHAOS_PLAYER_INFO>	player_list;
} CHAOS_SCORE_RANK_NTF;
typedef struct tagCHAOS_END_PLAYER_INFO
{
    // construct
    tagCHAOS_END_PLAYER_INFO();
    // operator =
    tagCHAOS_END_PLAYER_INFO& operator=(const tagCHAOS_END_PLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	win;
    int	rank;
    std::string	player_name;
    int	integral_point;
    int	reward_integral;
    int	reward_alliance;
    int	group;
} CHAOS_END_PLAYER_INFO;
typedef struct tagCHAOS_END_NTF
{
    // construct
    tagCHAOS_END_NTF();
    // operator =
    tagCHAOS_END_NTF& operator=(const tagCHAOS_END_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	success;
    std::vector<CHAOS_END_PLAYER_INFO>	player_info_list;
} CHAOS_END_NTF;
typedef struct tagRANKING_ALLIANCE_INFO
{
    // construct
    tagRANKING_ALLIANCE_INFO();
    // operator =
    tagRANKING_ALLIANCE_INFO& operator=(const tagRANKING_ALLIANCE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	server_id;
    BIGINT_ID	player_id;
    std::string	player_name;
    std::string	plaform_name;
    int	rank;
    char	sex;
    char	career;
    int	level;
    int	vip_level;
    int	integral;
    int	win_pro;
    unsigned int	season_time;
} RANKING_ALLIANCE_INFO;
typedef struct tagCHAOS_REWARD_OFFLINE_EVENT
{
    // construct
    tagCHAOS_REWARD_OFFLINE_EVENT();
    // operator =
    tagCHAOS_REWARD_OFFLINE_EVENT& operator=(const tagCHAOS_REWARD_OFFLINE_EVENT& c);
    // Clear
    void Clear();
    // member
    int	season_time;
    int	integral_point;
    int	alliance_point;
    int	win;
    unsigned int	record_time;
} CHAOS_REWARD_OFFLINE_EVENT;
typedef struct tagCHAOS_TEAMMEMBER
{
    // construct
    tagCHAOS_TEAMMEMBER();
    // operator =
    tagCHAOS_TEAMMEMBER& operator=(const tagCHAOS_TEAMMEMBER& c);
    // Clear
    void Clear();
    // member
    std::string	name;
    int	level;
    char	sex;
    char	career;
    int	max_hp;
    int	hp;
    int	group;
    int	object_id;
} CHAOS_TEAMMEMBER;
typedef struct tagCHAOS_BATTLE_INFO_NTF
{
    // construct
    tagCHAOS_BATTLE_INFO_NTF();
    // operator =
    tagCHAOS_BATTLE_INFO_NTF& operator=(const tagCHAOS_BATTLE_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    std::string	attack_name;
    std::string	deader_name;
    int	attack_group;
    int	deader_group;
    int	combo;
} CHAOS_BATTLE_INFO_NTF;
typedef struct tagSEASON_INFO
{
    // construct
    tagSEASON_INFO();
    // operator =
    tagSEASON_INFO& operator=(const tagSEASON_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	season_end_time;
} SEASON_INFO;
typedef struct tagCHAOS_KILL_INFO_NTF
{
    // construct
    tagCHAOS_KILL_INFO_NTF();
    // operator =
    tagCHAOS_KILL_INFO_NTF& operator=(const tagCHAOS_KILL_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    int	killer_group;
    std::string	player_name;
} CHAOS_KILL_INFO_NTF;
typedef struct tagCHAOS_PLAYER_INOUT_NTF
{
    // construct
    tagCHAOS_PLAYER_INOUT_NTF();
    // operator =
    tagCHAOS_PLAYER_INOUT_NTF& operator=(const tagCHAOS_PLAYER_INOUT_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned char	type;
    int	group;
    std::string	player_name;
} CHAOS_PLAYER_INOUT_NTF;
typedef struct tagDUNGEON_RUN_ACK
{
    // construct
    tagDUNGEON_RUN_ACK();
    // operator =
    tagDUNGEON_RUN_ACK& operator=(const tagDUNGEON_RUN_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	type;
    int	time;
    unsigned int	floor;
    unsigned int	tier;
} DUNGEON_RUN_ACK;
typedef struct tagDUNGEON_MOSTER_ID_LIST
{
    // construct
    tagDUNGEON_MOSTER_ID_LIST();
    // operator =
    tagDUNGEON_MOSTER_ID_LIST& operator=(const tagDUNGEON_MOSTER_ID_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<unsigned int>	id_list;
} DUNGEON_MOSTER_ID_LIST;
typedef struct tagEGG_INFO
{
    // construct
    tagEGG_INFO();
    // operator =
    tagEGG_INFO& operator=(const tagEGG_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	type;
    int	num;
    int	total;
} EGG_INFO;
typedef struct tagEGG_INFO_CONFI
{
    // construct
    tagEGG_INFO_CONFI();
    // operator =
    tagEGG_INFO_CONFI& operator=(const tagEGG_INFO_CONFI& c);
    // Clear
    void Clear();
    // member
    unsigned int	type;
    int	item_id;
    int	need_num;
    int	package_id;
} EGG_INFO_CONFI;
typedef struct tagBUY_CHEAPS_ITEM
{
    // construct
    tagBUY_CHEAPS_ITEM();
    // operator =
    tagBUY_CHEAPS_ITEM& operator=(const tagBUY_CHEAPS_ITEM& c);
    // Clear
    void Clear();
    // member
    int	day;
    unsigned int	discount_item_id;
    int	discount_item_num;
    unsigned int	ultimate_item_id;
    int	ultimate_item_num;
    int	original_cost;
    int	discount_1;
    int	discount_2;
    int	discount_3;
    int	discount_4;
} BUY_CHEAPS_ITEM;
typedef struct tagBUY_CHEAP_CONFIG
{
    // construct
    tagBUY_CHEAP_CONFIG();
    // operator =
    tagBUY_CHEAP_CONFIG& operator=(const tagBUY_CHEAP_CONFIG& c);
    // Clear
    void Clear();
    // member
    std::vector<BUY_CHEAPS_ITEM>	buy_cheaps;
} BUY_CHEAP_CONFIG;
typedef struct tagBUY_CHEAP_STATE
{
    // construct
    tagBUY_CHEAP_STATE();
    // operator =
    tagBUY_CHEAP_STATE& operator=(const tagBUY_CHEAP_STATE& c);
    // Clear
    void Clear();
    // member
    int	id;
    unsigned char	state;
} BUY_CHEAP_STATE;
typedef struct tagBUY_CHEAP_INFO
{
    // construct
    tagBUY_CHEAP_INFO();
    // operator =
    tagBUY_CHEAP_INFO& operator=(const tagBUY_CHEAP_INFO& c);
    // Clear
    void Clear();
    // member
    int	config_day;
    std::vector<BUY_CHEAP_STATE>	discount_list;
    int	ultimate_reward;
} BUY_CHEAP_INFO;
typedef struct tagBUY_CHEAP_BUY_REQ
{
    // construct
    tagBUY_CHEAP_BUY_REQ();
    // operator =
    tagBUY_CHEAP_BUY_REQ& operator=(const tagBUY_CHEAP_BUY_REQ& c);
    // Clear
    void Clear();
    // member
    int	buy_index;
} BUY_CHEAP_BUY_REQ;
typedef struct tagBUY_CHEAP_BUY_ACK
{
    // construct
    tagBUY_CHEAP_BUY_ACK();
    // operator =
    tagBUY_CHEAP_BUY_ACK& operator=(const tagBUY_CHEAP_BUY_ACK& c);
    // Clear
    void Clear();
    // member
    int	err_code;
    int	buy_index;
    BUY_CHEAP_INFO	info;
} BUY_CHEAP_BUY_ACK;
typedef struct tagBUY_CHEAP_REWARD_ACK
{
    // construct
    tagBUY_CHEAP_REWARD_ACK();
    // operator =
    tagBUY_CHEAP_REWARD_ACK& operator=(const tagBUY_CHEAP_REWARD_ACK& c);
    // Clear
    void Clear();
    // member
    int	err_code;
    BUY_CHEAP_INFO	info;
} BUY_CHEAP_REWARD_ACK;
typedef struct tagDAILY_DRAW_FASHION_DAY
{
    // construct
    tagDAILY_DRAW_FASHION_DAY();
    // operator =
    tagDAILY_DRAW_FASHION_DAY& operator=(const tagDAILY_DRAW_FASHION_DAY& c);
    // Clear
    void Clear();
    // member
    int	id;
    int	one_pid;
    std::string	show_item;
} DAILY_DRAW_FASHION_DAY;
typedef struct tagDAILY_DRAW_FASHION_WEEK
{
    // construct
    tagDAILY_DRAW_FASHION_WEEK();
    // operator =
    tagDAILY_DRAW_FASHION_WEEK& operator=(const tagDAILY_DRAW_FASHION_WEEK& c);
    // Clear
    void Clear();
    // member
    int	id;
    int	fashion_id;
    int	ten_pid;
    std::string	show_item;
    std::vector<int>	daylist;
} DAILY_DRAW_FASHION_WEEK;
typedef struct tagDAILY_DRAW_FASHION_INFO
{
    // construct
    tagDAILY_DRAW_FASHION_INFO();
    // operator =
    tagDAILY_DRAW_FASHION_INFO& operator=(const tagDAILY_DRAW_FASHION_INFO& c);
    // Clear
    void Clear();
    // member
    int	cur_week;
    int	cur_day;
    int	next_week;
    unsigned int	last_time;
} DAILY_DRAW_FASHION_INFO;
typedef struct tagGAMESERVER_STATE
{
    // construct
    tagGAMESERVER_STATE();
    // operator =
    tagGAMESERVER_STATE& operator=(const tagGAMESERVER_STATE& c);
    // Clear
    void Clear();
    // member
    int	player_num;
} GAMESERVER_STATE;
typedef struct tagHEAD_PORTRAIT_INFO
{
    // construct
    tagHEAD_PORTRAIT_INFO();
    // operator =
    tagHEAD_PORTRAIT_INFO& operator=(const tagHEAD_PORTRAIT_INFO& c);
    // Clear
    void Clear();
    // member
    int	cur;
    std::vector<unsigned int>	open_list;
} HEAD_PORTRAIT_INFO;
typedef struct tagALCHEMY_MAKE_ITEM
{
    // construct
    tagALCHEMY_MAKE_ITEM();
    // operator =
    tagALCHEMY_MAKE_ITEM& operator=(const tagALCHEMY_MAKE_ITEM& c);
    // Clear
    void Clear();
    // member
    int	id;
    int	num;
} ALCHEMY_MAKE_ITEM;
typedef struct tagDECOMPOSE_INFO_REQ
{
    // construct
    tagDECOMPOSE_INFO_REQ();
    // operator =
    tagDECOMPOSE_INFO_REQ& operator=(const tagDECOMPOSE_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    std::vector<ITEM_BASE>	items;
} DECOMPOSE_INFO_REQ;
typedef struct tagDECOMPOSE_INFO_ACK
{
    // construct
    tagDECOMPOSE_INFO_ACK();
    // operator =
    tagDECOMPOSE_INFO_ACK& operator=(const tagDECOMPOSE_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    std::vector<ITEM_MATERIAL>	materials;
} DECOMPOSE_INFO_ACK;
typedef struct tagACTIVECODE_USE_ACK
{
    // construct
    tagACTIVECODE_USE_ACK();
    // operator =
    tagACTIVECODE_USE_ACK& operator=(const tagACTIVECODE_USE_ACK& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    std::string	title;
    REWARD_TABLE	items;
} ACTIVECODE_USE_ACK;
typedef struct tagFORMATION_LEVEL_INFO
{
    // construct
    tagFORMATION_LEVEL_INFO();
    // operator =
    tagFORMATION_LEVEL_INFO& operator=(const tagFORMATION_LEVEL_INFO& c);
    // Clear
    void Clear();
    // member
    int	id;
    int	level;
    int	exp;
    std::vector<FORMATION_LOCK_INFO>	lock_list;
} FORMATION_LEVEL_INFO;
typedef struct tagPET_FORMATION_UPGRADE_ACK
{
    // construct
    tagPET_FORMATION_UPGRADE_ACK();
    // operator =
    tagPET_FORMATION_UPGRADE_ACK& operator=(const tagPET_FORMATION_UPGRADE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	error_code;
    FORMATION_LEVEL_INFO	formation;
} PET_FORMATION_UPGRADE_ACK;
typedef struct tagPET_FORMATION_CHANGE_ACK
{
    // construct
    tagPET_FORMATION_CHANGE_ACK();
    // operator =
    tagPET_FORMATION_CHANGE_ACK& operator=(const tagPET_FORMATION_CHANGE_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	error_code;
    int	formationId;
    FORMATION_LEVEL_INFO	formation;
} PET_FORMATION_CHANGE_ACK;
typedef struct tagFASHION_SMELT_REQ
{
    // construct
    tagFASHION_SMELT_REQ();
    // operator =
    tagFASHION_SMELT_REQ& operator=(const tagFASHION_SMELT_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    unsigned int	type;
    unsigned int	quality;
    std::vector<FASHION_SMELT_ITEM>	item_list;
} FASHION_SMELT_REQ;
typedef struct tagGLOBAL_FASHION_INFO
{
    // construct
    tagGLOBAL_FASHION_INFO();
    // operator =
    tagGLOBAL_FASHION_INFO& operator=(const tagGLOBAL_FASHION_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<PACKAGE_TIME_INFO>	package_time;
} GLOBAL_FASHION_INFO;
typedef struct tagGLOBAL_CONFIG_BAG
{
    // construct
    tagGLOBAL_CONFIG_BAG();
    // operator =
    tagGLOBAL_CONFIG_BAG& operator=(const tagGLOBAL_CONFIG_BAG& c);
    // Clear
    void Clear();
    // member
    GLOBAL_FASHION_INFO	fashion_info;
} GLOBAL_CONFIG_BAG;
typedef struct tagGLOBAL_FASHION_INFO_LIST
{
    // construct
    tagGLOBAL_FASHION_INFO_LIST();
    // operator =
    tagGLOBAL_FASHION_INFO_LIST& operator=(const tagGLOBAL_FASHION_INFO_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<GLOBAL_FASHION_INFO>	info_list;
} GLOBAL_FASHION_INFO_LIST;
typedef struct tagTREASURE_PACKAGE_INFO
{
    // construct
    tagTREASURE_PACKAGE_INFO();
    // operator =
    tagTREASURE_PACKAGE_INFO& operator=(const tagTREASURE_PACKAGE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned short	extract;
    unsigned short	package_id;
    unsigned short	times;
    unsigned short	triget_packageid;
    unsigned short	type_limit;
    unsigned int	total_probability;
    std::vector<TREASURE_PACKAGE_ITEM>	item_list;
} TREASURE_PACKAGE_INFO;
typedef struct tagFASHION_BAG
{
    // construct
    tagFASHION_BAG();
    // operator =
    tagFASHION_BAG& operator=(const tagFASHION_BAG& c);
    // Clear
    void Clear();
    // member
    unsigned int	fashion_id;
    unsigned int	fashion_skill_id;
    std::vector<FASHION_INFO>	fashion_list;
    std::vector<unsigned int>	random_list;
    unsigned int	last_finish_time;
    std::vector<PACKAGE_COUNT_INFO>	package_count;
    std::vector<PACKAGE_TIME_INFO>	package_time;
    unsigned int	fashion_battle_power;
} FASHION_BAG;
typedef struct tagSTONE_INFO
{
    // construct
    tagSTONE_INFO();
    // operator =
    tagSTONE_INFO& operator=(const tagSTONE_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<ITEM_STONE>	stone_list;
} STONE_INFO;
typedef struct tagPACKAGE_INFO
{
    // construct
    tagPACKAGE_INFO();
    // operator =
    tagPACKAGE_INFO& operator=(const tagPACKAGE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	type;
    std::vector<PACKAGE_COUNT_INFO>	package_count;
    std::vector<PACKAGE_TIME_INFO>	package_time;
} PACKAGE_INFO;
typedef struct tagITEM_EQUIP
{
    // construct
    tagITEM_EQUIP();
    // operator =
    tagITEM_EQUIP& operator=(const tagITEM_EQUIP& c);
    // Clear
    void Clear();
    // member
    ITEM_BASE	base;
    unsigned short	star;
    std::vector<unsigned int>	quality_attribute_list;
    std::vector<unsigned int>	wash_up_attribute_list;
    std::vector<unsigned int>	wash_up_lock_list;
    std::vector<unsigned int>	enchant_attribute_list;
    std::vector<unsigned int>	gem_hole_list;
    std::vector<ITEM_STONE>	gem_stone_list;
    std::vector<KEY_VALUE>	all_attribute_list;
    std::vector<KEY_VALUE>	next_star_attribute_list;
} ITEM_EQUIP;
typedef struct tagITEM_INFO
{
    // construct
    tagITEM_INFO();
    // operator =
    tagITEM_INFO& operator=(const tagITEM_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<ITEM_EQUIP>	equip_list;
    std::vector<ITEM_CONSUME>	consume_list;
    std::vector<ITEM_MATERIAL>	material_list;
    std::vector<ITEM_STONE>	stone_list;
} ITEM_INFO;
typedef struct tagOPT_ITEM_REQ
{
    // construct
    tagOPT_ITEM_REQ();
    // operator =
    tagOPT_ITEM_REQ& operator=(const tagOPT_ITEM_REQ& c);
    // Clear
    void Clear();
    // member
    std::vector<OPT_ITEM_INFO>	opt_list;
} OPT_ITEM_REQ;
typedef struct tagOPT_ITEM_ACK
{
    // construct
    tagOPT_ITEM_ACK();
    // operator =
    tagOPT_ITEM_ACK& operator=(const tagOPT_ITEM_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    std::vector<OPT_ITEM_INFO>	opt_list;
} OPT_ITEM_ACK;
typedef struct tagOPT_ITEM_INFO_NTF
{
    // construct
    tagOPT_ITEM_INFO_NTF();
    // operator =
    tagOPT_ITEM_INFO_NTF& operator=(const tagOPT_ITEM_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    std::vector<OPT_ITEM_INFO>	opt_list;
    ITEM_INFO	add_info;
    std::vector<ITEM_BASE>	sub_list;
    ITEM_INFO	update_info;
} OPT_ITEM_INFO_NTF;
typedef struct tagITEM_STRENGTHEN_ACK
{
    // construct
    tagITEM_STRENGTHEN_ACK();
    // operator =
    tagITEM_STRENGTHEN_ACK& operator=(const tagITEM_STRENGTHEN_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    ITEM_INFO	item_info;
} ITEM_STRENGTHEN_ACK;
typedef struct tagEQUIP_WASH_UP_REQ
{
    // construct
    tagEQUIP_WASH_UP_REQ();
    // operator =
    tagEQUIP_WASH_UP_REQ& operator=(const tagEQUIP_WASH_UP_REQ& c);
    // Clear
    void Clear();
    // member
    ITEM_EQUIP	equip;
    std::vector<unsigned short>	lock_index;
} EQUIP_WASH_UP_REQ;
typedef struct tagEQUIP_STAR_UP_REQ
{
    // construct
    tagEQUIP_STAR_UP_REQ();
    // operator =
    tagEQUIP_STAR_UP_REQ& operator=(const tagEQUIP_STAR_UP_REQ& c);
    // Clear
    void Clear();
    // member
    ITEM_EQUIP	equip;
    unsigned short	success_material_count;
} EQUIP_STAR_UP_REQ;
typedef struct tagEQUIP_ENCHANT_REQ
{
    // construct
    tagEQUIP_ENCHANT_REQ();
    // operator =
    tagEQUIP_ENCHANT_REQ& operator=(const tagEQUIP_ENCHANT_REQ& c);
    // Clear
    void Clear();
    // member
    ITEM_EQUIP	equip;
    unsigned short	attribute_id;
} EQUIP_ENCHANT_REQ;
typedef struct tagGEM_STRENGTHEN_ACK
{
    // construct
    tagGEM_STRENGTHEN_ACK();
    // operator =
    tagGEM_STRENGTHEN_ACK& operator=(const tagGEM_STRENGTHEN_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    ITEM_INFO	item_info;
} GEM_STRENGTHEN_ACK;
typedef struct tagTASK_GAME_INFO
{
    // construct
    tagTASK_GAME_INFO();
    // operator =
    tagTASK_GAME_INFO& operator=(const tagTASK_GAME_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	complete_main_task_id;
    unsigned int	daily_task_flash_time;
    unsigned int	daily_task_count;
    unsigned char	daily_task_reset_count;
    unsigned int	crusade_task_flash_time;
    unsigned int	crusade_task_count;
    unsigned int	guard_task_count;
    unsigned char	guard_buy_count;
    unsigned int	guard_buy_day_count;
    unsigned short	open_box;
    std::vector<unsigned int>	branch_task_flag;
    std::vector<TASK_RECORD>	list;
    TASK_GUILD_INFO	guild_task;
} TASK_GAME_INFO;
typedef struct tagTASK_FESTIVAL_INFO
{
    // construct
    tagTASK_FESTIVAL_INFO();
    // operator =
    tagTASK_FESTIVAL_INFO& operator=(const tagTASK_FESTIVAL_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<FESTIVAL_RECORD>	festival_list;
    std::vector<TASK_RECORD>	task_list;
} TASK_FESTIVAL_INFO;
typedef struct tagTASK_INFO
{
    // construct
    tagTASK_INFO();
    // operator =
    tagTASK_INFO& operator=(const tagTASK_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	db_flag;
    TASK_GAME_INFO	task_game_info;
    TASK_FESTIVAL_INFO	task_festival_info;
} TASK_INFO;
typedef struct tagTASK_REFRESH_ACK
{
    // construct
    tagTASK_REFRESH_ACK();
    // operator =
    tagTASK_REFRESH_ACK& operator=(const tagTASK_REFRESH_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	daily_task_count;
    unsigned char	daily_task_reset_count;
    unsigned int	crusade_task_flash_time;
    unsigned short	crusade_task_count;
    unsigned short	guard_task_count;
    unsigned char	guard_buy_count;
    int	guard_day_buy_count;
    unsigned short	open_box;
    TASK_GUILD_REFRESH_ACK	guild_refresh;
} TASK_REFRESH_ACK;
typedef struct tagPROP_BASE_INFO
{
    // construct
    tagPROP_BASE_INFO();
    // operator =
    tagPROP_BASE_INFO& operator=(const tagPROP_BASE_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned int	centersvr_id;
    unsigned int	login_id_l;
    unsigned int	login_id_h;
    std::string	account;
    std::string	name;
    std::string	platform_server_name;
    int	region;
    int	timezone;
    char	sex;
    char	career;
    int	level;
    int	exp;
    int	vigor;
    int	sys_vigor;
    int	buy_vigor;
    unsigned int	vigor_reftime;
    int	vigor_buytimes;
    int	team_buytimes;
    int	team_dungeon_systimes;
    int	team_dungeon_buytimes;
    int	stone_turn_gold_times;
    int	zombie_dungeon_times;
    int	zombie_dungeon_live_times;
    unsigned int	daily_reftime;
    int	battle_power;
    int	game_point;
    int	money_point;
    int	bind_money_point;
    int	soul_point;
    int	star_point;
    int	honor_point;
    int	guild_point;
    int	spend_plus;
    int	battle_soul_point;
    unsigned int	hp;
    unsigned int	mp;
    unsigned int	guild_id_h;
    unsigned int	guild_id_l;
    unsigned int	guild_join_time;
    unsigned int	unionmap_id;
    int	x;
    int	y;
    unsigned int	city_id;
    int	city_x;
    int	city_y;
    int	angle;
    unsigned int	team_id_h;
    unsigned int	team_id_l;
    unsigned int	right_flag;
    unsigned int	change_dungeon_count;
    unsigned int	incarnation_point;
    unsigned int	city_fight_cd;
    VIP_INFO	vip_info;
    GUILD_WELFARE_INFO	guild_welfare_info;
    CITY_FIGHT_PLAYER_INFO	city_fight_info;
    FCM_INFO	fcm_info;
    VIGOR_INFO	vigor_info;
    OFF_LINE_VIGOR_INFO	off_line_vigor_info;
    unsigned int	online_time;
    int	getwelcome_reward;
    unsigned int	void_field_time;
    unsigned int	void_field_reftime;
    unsigned int	login_ip;
} PROP_BASE_INFO;
typedef struct tagBUFF_INFO
{
    // construct
    tagBUFF_INFO();
    // operator =
    tagBUFF_INFO& operator=(const tagBUFF_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	buff_id;
    int	buff_val1;
    int	buff_val2;
    unsigned int	buff_time;
    unsigned int	buff_remain_time;
    unsigned int	buff_type;
    unsigned int	end_time;
    unsigned int	buff_overlap;
    unsigned char	overlap_num;
    unsigned char	is_aura;
    unsigned char	aura_self;
    unsigned char	aura_friend;
    unsigned char	aura_enemy;
    int	aura_radius;
    unsigned int	aura_buff_id;
    std::vector<BUFF_FUNC>	buff_func;
} BUFF_INFO;
typedef struct tagOFFLINE_PLAYER_ACK
{
    // construct
    tagOFFLINE_PLAYER_ACK();
    // operator =
    tagOFFLINE_PLAYER_ACK& operator=(const tagOFFLINE_PLAYER_ACK& c);
    // Clear
    void Clear();
    // member
    OFFLINE_PLAYER_INFO	offline_player_info;
    unsigned char	reason;
} OFFLINE_PLAYER_ACK;
typedef struct tagPLAYER_DOOR_INFO
{
    // construct
    tagPLAYER_DOOR_INFO();
    // operator =
    tagPLAYER_DOOR_INFO& operator=(const tagPLAYER_DOOR_INFO& c);
    // Clear
    void Clear();
    // member
    OFFLINE_PLAYER_INFO	select_player;
    unsigned int	rank;
    unsigned short	buy_challenge_count;
    unsigned short	challenge_count;
    unsigned short	winning_steak;
    unsigned int	cd_timestamp;
    unsigned int	cd_seconds;
    PLAYER_DOOR_REWARD_INFO	rewarded_info;
    unsigned short	is_init;
} PLAYER_DOOR_INFO;
typedef struct tagACTIVITY_LIST
{
    // construct
    tagACTIVITY_LIST();
    // operator =
    tagACTIVITY_LIST& operator=(const tagACTIVITY_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<ACTIVITY_INFO>	activity_list;
} ACTIVITY_LIST;
typedef struct tagWING_INFO
{
    // construct
    tagWING_INFO();
    // operator =
    tagWING_INFO& operator=(const tagWING_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<WING_ONE_INFO>	list;
    int	transmogrification;
    int	count;
} WING_INFO;
typedef struct tagWING_TRANSMOGRIFICATION_ACK
{
    // construct
    tagWING_TRANSMOGRIFICATION_ACK();
    // operator =
    tagWING_TRANSMOGRIFICATION_ACK& operator=(const tagWING_TRANSMOGRIFICATION_ACK& c);
    // Clear
    void Clear();
    // member
    int	err;
    WING_INFO	info;
} WING_TRANSMOGRIFICATION_ACK;
typedef struct tagFINAL_SKILL_INFO
{
    // construct
    tagFINAL_SKILL_INFO();
    // operator =
    tagFINAL_SKILL_INFO& operator=(const tagFINAL_SKILL_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	skill_id;
    SKILL_ARGUMETNS	skill_args;
    unsigned char	book_valid;
    unsigned char	skill_valid;
    unsigned char	quality;
    unsigned char	level;
    unsigned int	mp;
    unsigned int	cooldown;
    std::vector<unsigned short>	rune_ids;
    std::vector<int>	rune_oks;
    std::vector<KEY_VALUE>	props;
} FINAL_SKILL_INFO;
typedef struct tagFINAL_SKILL_INFO_LIST
{
    // construct
    tagFINAL_SKILL_INFO_LIST();
    // operator =
    tagFINAL_SKILL_INFO_LIST& operator=(const tagFINAL_SKILL_INFO_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<FINAL_SKILL_INFO>	list;
} FINAL_SKILL_INFO_LIST;
typedef struct tagFRIEND_INFO
{
    // construct
    tagFRIEND_INFO();
    // operator =
    tagFRIEND_INFO& operator=(const tagFRIEND_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned int	player_id_h;
    unsigned int	player_id_l;
    std::string	name;
    HEAD_PORTRAIT_INFO	head_portrait;
    char	sex;
    int	level;
    int	logout_time;
} FRIEND_INFO;
typedef struct tagFRIEND_LIST
{
    // construct
    tagFRIEND_LIST();
    // operator =
    tagFRIEND_LIST& operator=(const tagFRIEND_LIST& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    std::vector<FRIEND_INFO>	list;
} FRIEND_LIST;
typedef struct tagTRIGGER_APPEAR
{
    // construct
    tagTRIGGER_APPEAR();
    // operator =
    tagTRIGGER_APPEAR& operator=(const tagTRIGGER_APPEAR& c);
    // Clear
    void Clear();
    // member
    SCENEOBJECT_APPEAR	base;
    unsigned int	show_id;
    std::string	obs_name;
    VECTOR3D_INT	obs_pos;
    VECTOR3D_INT	pick_size;
    VECTOR3D_INT	pick_pos;
    unsigned int	func_id;
    unsigned int	func_type;
    int	radius;
    unsigned char	is_touch;
    unsigned char	enable;
    unsigned char	triggered;
} TRIGGER_APPEAR;
typedef struct tagTOUCH_APPEAR
{
    // construct
    tagTOUCH_APPEAR();
    // operator =
    tagTOUCH_APPEAR& operator=(const tagTOUCH_APPEAR& c);
    // Clear
    void Clear();
    // member
    SCENEOBJECT_APPEAR	base;
    int	radius;
    unsigned int	show_id;
    std::string	obs_name;
    VECTOR3D_INT	obs_pos;
    VECTOR3D_INT	pick_size;
    VECTOR3D_INT	pick_pos;
} TOUCH_APPEAR;
typedef struct tagDROP_OBJECT_APPEAR
{
    // construct
    tagDROP_OBJECT_APPEAR();
    // operator =
    tagDROP_OBJECT_APPEAR& operator=(const tagDROP_OBJECT_APPEAR& c);
    // Clear
    void Clear();
    // member
    SCENEOBJECT_APPEAR	base;
    int	from_x;
    int	from_y;
    unsigned int	passtime;
    unsigned int	lifetime;
    unsigned int	owner_id;
    ITEM_INFO	item_info;
} DROP_OBJECT_APPEAR;
typedef struct tagSCENEOBJECT_APPEAR_LIST
{
    // construct
    tagSCENEOBJECT_APPEAR_LIST();
    // operator =
    tagSCENEOBJECT_APPEAR_LIST& operator=(const tagSCENEOBJECT_APPEAR_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<TRIGGER_APPEAR>	trigger_list;
    std::vector<TOUCH_APPEAR>	touch_list;
    std::vector<DROP_OBJECT_APPEAR>	drop_object_list;
} SCENEOBJECT_APPEAR_LIST;
typedef struct tagUSE_SKILL_REQ
{
    // construct
    tagUSE_SKILL_REQ();
    // operator =
    tagUSE_SKILL_REQ& operator=(const tagUSE_SKILL_REQ& c);
    // Clear
    void Clear();
    // member
    unsigned int	skill_id;
    unsigned int	skill_slot;
    unsigned int	skill_obj_id;
    SHOOT_TARGET	target;
    SKILL_ARGUMETNS	skill_args;
} USE_SKILL_REQ;
typedef struct tagUSE_SKILL_NTF
{
    // construct
    tagUSE_SKILL_NTF();
    // operator =
    tagUSE_SKILL_NTF& operator=(const tagUSE_SKILL_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	owner_id;
    unsigned int	skill_cd;
    int	error;
    USE_SKILL_REQ	skill;
} USE_SKILL_NTF;
typedef struct tagCROSS_TEAM_SHOW_LIST_ACK
{
    // construct
    tagCROSS_TEAM_SHOW_LIST_ACK();
    // operator =
    tagCROSS_TEAM_SHOW_LIST_ACK& operator=(const tagCROSS_TEAM_SHOW_LIST_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned int	curr_page_num;
    unsigned int	total_page_num;
    std::vector<CROSS_TEAM_SHOW_INFO>	team_list;
} CROSS_TEAM_SHOW_LIST_ACK;
typedef struct tagPLOT_DUNGEON_INFO
{
    // construct
    tagPLOT_DUNGEON_INFO();
    // operator =
    tagPLOT_DUNGEON_INFO& operator=(const tagPLOT_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<PLOT_UNIT_DUNGEON_INFO>	open_dungeon;
} PLOT_DUNGEON_INFO;
typedef struct tagSOUL_DUNGEON_INFO
{
    // construct
    tagSOUL_DUNGEON_INFO();
    // operator =
    tagSOUL_DUNGEON_INFO& operator=(const tagSOUL_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<SOUL_UNIT_DUNGEON_INFO>	open_dungeon;
} SOUL_DUNGEON_INFO;
typedef struct tagDAILY_DUNGEON_INFO
{
    // construct
    tagDAILY_DUNGEON_INFO();
    // operator =
    tagDAILY_DUNGEON_INFO& operator=(const tagDAILY_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<DAILY_UNIT_DUNGEON_INFO>	open_dungeon;
} DAILY_DUNGEON_INFO;
typedef struct tagPLAYER_DUNGEON_INFO
{
    // construct
    tagPLAYER_DUNGEON_INFO();
    // operator =
    tagPLAYER_DUNGEON_INFO& operator=(const tagPLAYER_DUNGEON_INFO& c);
    // Clear
    void Clear();
    // member
    OPEN_DUNGEON_INFO	open_dungeon_info;
    DUNGEON_RECORD	dungeon_record;
    PLOT_DUNGEON_INFO	plot_dungeon_info;
    SOUL_DUNGEON_INFO	soul_dungeon_info;
    DAILY_DUNGEON_INFO	daily_dungeon_info;
} PLAYER_DUNGEON_INFO;
typedef struct tagGUILD_MEMBER
{
    // construct
    tagGUILD_MEMBER();
    // operator =
    tagGUILD_MEMBER& operator=(const tagGUILD_MEMBER& c);
    // Clear
    void Clear();
    // member
    unsigned int	gatesvr_id;
    unsigned int	player_id_l;
    unsigned int	player_id_h;
    int	office;
    std::string	name;
    char	sex;
    char	career;
    int	level;
    int	battle_power;
    int	contribute_value;
    unsigned int	last_online;
    unsigned char	is_online;
    VIP_INFO	vip_info;
} GUILD_MEMBER;
typedef struct tagGUILD_INFO
{
    // construct
    tagGUILD_INFO();
    // operator =
    tagGUILD_INFO& operator=(const tagGUILD_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned char	opt_flag;
    unsigned int	guild_id_l;
    unsigned int	guild_id_h;
    std::string	guild_name;
    std::string	bulletin;
    int	level;
    int	exp;
    unsigned int	flag;
    int	guild_boss_level;
    int	guild_boss_exp;
    unsigned int	guild_boss_start_time;
    unsigned int	guild_boss_create_time;
    unsigned int	guild_boss_dead_time;
    unsigned char	lock;
    int	battle_power;
    unsigned int	center_server_id;
    std::vector<GUILD_MEMBER>	member_list;
    std::vector<GUILD_ADDITION>	addition_list;
} GUILD_INFO;
typedef struct tagGUILD_NOTICE_ACK
{
    // construct
    tagGUILD_NOTICE_ACK();
    // operator =
    tagGUILD_NOTICE_ACK& operator=(const tagGUILD_NOTICE_ACK& c);
    // Clear
    void Clear();
    // member
    std::string	player_name;
    std::string	master_name;
    VIP_INFO	player_vip;
    VIP_INFO	master_vip;
    int	player_office;
    int	master_office;
    int	guild_notice_type;
} GUILD_NOTICE_ACK;
typedef struct tagRANKING_PLAYER_INFO
{
    // construct
    tagRANKING_PLAYER_INFO();
    // operator =
    tagRANKING_PLAYER_INFO& operator=(const tagRANKING_PLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    int	rank;
    std::string	name;
    char	sex;
    int	level;
    char	career;
    std::string	guild_name;
    int	num;
    int	battle_power;
    HEAD_PORTRAIT_INFO	head_portrait;
} RANKING_PLAYER_INFO;
typedef struct tagRANKING_LIST
{
    // construct
    tagRANKING_LIST();
    // operator =
    tagRANKING_LIST& operator=(const tagRANKING_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<RANKING_PLAYER_INFO>	list;
} RANKING_LIST;
typedef struct tagRANKING_ACK
{
    // construct
    tagRANKING_ACK();
    // operator =
    tagRANKING_ACK& operator=(const tagRANKING_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned char	rank_type;
    int	my_ranking;
    RANKING_LIST	rank_list;
    unsigned int	refresh_time;
    int	max_page;
} RANKING_ACK;
typedef struct tagINVESTMENT_OPERATION_ACK
{
    // construct
    tagINVESTMENT_OPERATION_ACK();
    // operator =
    tagINVESTMENT_OPERATION_ACK& operator=(const tagINVESTMENT_OPERATION_ACK& c);
    // Clear
    void Clear();
    // member
    std::vector<INVESTMENT_OPERATION_NTF>	operation_list;
} INVESTMENT_OPERATION_ACK;
typedef struct tagFACTION_PK_RANK_NTF
{
    // construct
    tagFACTION_PK_RANK_NTF();
    // operator =
    tagFACTION_PK_RANK_NTF& operator=(const tagFACTION_PK_RANK_NTF& c);
    // Clear
    void Clear();
    // member
    FACTION_PLAYER_INFO	my_info;
    std::vector<FACTION_PLAYER_INFO>	rank_list;
} FACTION_PK_RANK_NTF;
typedef struct tagVOID_FIELD_CHANNEL_INFO_ACK
{
    // construct
    tagVOID_FIELD_CHANNEL_INFO_ACK();
    // operator =
    tagVOID_FIELD_CHANNEL_INFO_ACK& operator=(const tagVOID_FIELD_CHANNEL_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    int	world_level;
    unsigned int	dungeon_id;
    std::vector<VOID_FIELD_CHANNEL_INFO>	channel_list;
    std::vector<VOID_FIELD_STATE_INFO>	state_list;
} VOID_FIELD_CHANNEL_INFO_ACK;
typedef struct tagGLOBAL_PROCLAMATION_BAG
{
    // construct
    tagGLOBAL_PROCLAMATION_BAG();
    // operator =
    tagGLOBAL_PROCLAMATION_BAG& operator=(const tagGLOBAL_PROCLAMATION_BAG& c);
    // Clear
    void Clear();
    // member
    std::vector<PROCLAMATION_INFO>	chat_list;
} GLOBAL_PROCLAMATION_BAG;
typedef struct tagRANK_QUERY_CREATE_INFO
{
    // construct
    tagRANK_QUERY_CREATE_INFO();
    // operator =
    tagRANK_QUERY_CREATE_INFO& operator=(const tagRANK_QUERY_CREATE_INFO& c);
    // Clear
    void Clear();
    // member
    int	sessionID;
    unsigned int	interval;
    unsigned int	is_query;
    TOP_UP_RANK_QUERY_CREATE_REQ	rank_req;
    TOP_UP_RANK_INFO_ACK	rank_ack;
} RANK_QUERY_CREATE_INFO;
typedef struct tagCHAOS_TEAM_LIST
{
    // construct
    tagCHAOS_TEAM_LIST();
    // operator =
    tagCHAOS_TEAM_LIST& operator=(const tagCHAOS_TEAM_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<CHAOS_TEAMMEMBER>	member_list;
} CHAOS_TEAM_LIST;
typedef struct tagEGG_ACTIVITY_INFO
{
    // construct
    tagEGG_ACTIVITY_INFO();
    // operator =
    tagEGG_ACTIVITY_INFO& operator=(const tagEGG_ACTIVITY_INFO& c);
    // Clear
    void Clear();
    // member
    int	day;
    int	last_time;
    int	money;
    std::vector<EGG_INFO>	egg_list;
} EGG_ACTIVITY_INFO;
typedef struct tagDAILY_DRAW_FASHION_CONFIG
{
    // construct
    tagDAILY_DRAW_FASHION_CONFIG();
    // operator =
    tagDAILY_DRAW_FASHION_CONFIG& operator=(const tagDAILY_DRAW_FASHION_CONFIG& c);
    // Clear
    void Clear();
    // member
    int	config_version;
    int	one_money;
    int	ten_money;
    std::vector<DAILY_DRAW_FASHION_WEEK>	weeks;
    std::vector<DAILY_DRAW_FASHION_DAY>	days;
} DAILY_DRAW_FASHION_CONFIG;
typedef struct tagALCHEMY_MAKE_INFO_ACK
{
    // construct
    tagALCHEMY_MAKE_INFO_ACK();
    // operator =
    tagALCHEMY_MAKE_INFO_ACK& operator=(const tagALCHEMY_MAKE_INFO_ACK& c);
    // Clear
    void Clear();
    // member
    unsigned short	errcode;
    ITEM_INFO	item_info;
} ALCHEMY_MAKE_INFO_ACK;
typedef struct tagPET_FORMATION_INFO
{
    // construct
    tagPET_FORMATION_INFO();
    // operator =
    tagPET_FORMATION_INFO& operator=(const tagPET_FORMATION_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<FORMATION_LEVEL_INFO>	formation_list;
} PET_FORMATION_INFO;
typedef struct tagEQUIP_INFO
{
    // construct
    tagEQUIP_INFO();
    // operator =
    tagEQUIP_INFO& operator=(const tagEQUIP_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	equip_animation;
    std::vector<ITEM_EQUIP>	equip_list;
    unsigned int	wing_id;
} EQUIP_INFO;
typedef struct tagUPDATE_EQUIP_INFO_NTF
{
    // construct
    tagUPDATE_EQUIP_INFO_NTF();
    // operator =
    tagUPDATE_EQUIP_INFO_NTF& operator=(const tagUPDATE_EQUIP_INFO_NTF& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    EQUIP_INFO	equip_info;
} UPDATE_EQUIP_INFO_NTF;
typedef struct tagPACKAGE_BAG
{
    // construct
    tagPACKAGE_BAG();
    // operator =
    tagPACKAGE_BAG& operator=(const tagPACKAGE_BAG& c);
    // Clear
    void Clear();
    // member
    std::vector<PACKAGE_INFO>	package_info;
} PACKAGE_BAG;
typedef struct tagSTATE_INFO
{
    // construct
    tagSTATE_INFO();
    // operator =
    tagSTATE_INFO& operator=(const tagSTATE_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<KEY_VALUE>	skill_cd_list;
    std::vector<BUFF_INFO>	buff_list;
    unsigned char	is_dead_state;
} STATE_INFO;
typedef struct tagPLAYER_STATE_INFO
{
    // construct
    tagPLAYER_STATE_INFO();
    // operator =
    tagPLAYER_STATE_INFO& operator=(const tagPLAYER_STATE_INFO& c);
    // Clear
    void Clear();
    // member
    STATE_INFO	player_state;
    std::vector<STATE_INFO>	pet_state_list;
} PLAYER_STATE_INFO;
typedef struct tagPLAYER_DOOR_ALL_INFO
{
    // construct
    tagPLAYER_DOOR_ALL_INFO();
    // operator =
    tagPLAYER_DOOR_ALL_INFO& operator=(const tagPLAYER_DOOR_ALL_INFO& c);
    // Clear
    void Clear();
    // member
    OFFLINE_PLAYER_INFO_LIST	player_list;
    PLAYER_DOOR_INFO	info;
} PLAYER_DOOR_ALL_INFO;
typedef struct tagSKILL_COMPONENT_INFO
{
    // construct
    tagSKILL_COMPONENT_INFO();
    // operator =
    tagSKILL_COMPONENT_INFO& operator=(const tagSKILL_COMPONENT_INFO& c);
    // Clear
    void Clear();
    // member
    std::vector<ITEM_STONE>	list;
    FINAL_SKILL_INFO_LIST	final_skills;
} SKILL_COMPONENT_INFO;
typedef struct tagSOLDIER_INFO
{
    // construct
    tagSOLDIER_INFO();
    // operator =
    tagSOLDIER_INFO& operator=(const tagSOLDIER_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	object_id;
    unsigned char	sex;
    int	level;
    int	exp;
    EQUIP_INFO	equip_info;
    STONE_INFO	stone_info;
    SKILL_COMPONENT_INFO	skill_component_info;
    unsigned char	is_enable;
} SOLDIER_INFO;
typedef struct tagPET_INFO
{
    // construct
    tagPET_INFO();
    // operator =
    tagPET_INFO& operator=(const tagPET_INFO& c);
    // Clear
    void Clear();
    // member
    SOLDIER_INFO	soldier_info;
} PET_INFO;
typedef struct tagPLAYER_INFO
{
    // construct
    tagPLAYER_INFO();
    // operator =
    tagPLAYER_INFO& operator=(const tagPLAYER_INFO& c);
    // Clear
    void Clear();
    // member
    unsigned int	time;
    unsigned short	gameserver_id;
    unsigned char	gameserver_type;
    unsigned char	is_merge_server;
    std::string	gameserver_language;
    int	gameserver_timezone;
    unsigned int	server_open_time;
    PROPERTY_INFO	prop;
    SKILL_COMPONENT_INFO	skill_component_info;
    ITEM_INFO	item_info;
    ITEM_INFO	store_info;
    EQUIP_INFO	equip_info;
    POTION_INFO	potion_info;
    TASK_INFO	task_info;
    GUIDE_INFO	guide_info;
    OPEN_SYSTEM_INFO	open_system_info;
    TITLE_LIST	title_info;
    int	dance;
    PLAYER_DUNGEON_INFO	dungeon_info;
    BH_INFO	bh_info;
    SHORCUT_BAG	shorcut_info;
    PET_INFO	pet_info;
} PLAYER_INFO;
typedef struct tagPLAYER_APPEAR
{
    // construct
    tagPLAYER_APPEAR();
    // operator =
    tagPLAYER_APPEAR& operator=(const tagPLAYER_APPEAR& c);
    // Clear
    void Clear();
    // member
    BATTLEUNIT_APPEAR	base;
    BIGINT_ID	player_id;
    EQUIP_INFO	equip_info;
    unsigned int	ride_id;
    unsigned int	follow_id;
    unsigned int	face_id;
    unsigned int	wing_id;
    unsigned int	fashion_id;
    unsigned int	sword_id;
    int	battle_power;
    std::string	lover_name;
    std::string	guild_name;
    std::string	follow_pet_name;
    TITLE_LIST	title_list;
    int	growth_point;
    VIP_INFO	vip_info;
    unsigned char	dance_type;
} PLAYER_APPEAR;
typedef struct tagOFFLINE_PLAYER_APPEAR
{
    // construct
    tagOFFLINE_PLAYER_APPEAR();
    // operator =
    tagOFFLINE_PLAYER_APPEAR& operator=(const tagOFFLINE_PLAYER_APPEAR& c);
    // Clear
    void Clear();
    // member
    BATTLEUNIT_APPEAR	base;
    EQUIP_INFO	equip_info;
} OFFLINE_PLAYER_APPEAR;
typedef struct tagPET_APPEAR
{
    // construct
    tagPET_APPEAR();
    // operator =
    tagPET_APPEAR& operator=(const tagPET_APPEAR& c);
    // Clear
    void Clear();
    // member
    BATTLEUNIT_APPEAR	base;
    unsigned int	owner_object_id;
    EQUIP_INFO	equip_info;
} PET_APPEAR;
typedef struct tagBATTLEUNIT_APPEAR_LIST
{
    // construct
    tagBATTLEUNIT_APPEAR_LIST();
    // operator =
    tagBATTLEUNIT_APPEAR_LIST& operator=(const tagBATTLEUNIT_APPEAR_LIST& c);
    // Clear
    void Clear();
    // member
    std::vector<PLAYER_APPEAR>	player_list;
    std::vector<OFFLINE_PLAYER_APPEAR>	offline_player_list;
    std::vector<MONSTER_APPEAR>	monster_list;
    std::vector<BOSS_APPEAR>	boss_list;
    std::vector<PET_APPEAR>	pet_list;
} BATTLEUNIT_APPEAR_LIST;
typedef struct tagDELIVER_PLAYER_INFO_REQ
{
    // construct
    tagDELIVER_PLAYER_INFO_REQ();
    // operator =
    tagDELIVER_PLAYER_INFO_REQ& operator=(const tagDELIVER_PLAYER_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    PROP_BASE_INFO	prop_info;
    PLAYER_STATE_INFO	state_info;
    PLAYER_DUNGEON_INFO	player_dungeon_info;
    HOROSCOPE_INFO	horoscope_info;
    SKILL_COMPONENT_INFO	skill_component_info;
    ITEM_INFO	item_info;
    ITEM_INFO	store_info;
    EQUIP_INFO	equip_info;
    POTION_INFO	potion_info;
    FRIEND_LIST	friend_info;
    TASK_INFO	task_info;
    GUIDE_INFO	guide_info;
    OPEN_SYSTEM_INFO	open_system_info;
    ENEMY_INFO	enemy_info;
    MONSTER_DOOR_INFO	monster_door_info;
    PLAYER_DOOR_INFO	player_door_info;
    REWARD_INFO	reward_info;
    BABEL_INFO	babel_info;
    PAY_POINT_LOTTERY_INFO	pay_point_lottery_info;
    VIP_ONLY_DUNGEON_INFO	vip_only_dungeon_info;
    MAIL_SYSTEM_INFO	mail_system_info;
    RACING_INFO	racing_info;
    SIGN_INFO	sign_info;
    ONLINE_REWARD_INFO	online_reward_info;
    PET_INFO	pet_info;
    RIDE_INFO	ride_info;
    MINING_INFO	mining_info;
    TREASURY_INFO	treasury_info;
    GOLDTREE_INFO	goldtree_info;
    ADVENTURE_INFO	adventure_info;
    ANSWER_INFO	answer_info;
    WING_INFO	wing_info;
    ASHURA_INFO	ashura_info;
    ACHIVE_LIST	achive_info;
    TITLE_LIST	title_info;
    PLAYER_RECHARGE_INFO	recharge_info;
    RESTRICTION_LIST	restriction_info;
    DAY_INVESTMENT_INFO	day_investment_info;
    LEVEL_INVESTMENT_INFO	level_investment_info;
    LEVEL_ACTIVITY_INFO	level_activity_info;
    PASSIVE_SKILL_LIST	passive_skill_info;
    AUTO_FIGHT_SETTING_INFO	auto_fight_setting_info;
    VOID_FIELD_SETTING_INFO	void_field_setting_info;
    SYSTEM_SETTING_INFO	system_setting_info;
    PLAYER_SETTING_INFO	player_setting_info;
    AUTOBUY_SETTING_INFO	autobuy_setting_info;
    LIVENESS_INFO	liveness_info;
    DUNGEON_TIMES_LIST	dungeon_times_list;
    LIMIT_BUY_LIST	limit_buy_list;
    SINGLE_ANSWER_INFO	single_answer;
    RANDOM_PACKAGE_RECORD_INFO	random_package_info;
    SWORD_NEW_INFO	sword_info;
    ZOMBIE_INFO	zombie_info;
    BH_INFO	bh_info;
    GIFT_CODE_INFO	gift_code_info;
    GUILD_PLAYER_SCIENCE_INFO	guild_science_info;
    SHORCUT_BAG	shorcut_info;
    MULTISERVER_BATTLE_BAG	multiserver_battle_info;
    PET_FORMATION_INFO	pet_formation_info;
    INVESTMENT_PLAN_INFO	investment_plan_info;
    DONATE_INFO	donate_info;
    EGG_ACTIVITY_INFO	egg_info;
    BUY_CHEAP_INFO	buy_cheap;
    HEAD_PORTRAIT_INFO	head_portrait;
} DELIVER_PLAYER_INFO_REQ;
typedef struct tagWRITEBACK_PLAYER_INFO_REQ
{
    // construct
    tagWRITEBACK_PLAYER_INFO_REQ();
    // operator =
    tagWRITEBACK_PLAYER_INFO_REQ& operator=(const tagWRITEBACK_PLAYER_INFO_REQ& c);
    // Clear
    void Clear();
    // member
    PROP_BASE_INFO	prop_info;
    PLAYER_STATE_INFO	state_info;
    PLAYER_DUNGEON_INFO	player_dungeon_info;
    HOROSCOPE_INFO	horoscope_info;
    SKILL_COMPONENT_INFO	skill_component_info;
    ITEM_INFO	item_info;
    ITEM_INFO	store_info;
    EQUIP_INFO	equip_info;
    POTION_INFO	potion_info;
    TASK_INFO	task_info;
    GUIDE_INFO	guide_info;
    OPEN_SYSTEM_INFO	open_system_info;
    ENEMY_INFO	enemy_info;
    MONSTER_DOOR_INFO	monster_door_info;
    PLAYER_DOOR_INFO	player_door_info;
    OFFLINE_PLAYER_INFO	offline_info;
    REWARD_INFO	reward_info;
    BABEL_INFO	babel_info;
    PAY_POINT_LOTTERY_INFO	pay_point_lottery_info;
    VIP_ONLY_DUNGEON_INFO	vip_only_dungeon_info;
    MAIL_SYSTEM_INFO	mail_system_info;
    RACING_INFO	racing_info;
    SIGN_INFO	sign_info;
    ONLINE_REWARD_INFO	online_reward_info;
    PET_INFO	pet_info;
    RIDE_INFO	ride_info;
    MINING_INFO	mining_info;
    TREASURY_INFO	treasury_info;
    GOLDTREE_INFO	goldtree_info;
    ADVENTURE_INFO	adventure_info;
    ANSWER_INFO	answer_info;
    WING_INFO	wing_info;
    ASHURA_INFO	ashura_info;
    ACHIVE_LIST	achive_info;
    TITLE_LIST	title_info;
    RESTRICTION_LIST	restriction_info;
    DAY_INVESTMENT_INFO	day_investment_info;
    LEVEL_INVESTMENT_INFO	level_investment_info;
    LEVEL_ACTIVITY_INFO	level_activity_info;
    PASSIVE_SKILL_LIST	passive_skill_info;
    AUTO_FIGHT_SETTING_INFO	auto_fight_setting_info;
    SYSTEM_SETTING_INFO	system_setting_info;
    PLAYER_SETTING_INFO	player_setting_info;
    AUTOBUY_SETTING_INFO	autobuy_setting_info;
    VOID_FIELD_SETTING_INFO	void_field_setting_info;
    LIVENESS_INFO	liveness_info;
    DUNGEON_TIMES_LIST	dungeon_times_list;
    LIMIT_BUY_LIST	limit_buy_list;
    SINGLE_ANSWER_INFO	single_answer;
    RANDOM_PACKAGE_RECORD_INFO	random_package_info;
    SWORD_NEW_INFO	sword_info;
    ZOMBIE_INFO	zombie_info;
    BH_INFO	bh_info;
    GIFT_CODE_INFO	gift_code_info;
    GUILD_PLAYER_SCIENCE_INFO	guild_science_info;
    SHORCUT_BAG	shorcut_info;
    MULTISERVER_BATTLE_BAG	multiserver_battle_info;
    PET_FORMATION_INFO	pet_formation_info;
    INVESTMENT_PLAN_INFO	investment_plan_info;
    DONATE_INFO	donate_info;
    EGG_ACTIVITY_INFO	egg_info;
    BUY_CHEAP_INFO	buy_cheap;
    HEAD_PORTRAIT_INFO	head_portrait;
} WRITEBACK_PLAYER_INFO_REQ;
typedef struct tagPET_FORMATION_ACK
{
    // construct
    tagPET_FORMATION_ACK();
    // operator =
    tagPET_FORMATION_ACK& operator=(const tagPET_FORMATION_ACK& c);
    // Clear
    void Clear();
    // member
    PET_FORMATION_INFO	pet_formation;
} PET_FORMATION_ACK;
/*Define Structs and Unions        End*/
typedef void (*EncodeCallback)(uint64 playerID, uint32 sessionID, uint32 msgID, void* data, void* userdata);
/*Encode and Decode Function Declare Begin*/
int EncodeMSG_TEST1(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEST1(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEST2(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEST2(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEST3(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEST3(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ECHO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ECHO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ECHO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ECHO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_ACTIVE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_ACTIVE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_ACTIVE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_ACTIVE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_GATEID_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_GATEID_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_GATEID_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_GATEID_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_ALL_READY(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_ALL_READY(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_DUNGEON_LIST_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_DUNGEON_LIST_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONITOR_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONITOR_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONITOR_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONITOR_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONITOR_DUNGEON_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONITOR_DUNGEON_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONITOR_DUNGEON_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONITOR_DUNGEON_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_SERVER_ADD(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_SERVER_ADD(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_SERVER_REMOVE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_SERVER_REMOVE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_SERVER_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_SERVER_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_SERVER_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_SERVER_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAMESERVER_SEAL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAMESERVER_SEAL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAMESERVER_SEAL_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAMESERVER_SEAL_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ENCRYPT_CONNECT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ENCRYPT_CONNECT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ENCRYPT_PUBLIC_KEY_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ENCRYPT_PUBLIC_KEY_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ENCRYPT_PRIVATE_KEY_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ENCRYPT_PRIVATE_KEY_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LOGIN_GAME_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LOGIN_GAME_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LOGIN_GAME_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LOGIN_GAME_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LOGOUT_GAME(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LOGOUT_GAME(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_KICKOUT_GAME(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_KICKOUT_GAME(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GS_KICKOUT_GAME(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GS_KICKOUT_GAME(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASK_PLAYER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASK_PLAYER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASK_PLAYER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASK_PLAYER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CREATE_PLAYER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CREATE_PLAYER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CREATE_PLAYER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CREATE_PLAYER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_IS_CREATE_PLAYER_NAME_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_IS_CREATE_PLAYER_NAME_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_IS_CREATE_PLAYER_NAME_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_IS_CREATE_PLAYER_NAME_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LOAD_PLAYER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LOAD_PLAYER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LOAD_PLAYER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LOAD_PLAYER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SET_PLAYER_ID_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SET_PLAYER_ID_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SET_PLAYER_ID_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SET_PLAYER_ID_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SET_GAMESVR_ID_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SET_GAMESVR_ID_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SET_GAMESVR_ID_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SET_GAMESVR_ID_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GATESVR_CLOSE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GATESVR_CLOSE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SYNC_FRAME_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SYNC_FRAME_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_INFO(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_INFO(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_ENTER_GAME(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_ENTER_GAME(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_PROP_LIST(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_PROP_LIST(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHANGE_PLAYER_NAME_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHANGE_PLAYER_NAME_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHANGE_PLAYER_NAME_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHANGE_PLAYER_NAME_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SET_MAP_TYPE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SET_MAP_TYPE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SET_CURRENT_RESUREGECE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SET_CURRENT_RESUREGECE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_IS_UPDATE_PLAYER_NAME_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_IS_UPDATE_PLAYER_NAME_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_IS_UPDATE_PLAYER_NAME_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_IS_UPDATE_PLAYER_NAME_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DELIVER_PLAYER_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DELIVER_PLAYER_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DELIVER_PLAYER_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DELIVER_PLAYER_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WRITEBACK_PLAYER_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WRITEBACK_PLAYER_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WRITEBACK_PLAYER_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WRITEBACK_PLAYER_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTO_SAVE_PLAYER_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTO_SAVE_PLAYER_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_REFRESH_VIGOR_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_REFRESH_VIGOR_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_REFRESH_VIGOR_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_REFRESH_VIGOR_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUY_VIGOR_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUY_VIGOR_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CAREER_SET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CAREER_SET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUIDE_INFO_SET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUIDE_INFO_SET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OPEN_SYSTEM_SET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OPEN_SYSTEM_SET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_LOG_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_LOG_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BEHAVIOR_LOG_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BEHAVIOR_LOG_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LOG_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LOG_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MEMBER_PROP_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MEMBER_PROP_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WELCOME_ASK_BAG_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WELCOME_ASK_BAG_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DO_CHANGE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DO_CHANGE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_TIME_SYN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_TIME_SYN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_TIME_SYN_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_TIME_SYN_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ERROR_CODE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ERROR_CODE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ENTER_DUNGEON_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ENTER_DUNGEON_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EXIT_DUNGEON_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EXIT_DUNGEON_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_EVENT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_EVENT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OPEN_DUNGEON_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OPEN_DUNGEON_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_RECORD_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_RECORD_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BATTLEUNIT_APPEAR_LIST(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BATTLEUNIT_APPEAR_LIST(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BATTLEUNIT_DISAPPEAR(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BATTLEUNIT_DISAPPEAR(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SCENEOBJECT_APPEAR_LIST(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SCENEOBJECT_APPEAR_LIST(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SCENEOBJECT_DISAPPEAR(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SCENEOBJECT_DISAPPEAR(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_NOTIFY_PICK_DROP_OJBECT(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_NOTIFY_PICK_DROP_OJBECT(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAME_START_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAME_START_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAME_LOCK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAME_LOCK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MOVE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MOVE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MOVE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MOVE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CREATURE_MOVE_LIST(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CREATURE_MOVE_LIST(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_JUMP_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_JUMP_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BOUNCE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BOUNCE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_JUMP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_JUMP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHANGE_DUNGEON_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHANGE_DUNGEON_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHANGE_DUNGEON_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHANGE_DUNGEON_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CLEAR_DUNGEON_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CLEAR_DUNGEON_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RETURN_CITY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RETURN_CITY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CLEAR_SCENE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CLEAR_SCENE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SAVE_DUNGEON_SCORE_INFO(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SAVE_DUNGEON_SCORE_INFO(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_READY_COUNTDOWN_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_READY_COUNTDOWN_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_SCORE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_SCORE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GS_DUNGEON_SCORE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GS_DUNGEON_SCORE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_SCORE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_SCORE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHANGE_SCENE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHANGE_SCENE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHANGE_SCENE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHANGE_SCENE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SCENE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SCENE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SCENE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SCENE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_JUMP_DUNGEON_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_JUMP_DUNGEON_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_CONDITION_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_CONDITION_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_CONDITION_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_CONDITION_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_RUN_TIME_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_RUN_TIME_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_RUN_TIME_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_RUN_TIME_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_MONSTER_ID_INFO(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_MONSTER_ID_INFO(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_USE_SKILL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_USE_SKILL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_USE_SKILL_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_USE_SKILL_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_LAUNCH_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_LAUNCH_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_BULLET_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_BULLET_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_HIT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_HIT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_STRIKE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_STRIKE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BATTLE_PET_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BATTLE_PET_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_USE_BASE_SKILL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_USE_BASE_SKILL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAKE_SKILL_CD_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAKE_SKILL_CD_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_COMPONENT_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_COMPONENT_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_COMPONENT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_COMPONENT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FINAL_SKILL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FINAL_SKILL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SOLDIER_SKILL_COMPONENT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SOLDIER_SKILL_COMPONENT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SOLDIER_FINAL_SKILL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SOLDIER_FINAL_SKILL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUFF_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUFF_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TAKE_DAMAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TAKE_DAMAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TAKE_HEAL_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TAKE_HEAL_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TAKE_MANA_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TAKE_MANA_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DEAD_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DEAD_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RELIVE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RELIVE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_COMBO_KILL_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_COMBO_KILL_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAMAGE_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAMAGE_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_STATE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_STATE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PROPERTY_LIST_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PROPERTY_LIST_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BATTLE_STATE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BATTLE_STATE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AI_DEBUG_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AI_DEBUG_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AI_DEBUG_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AI_DEBUG_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PICK_DROP_OBJECT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PICK_DROP_OBJECT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OBJECT_DROP_GOLD_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OBJECT_DROP_GOLD_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BAG_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BAG_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BAG_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BAG_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OPT_ITEM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OPT_ITEM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OPT_ITEM_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OPT_ITEM_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CONSUME_CD_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CONSUME_CD_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BAG_SORT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BAG_SORT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OPT_ITEM_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OPT_ITEM_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_UPDATE_EQUIP_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_UPDATE_EQUIP_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SYNTHETIZE_JEWEL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SYNTHETIZE_JEWEL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SYNTHETIZE_JEWEL_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SYNTHETIZE_JEWEL_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_UPGRADE_JEWEL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_UPGRADE_JEWEL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_UPGRADE_JEWEL_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_UPGRADE_JEWEL_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_POTION_SET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_POTION_SET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_POTION_SET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_POTION_SET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_NPC_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_NPC_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_NPC_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_NPC_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HONOR_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HONOR_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BIND_MONEY_POINT_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BIND_MONEY_POINT_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_SOCKET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_SOCKET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_SOCKET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_SOCKET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_UNSOCKET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_UNSOCKET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_UNSOCKET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_UNSOCKET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_FUSE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_FUSE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_FUSE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_FUSE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_EVOLUTE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_EVOLUTE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_EVOLUTE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_EVOLUTE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_ADD_HOLE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_ADD_HOLE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GEM_ADD_HOLE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GEM_ADD_HOLE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_QUALITY_UP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_QUALITY_UP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_QUALITY_UP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_QUALITY_UP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_WASH_UP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_WASH_UP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_WASH_UP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_WASH_UP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_WASH_UP_USE_OLD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_WASH_UP_USE_OLD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_WASH_UP_USE_OLD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_WASH_UP_USE_OLD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_WASH_UP_USE_NEW_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_WASH_UP_USE_NEW_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_WASH_UP_USE_NEW_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_WASH_UP_USE_NEW_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_STAR_UP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_STAR_UP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_STAR_UP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_STAR_UP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_ENCHANT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_ENCHANT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_ENCHNAT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_ENCHNAT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_UPDATE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_UPDATE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_CHANGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_CHANGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_REFRESH_TIME_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_REFRESH_TIME_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_REFRESH_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_REFRESH_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TAKE_TASK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TAKE_TASK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_TALK_NPC(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_TALK_NPC(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_MICRO_CLIENT(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_MICRO_CLIENT(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_CHANGE_DUNGEON_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_CHANGE_DUNGEON_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_QUALITY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_QUALITY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_COMPLETE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_COMPLETE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_ITEM_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_ITEM_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_CRUSADE_REFRESH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_CRUSADE_REFRESH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_CRUSADE_GIVEUP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_CRUSADE_GIVEUP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_RECEIVE_BOX_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_RECEIVE_BOX_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_RECEIVE_BOX_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_RECEIVE_BOX_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_GUARD_REFRESH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_GUARD_REFRESH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_FESTIVAL_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_FESTIVAL_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_FESTIVAL_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_FESTIVAL_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_DAILY_RESET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_DAILY_RESET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_DAILY_RESET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_DAILY_RESET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_GUARD_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_GUARD_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_GUARD_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_GUARD_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_GUILD_RESET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_GUILD_RESET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_GUILD_RESET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_GUILD_RESET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_GUILD_BOX_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_GUILD_BOX_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_MICRO_CLIENT_STATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_MICRO_CLIENT_STATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_FESTIVAL_TMPL_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_FESTIVAL_TMPL_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TASK_FESTIVAL_TMPL_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TASK_FESTIVAL_TMPL_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TRIGGER_ACTIVATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TRIGGER_ACTIVATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TRIGGER_ACTIVATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TRIGGER_ACTIVATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TRIGGER_STATE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TRIGGER_STATE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_NOTIFY_TRIGGER_FLAG(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_NOTIFY_TRIGGER_FLAG(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_PACKAGE_RECORD_LOAD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_PACKAGE_RECORD_LOAD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_PACKAGE_RECORD_LOAD(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_PACKAGE_RECORD_LOAD(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_PACKAGE_RECORD_FILL(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_PACKAGE_RECORD_FILL(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_SELECT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_SELECT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_RESET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_RESET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_RESET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_RESET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_RAID_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_RAID_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_RAID_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_RAID_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_AUTO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_AUTO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_AUTO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_AUTO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_KILL_CD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_KILL_CD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_KILL_CD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_KILL_CD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_CD_OVER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_CD_OVER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MONSTER_DOOR_CD_OVER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MONSTER_DOOR_CD_OVER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_SELECT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_SELECT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFFLINE_PLAYER_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFFLINE_PLAYER_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFFLINE_PLAYER_BYNAME_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFFLINE_PLAYER_BYNAME_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFFLINE_PLAYER_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFFLINE_PLAYER_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFFLINE_PLAYER_CLIENT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFFLINE_PLAYER_CLIENT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFFLINE_PLAYER_CLIENT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFFLINE_PLAYER_CLIENT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_REPORT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_REPORT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_RESET_CHALLENGE_COUNT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_RESET_CHALLENGE_COUNT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_ADD_CHALLENGE_COUNT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_ADD_CHALLENGE_COUNT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_KILL_CD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_KILL_CD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_KILL_CD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_KILL_CD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_CD_OVER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_CD_OVER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_CD_OVER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_CD_OVER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_REWARD_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_REWARD_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_REWARD_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_REWARD_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DOOR_MY_OLD_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DOOR_MY_OLD_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_REFRESH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_REFRESH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_REFRESH_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_REFRESH_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_GIFT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_GIFT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_GIFT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_GIFT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_INIT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_INIT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_INIT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_INIT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EXPERIENCE_VIP_RECEIVE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EXPERIENCE_VIP_RECEIVE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EXPERIENCE_VIP_EXPIRE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EXPERIENCE_VIP_EXPIRE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EXPERIENCE_VIP_END_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EXPERIENCE_VIP_END_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EXPERIENCE_VIP_STATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EXPERIENCE_VIP_STATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EXPERIENCE_VIP_STATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EXPERIENCE_VIP_STATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HOROSCOPE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HOROSCOPE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HOROSCOPE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HOROSCOPE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HOROSCOPE_LEVELUP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HOROSCOPE_LEVELUP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HOROSCOPE_LEVELUP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HOROSCOPE_LEVELUP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HOROSCOPE_LEVELUP_CMPL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HOROSCOPE_LEVELUP_CMPL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HOROSCOPE_LEVELUP_CMPL_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HOROSCOPE_LEVELUP_CMPL_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_ADD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_ADD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_ADD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_ADD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_ADD_ANS(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_ADD_ANS(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_ADD_CFM(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_ADD_CFM(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_DEL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_DEL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_DEL_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_DEL_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_QUICK_ADD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_QUICK_ADD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FRIEND_QUICK_ADD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FRIEND_QUICK_ADD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MODIFY_CHAT(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MODIFY_CHAT(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SERVER_MARQUEE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SERVER_MARQUEE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MESSAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MESSAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MARQUEE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MARQUEE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MARQUEE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MARQUEE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_GET_AWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_GET_AWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_BATTLE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_BATTLE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_RANK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_RANK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_END_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_END_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_MARQUEE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_MARQUEE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_START_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_START_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_START_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_START_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_RESET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_RESET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_RESET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_RESET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_RAIDS_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_RAIDS_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_RAIDS_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_RAIDS_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_OPEN_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_OPEN_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BABEL_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BABEL_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CREATE_TEAM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CREATE_TEAM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CREATE_TEAM_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CREATE_TEAM_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DESTORY_TEAM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DESTORY_TEAM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DESTORY_TEAM_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DESTORY_TEAM_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_MEMBER_UPDATE_INFO(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_MEMBER_UPDATE_INFO(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_MEMBER_RESET_STATE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_MEMBER_RESET_STATE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_QUICK_JOIN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_QUICK_JOIN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_QUICK_JOIN_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_QUICK_JOIN_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_MEMBER_DEL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_MEMBER_DEL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_MEMBER_DEL_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_MEMBER_DEL_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_SHOW_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_SHOW_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_SHOW_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_SHOW_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_FLY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_FLY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_MEMBER_ENTER_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_MEMBER_ENTER_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEAM_MEMBER_LEAVE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEAM_MEMBER_LEAVE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_OPT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_OPT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_GET_ATTACH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_GET_ATTACH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_GET_ATTACH_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_GET_ATTACH_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_SEND_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_SEND_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_SEND_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_SEND_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_DEL_EXPIRED_MAIL_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_DEL_EXPIRED_MAIL_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MAIL_OPEN_SYSTEM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MAIL_OPEN_SYSTEM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_READY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_READY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_READY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_READY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_QUESTION_CMF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_QUESTION_CMF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_QUESTION_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_QUESTION_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_RESULT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_RESULT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DOUBLE_SCORE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DOUBLE_SCORE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DOUBLE_SCORE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DOUBLE_SCORE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUY_DOUBLE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUY_DOUBLE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_SCORE_SAVE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_SCORE_SAVE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_GEN_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_GEN_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_TOPRANK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_TOPRANK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_TOPRANK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_TOPRANK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_PLAYER_RANK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_PLAYER_RANK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_PLAYER_RANK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_PLAYER_RANK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ANSWER_EXIT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ANSWER_EXIT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_APPLY_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_APPLY_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_APPLY_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_APPLY_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_APPLY_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_APPLY_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_ID_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_ID_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CREATE_GUILD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CREATE_GUILD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CREATE_GUILD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CREATE_GUILD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DESTROY_GUILD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DESTROY_GUILD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIEW_GUILD_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIEW_GUILD_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIEW_GUILD_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIEW_GUILD_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVITE_JOIN_GUILD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVITE_JOIN_GUILD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVITE_JOIN_GUILD_ANS(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVITE_JOIN_GUILD_ANS(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVITE_JOIN_GUILD_CFM(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVITE_JOIN_GUILD_CFM(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_APPLY_JOIN_GUILD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_APPLY_JOIN_GUILD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_APPLY_JOIN_GUILD_REQ_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_APPLY_JOIN_GUILD_REQ_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_APPLY_JOIN_GUILD_ANS(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_APPLY_JOIN_GUILD_ANS(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_MEMBER_DEL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_MEMBER_DEL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_SET_OFFICE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_SET_OFFICE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_SET_FLAG_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_SET_FLAG_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_INHERIT_ATEVENT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_INHERIT_ATEVENT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_DONATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_DONATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_DONATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_DONATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_SET_BULLETIN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_SET_BULLETIN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_ADD_GUILDPOINT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_ADD_GUILDPOINT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_BUY_GUILDPOINT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_BUY_GUILDPOINT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_BUY_MEMBER_TURNTABLE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_BUY_MEMBER_TURNTABLE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_WELFARE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_WELFARE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_WELFARE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_WELFARE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_RAND_TURNTABLE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_RAND_TURNTABLE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_RAND_TURNTABLE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_RAND_TURNTABLE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_RAND_TURNTABLE_RESULT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_RAND_TURNTABLE_RESULT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_MEMBER_TURNTABLE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_MEMBER_TURNTABLE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_MEMBER_TURNTABLE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_MEMBER_TURNTABLE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_MEMBER_TURNTABLE_RESULT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_MEMBER_TURNTABLE_RESULT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_REWARD_PERSONAL_WELFARE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_REWARD_PERSONAL_WELFARE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_ADDITION_PROMOTE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_ADDITION_PROMOTE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_ADDITION_PROMOTE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_ADDITION_PROMOTE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_ADDITION_PROMOTE_TO_CENTER(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_ADDITION_PROMOTE_TO_CENTER(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_ADDITION_PROMOTE_TO_GAME(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_ADDITION_PROMOTE_TO_GAME(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_SCIENCE_PLAYER_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_SCIENCE_PLAYER_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_SCIENCE_PLAYER_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_SCIENCE_PLAYER_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_SCIENCE_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_SCIENCE_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_BOSS_LEVELUP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_BOSS_LEVELUP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_BOSS_COUNTDOWN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_BOSS_COUNTDOWN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_BOSS_COUNTDOWN_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_BOSS_COUNTDOWN_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_BOSS_SET_TIME_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_BOSS_SET_TIME_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_CRUSADE_BOSS_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_CRUSADE_BOSS_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_CRUSADE_BOSS_TIME_SAVE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_CRUSADE_BOSS_TIME_SAVE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_CRUSADE_BOSS_DAMAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_CRUSADE_BOSS_DAMAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_CRUSADE_BOSS_RANK_SAVE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_CRUSADE_BOSS_RANK_SAVE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_CRUSADE_BOSS_RANK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_CRUSADE_BOSS_RANK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_CRUSADE_BOSS_RANK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_CRUSADE_BOSS_RANK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_TWILIGHT_WAR_DAMAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_TWILIGHT_WAR_DAMAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_TWILIGHT_WAR_RANK_SAVE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_TWILIGHT_WAR_RANK_SAVE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_TWILIGHT_WAR_RANK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_TWILIGHT_WAR_RANK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_TWILIGHT_WAR_RANK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_TWILIGHT_WAR_RANK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_TWILIGHT_WAR_BATTLEFIELD_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_TWILIGHT_WAR_BATTLEFIELD_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_TWILIGHT_WAR_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_TWILIGHT_WAR_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_TWILIGHT_WAR_OPEN_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_TWILIGHT_WAR_OPEN_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_TWILIGHT_WAR_CLOSE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_TWILIGHT_WAR_CLOSE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GUILD_NOTICE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GUILD_NOTICE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SIGN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SIGN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SIGN_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SIGN_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SIGN_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SIGN_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SIGN_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SIGN_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_DAMAGE_LIST_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_DAMAGE_LIST_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_DAMAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_DAMAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_CLEAR_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_CLEAR_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_KILL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_KILL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_INFO_LOAD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_INFO_LOAD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_INFO_LOAD(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_INFO_LOAD(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WORLD_BOSS_INFO_FILL(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WORLD_BOSS_INFO_FILL(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RACING_REFRESH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RACING_REFRESH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RACING_REFRESH_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RACING_REFRESH_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RACING_ENTER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RACING_ENTER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RACING_ENTER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RACING_ENTER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MINING_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MINING_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MINING_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MINING_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MINING_STOP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MINING_STOP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MINING_STOP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MINING_STOP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MINING_COMPLETE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MINING_COMPLETE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MINING_COMPLETE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MINING_COMPLETE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MINING_REFRESH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MINING_REFRESH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MINING_REFRESH_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MINING_REFRESH_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACTIVITY_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACTIVITY_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACTIVITY_LIST_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACTIVITY_LIST_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACTIVITY_ADD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACTIVITY_ADD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACTIVITY_UPDATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACTIVITY_UPDATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACTIVITY_DELETE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACTIVITY_DELETE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ASHURA_START_ANNOUNCE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ASHURA_START_ANNOUNCE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TREASURY_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TREASURY_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TREASURY_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TREASURY_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TREASURY_END_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TREASURY_END_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TREASURY_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TREASURY_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TREASURY_CD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TREASURY_CD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TREASURY_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TREASURY_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TREASURY_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TREASURY_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURE_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURE_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURE_JOIN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURE_JOIN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURE_CMPL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURE_CMPL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURER_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURER_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURER_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURER_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURE_ROB_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURE_ROB_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURE_ROB_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURE_ROB_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ADVENTURE_ADD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ADVENTURE_ADD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_ADVANCE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_ADVANCE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_ADVANCE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_ADVANCE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_TRANSMOGRIFICATION_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_TRANSMOGRIFICATION_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_TRANSMOGRIFICATION_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_TRANSMOGRIFICATION_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_ACTIVATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_ACTIVATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_ACTIVATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_ACTIVATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_WING_PRO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_WING_PRO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ONLINE_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ONLINE_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ONLINE_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ONLINE_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GROW_LEVEL_GIFT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GROW_LEVEL_GIFT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GROW_LEVEL_GIFT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GROW_LEVEL_GIFT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BESTOW_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BESTOW_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BESTOW_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BESTOW_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ONLINE_REWARD_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ONLINE_REWARD_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ONLINE_REWARD_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ONLINE_REWARD_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INST_ACHIVE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INST_ACHIVE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INST_ACHIVE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INST_ACHIVE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACHIVE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACHIVE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACHIVE_GETOBJ_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACHIVE_GETOBJ_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RELOAD_MALL_INFO(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RELOAD_MALL_INFO(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MALL_INFO_NOTIFY(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MALL_INFO_NOTIFY(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MALL_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MALL_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MALL_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MALL_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MALL_PRODUCT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MALL_PRODUCT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MALL_PRODUCT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MALL_PRODUCT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RESTRICTION_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RESTRICTION_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MALL_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MALL_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MALL_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MALL_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MALL_BUY_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MALL_BUY_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LIMIT_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LIMIT_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LIMIT_BUY_INFO(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LIMIT_BUY_INFO(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LIMIT_BUY_INFO_CLEAR_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LIMIT_BUY_INFO_CLEAR_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_REFRESH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_REFRESH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GMRANKING_REFRESH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GMRANKING_REFRESH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_RANK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_RANK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_RANK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_RANK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_PLAYER_ID_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_PLAYER_ID_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_PLAYER_ID_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_PLAYER_ID_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_CHANGE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_CHANGE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_CHANGE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_CHANGE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_SAVED_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_SAVED_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_DAILY_REFRESH(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_DAILY_REFRESH(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_OFFLINE_FIRST_CHANGE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_OFFLINE_FIRST_CHANGE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_TOP_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_TOP_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_HOURS_FRESH_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_HOURS_FRESH_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_TOP_UP_RANK_QUERY_CREATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_TOP_UP_RANK_QUERY_CREATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RANKING_TOP_UP_RANK_QUERY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RANKING_TOP_UP_RANK_QUERY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INST_TITLE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INST_TITLE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INST_TITLE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INST_TITLE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EQUIP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EQUIP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_UPDATE_TITLE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_UPDATE_TITLE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_TITLE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_TITLE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FCM_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FCM_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FCM_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FCM_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACTIVECODE_USE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACTIVECODE_USE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACTIVECODE_USE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACTIVECODE_USE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ACTIVECODE_USE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ACTIVECODE_USE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TRADE_ORDER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TRADE_ORDER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TRADE_ORDER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TRADE_ORDER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TRADE_ORDER_STATE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TRADE_ORDER_STATE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TRADE_ORDER_GROWTH_POINT(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TRADE_ORDER_GROWTH_POINT(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PAY_ORDER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PAY_ORDER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_LIST_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_LIST_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INIT_RIDE_PET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INIT_RIDE_PET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INIT_RIDE_PET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INIT_RIDE_PET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_LEVELUP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_LEVELUP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_LEVELUP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_LEVELUP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_RIDEORFREE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_RIDEORFREE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_OPENfILED_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_OPENfILED_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_OPENfILED_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_OPENfILED_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_MARK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_MARK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_MARK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_MARK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_ATLAS_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_ATLAS_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_TRAIN_POS_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_TRAIN_POS_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_STONE_TRAIN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_STONE_TRAIN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_END_TRAIN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_END_TRAIN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_RIGHT_NOW_TRAIN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_RIGHT_NOW_TRAIN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_TRAIN_INIT_LIST(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_TRAIN_INIT_LIST(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_TRAIN_END_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_TRAIN_END_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_SET_MODELS_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_SET_MODELS_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_ABSORB_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_ABSORB_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_UPDATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_UPDATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_UPDATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_UPDATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_CAPTURE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_CAPTURE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_SENDGIF_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_SENDGIF_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_SENDGIF_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_SENDGIF_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RIDE_PET_CLEAR_MARK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RIDE_PET_CLEAR_MARK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SOLDIER_ENABLE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SOLDIER_ENABLE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SOLDIER_ENABLE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SOLDIER_ENABLE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SOLDIER_RESURGENCE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SOLDIER_RESURGENCE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GOLDTREE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GOLDTREE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GOLDTREE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GOLDTREE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GOLDTREE_END_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GOLDTREE_END_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GOLDTREE_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GOLDTREE_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GOLDTREE_CD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GOLDTREE_CD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GOLDTREE_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GOLDTREE_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GOLDTREE_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GOLDTREE_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DEAD(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DEAD(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_RESURGENCE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_RESURGENCE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SEND_RESURGENCE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SEND_RESURGENCE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_RESURGENCE_AND_SEND_DEAD(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_RESURGENCE_AND_SEND_DEAD(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DEAD_CAN_RELIVE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DEAD_CAN_RELIVE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DUNGEON_ADD_LIFE_COUNT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DUNGEON_ADD_LIFE_COUNT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAY_INVESTMENT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAY_INVESTMENT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAY_INVESTMENT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAY_INVESTMENT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAY_INVESTMENT_ACCEPT_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAY_INVESTMENT_ACCEPT_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAY_INVESTMENT_ACCEPT_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAY_INVESTMENT_ACCEPT_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAY_INVESTMENT_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAY_INVESTMENT_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAY_INVESTMENT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAY_INVESTMENT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SAVE_DAY_INVESTMENT_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SAVE_DAY_INVESTMENT_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SAVE_DAY_INVESTMENT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SAVE_DAY_INVESTMENT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PASSIVE_SKILL_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PASSIVE_SKILL_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PASSIVE_SKILL_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PASSIVE_SKILL_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PASSIVE_SKILL_OPEN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PASSIVE_SKILL_OPEN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PASSIVE_SKILL_OPEN_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PASSIVE_SKILL_OPEN_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PASSIVE_SKILL_UP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PASSIVE_SKILL_UP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PASSIVE_SKILL_UP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PASSIVE_SKILL_UP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTO_FIGHT_SETTING_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTO_FIGHT_SETTING_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTO_FIGHT_SETTING_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTO_FIGHT_SETTING_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTO_FIGHT_SETTING_CHANGE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTO_FIGHT_SETTING_CHANGE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTO_FIGHT_SETTING_RESET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTO_FIGHT_SETTING_RESET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SYSTEM_SETTING_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SYSTEM_SETTING_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SYSTEM_SETTING_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SYSTEM_SETTING_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SYSTEM_SETTING_CHANGE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SYSTEM_SETTING_CHANGE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SYSTEM_SETTING_RESET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SYSTEM_SETTING_RESET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_SETTING_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_SETTING_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_SETTING_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_SETTING_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_SETTING_CHANGE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_SETTING_CHANGE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTOBUY_SETTING_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTOBUY_SETTING_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTOBUY_SETTING_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTOBUY_SETTING_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTOBUY_SETTING_CHANGE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTOBUY_SETTING_CHANGE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTOBUY_SETTING_RESET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTOBUY_SETTING_RESET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_AUTOBUY_SETTING_RESET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_AUTOBUY_SETTING_RESET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SETTING_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SETTING_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SETTING_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SETTING_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SETTING_CHANGE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SETTING_CHANGE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SETTING_RESET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SETTING_RESET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SETTING_RESET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SETTING_RESET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LEVEL_INVESTMENT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LEVEL_INVESTMENT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LEVEL_INVESTMENT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LEVEL_INVESTMENT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LEVEL_INVESTMENT_ACCEPT_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LEVEL_INVESTMENT_ACCEPT_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LEVEL_INVESTMENT_ACCEPT_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LEVEL_INVESTMENT_ACCEPT_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LEVEL_INVESTMENT_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LEVEL_INVESTMENT_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LEVEL_INVESTMENT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LEVEL_INVESTMENT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SAVE_LEVEL_INVESTMENT_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SAVE_LEVEL_INVESTMENT_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SAVE_LEVEL_INVESTMENT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SAVE_LEVEL_INVESTMENT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_OPERATION_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_OPERATION_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_OPERATION_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_OPERATION_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_OPERATION_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_OPERATION_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SAVE_LEVEL_ACTIVITY_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SAVE_LEVEL_ACTIVITY_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SAVE_LEVEL_ACTIVITY_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SAVE_LEVEL_ACTIVITY_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIRST_TIME_RECHARGE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIRST_TIME_RECHARGE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIRST_TIME_RECHARGE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIRST_TIME_RECHARGE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIRST_TIME_RECHARGE_ACCEPT_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIRST_TIME_RECHARGE_ACCEPT_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_SAVE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_SAVE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_SAVE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_SAVE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_LOAD_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_LOAD_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_LOAD_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_LOAD_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_ACCEPT_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_ACCEPT_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SPECIAL_ACTIVITY_ACCEPT_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SPECIAL_ACTIVITY_ACCEPT_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_END_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_END_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_SCORE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_SCORE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_BATTLE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_BATTLE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FACTION_PK_ADD_SCORE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FACTION_PK_ADD_SCORE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LIVENESS_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LIVENESS_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LIVENESS_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LIVENESS_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LIVENESS_ACCEPT_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LIVENESS_ACCEPT_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_LIVENESS_ACCEPT_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_LIVENESS_ACCEPT_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_CURRENT_WAVE_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_CURRENT_WAVE_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_RANK_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_RANK_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_PLAYER_ENTER_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_PLAYER_ENTER_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_REWARDS_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_REWARDS_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_ENTER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_ENTER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_ENTER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_ENTER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_ENTER_TRIGGER_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_ENTER_TRIGGER_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TD_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TD_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TIMING_TRIGGER_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TIMING_TRIGGER_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TIMING_TRIGGER_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TIMING_TRIGGER_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_ENTER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_ENTER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_ENTER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_ENTER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_GUILD_DAMAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_GUILD_DAMAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_CITY_OCCUPY_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_CITY_OCCUPY_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_INFO_NTF_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_INFO_NTF_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_INFO_NTF_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_INFO_NTF_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_REALLY_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_REALLY_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_FIGHT_REALLY_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_FIGHT_REALLY_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAMEPLAY_TIMES_NOTIFY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAMEPLAY_TIMES_NOTIFY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAMEPLAY_TIMES_NOTIFY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAMEPLAY_TIMES_NOTIFY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAME_NOTIFY_REWARD_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAME_NOTIFY_REWARD_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CONTRAST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CONTRAST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CONTRAST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CONTRAST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_REALLY_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_REALLY_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_REALLY_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_REALLY_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_ENTER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_ENTER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_ENTER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_ENTER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_WAVE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_WAVE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_REWARDS_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_REWARDS_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CITY_SURVIVAL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CITY_SURVIVAL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TOUCH_START_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TOUCH_START_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TOUCH_START_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TOUCH_START_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TOUCH_BREAK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TOUCH_BREAK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TOUCH_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TOUCH_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CAPTURE_FLAG_START_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CAPTURE_FLAG_START_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CAPTURE_FLAG_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CAPTURE_FLAG_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CAPTURE_FLAG_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CAPTURE_FLAG_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CAPTURE_FLAG_GROUP_SOCRE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CAPTURE_FLAG_GROUP_SOCRE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CAPTURE_FLAG_END_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CAPTURE_FLAG_END_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_STONE_TURN_GOLD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_STONE_TURN_GOLD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_QUESTION_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_QUESTION_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_QUESTION_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_QUESTION_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_RESULT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_RESULT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_RESULT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_RESULT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_CD_TIME_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_CD_TIME_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SINGLE_ANSWER_CD_TIME_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SINGLE_ANSWER_CD_TIME_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_RECHARGE_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_RECHARGE_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GET_MEAL_VIGOR_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GET_MEAL_VIGOR_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GET_MEAL_VIGOR_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GET_MEAL_VIGOR_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFF_LINE_VIGOR_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFF_LINE_VIGOR_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFF_LINE_VIGOR_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFF_LINE_VIGOR_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GET_OFF_LINE_VIGOR_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GET_OFF_LINE_VIGOR_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GET_OFF_LINE_VIGOR_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GET_OFF_LINE_VIGOR_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SET_FASHION_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SET_FASHION_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SET_FASHION_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SET_FASHION_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_LIST_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_LIST_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_ATLAS_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_ATLAS_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_COMPOSE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_COMPOSE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_COMPOSE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_COMPOSE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_ACTIVATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_ACTIVATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_ACTIVATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_ACTIVATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_LEVEL_UP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_LEVEL_UP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_LEVEL_UP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_LEVEL_UP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_GET_TREASURE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_GET_TREASURE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_GET_TREASURE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_GET_TREASURE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_SMELT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_SMELT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_SMELT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_SMELT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INCARNATION_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INCARNATION_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INCARNATION_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INCARNATION_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEASER_FASHION_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEASER_FASHION_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_SKILL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_SKILL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_SKILL_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_SKILL_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FASHION_SKILL_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FASHION_SKILL_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_SHOW_LIST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_SHOW_LIST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_SHOW_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_SHOW_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_CREATE_TEAM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_CREATE_TEAM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_CREATE_TEAM_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_CREATE_TEAM_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_DESTORY_TEAM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_DESTORY_TEAM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_DESTORY_TEAM_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_DESTORY_TEAM_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_MEMBER_DEL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_MEMBER_DEL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_MEMBER_DEL_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_MEMBER_DEL_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_QUICK_JOIN_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_QUICK_JOIN_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_MEMBER_ADD_ANS(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_MEMBER_ADD_ANS(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_MEMBER_ADD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_MEMBER_ADD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_MEMBER_READY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_MEMBER_READY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_MEMBER_READY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_MEMBER_READY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_FLAG_SET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_FLAG_SET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_ENTER_DUNGEON(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_ENTER_DUNGEON(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_NOTIFY_DUNGEON(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_NOTIFY_DUNGEON(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_BUY_DUNGEON_TIMES_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_BUY_DUNGEON_TIMES_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_DUNGEON_DAMAGE_LIST(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_DUNGEON_DAMAGE_LIST(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_DUNGEON_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_DUNGEON_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_DUNGEON_SCORE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_DUNGEON_SCORE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CROSS_TEAM_DUNGEON_SCORE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CROSS_TEAM_DUNGEON_SCORE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CREATURE_EVIL_LIST_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CREATURE_EVIL_LIST_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIGHT_MODE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIGHT_MODE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIGHT_MODE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIGHT_MODE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EMEMY_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EMEMY_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EMEMY_UPDATE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EMEMY_UPDATE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ENEMY_ATTACKER_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ENEMY_ATTACKER_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_CHANNEL_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_CHANNEL_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_CHANNEL_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_CHANNEL_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_REGULAR_TYPE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_REGULAR_TYPE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_CHESTS_NUM_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_CHESTS_NUM_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_OVER_RANGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_OVER_RANGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_BOSS_DAMAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_BOSS_DAMAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_PERSONAL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_PERSONAL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_REWARD_BOX_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_REWARD_BOX_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SET_HOOK_POS_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SET_HOOK_POS_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SOLO_CHANNEL_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SOLO_CHANNEL_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SOLO_CHANNEL_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SOLO_CHANNEL_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SOLO_REGULAR_TYPE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SOLO_REGULAR_TYPE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SOLO_CHESTS_NUM_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SOLO_CHESTS_NUM_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SOLO_OVER_RANGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SOLO_OVER_RANGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SOLO_BOSS_DAMAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SOLO_BOSS_DAMAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SOLO_PERSONAL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SOLO_PERSONAL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VOID_FIELD_SOLO_SET_HOOK_POS_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VOID_FIELD_SOLO_SET_HOOK_POS_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_SELECT_TYPE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_SELECT_TYPE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_SELECT_TYPE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_SELECT_TYPE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_START_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_START_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_START_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_START_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_REDEEM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_REDEEM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_REDEEM_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_REDEEM_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BH_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BH_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_UPGRADE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_UPGRADE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_UPGRADE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_UPGRADE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_ADVANCE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_ADVANCE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_ADVANCE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_ADVANCE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_ACTIVATE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_ACTIVATE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_ACTIVATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_ACTIVATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_LOCK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_LOCK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_LOCK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_LOCK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_EQUIP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_EQUIP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SWORD_EQUIP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SWORD_EQUIP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ZOMBIE_OPEN_CHEST_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ZOMBIE_OPEN_CHEST_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ZOMBIE_WAR_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ZOMBIE_WAR_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ZOMBIE_WAR_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ZOMBIE_WAR_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ZOMBIE_WAR_UPDATE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ZOMBIE_WAR_UPDATE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ZOMBIE_WAR_EXIT(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ZOMBIE_WAR_EXIT(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TEASER_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TEASER_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PUSH_360_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PUSH_360_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GLOBAL_SETTING_INFO_LOAD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GLOBAL_SETTING_INFO_LOAD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GLOBAL_SETTING_INFO_LOAD(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GLOBAL_SETTING_INFO_LOAD(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GLOBAL_SETTING_INFO_FILL(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GLOBAL_SETTING_INFO_FILL(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GLOBAL_SETTING_PROCLAMATION_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GLOBAL_SETTING_PROCLAMATION_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GLOBAL_SETTING_PROCLAMATION_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GLOBAL_SETTING_PROCLAMATION_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GLOBAL_SETTING_PROCLAMATION_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GLOBAL_SETTING_PROCLAMATION_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_PROCLAMATION_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_PROCLAMATION_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_SHORCUT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_SHORCUT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_SHORCUT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_SHORCUT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_TASTE_VIP_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_TASTE_VIP_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_TASTE_VIP_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_TASTE_VIP_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_LIKE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_LIKE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DAILY_FASHION_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DAILY_FASHION_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PLAYER_DAILY_FASHION_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PLAYER_DAILY_FASHION_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GMT_ASK_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GMT_ASK_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GMT_ASK_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GMT_ASK_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GMT_SET_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GMT_SET_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GMT_SET_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GMT_SET_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAME_SETTING_LIST_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAME_SETTING_LIST_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GAME_GMT_UPDATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GAME_GMT_UPDATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_APPLY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_APPLY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_APPLY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_APPLY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_QUIT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_QUIT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_QUIT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_QUIT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_APPLY_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_APPLY_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_PK_END_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_PK_END_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_WAIT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_WAIT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_WAIT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_WAIT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_EXPLOIT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_EXPLOIT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_EXPLOIT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_EXPLOIT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_EXPLOIT_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_EXPLOIT_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_EXPLOIT_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_EXPLOIT_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_BUY_REQ_ALLIANCE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_BUY_REQ_ALLIANCE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_BUY_ACK_ALLIANCE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_BUY_ACK_ALLIANCE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_BUY_REQ_SEASON(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_BUY_REQ_SEASON(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_BUY_ACK_SEASON(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_BUY_ACK_SEASON(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_SEASON_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_SEASON_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_ABOUT_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_ABOUT_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_ALLIANCE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_ALLIANCE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_MULTISERVER_BATTLE_ALLIANCE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_MULTISERVER_BATTLE_ALLIANCE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_UPDATE_DROP_STATE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_UPDATE_DROP_STATE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_PLAYER_IS_OFFLINE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_PLAYER_IS_OFFLINE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_PLAYER_IS_OFFLINE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_PLAYER_IS_OFFLINE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_PLAYER_LEAVE(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_PLAYER_LEAVE(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_DAMAGE_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_DAMAGE_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_SET_HOOK_POS_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_SET_HOOK_POS_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_FIELD_BOSS_PERSONAL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_FIELD_BOSS_PERSONAL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_INVESTMENT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_INVESTMENT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_INVESTMENT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_INVESTMENT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_ADDITIONAL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_ADDITIONAL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_ADDITIONAL_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_ADDITIONAL_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_INVESTMENT_PLAN_REWARD_ALL_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_INVESTMENT_PLAN_REWARD_ALL_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PAY_POINT_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PAY_POINT_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PAY_POINT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PAY_POINT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GET_PAY_POINT_LOTTERY_COST_ITEM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GET_PAY_POINT_LOTTERY_COST_ITEM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PAY_POINT_LOTTERY_ONCE_START_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PAY_POINT_LOTTERY_ONCE_START_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PAY_POINT_LOTTERY_ALL_START_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PAY_POINT_LOTTERY_ALL_START_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PAY_POINT_LOTTERY_OUTPUT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PAY_POINT_LOTTERY_OUTPUT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_GET_PAY_POINT_LOTTERY_OUTPU_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_GET_PAY_POINT_LOTTERY_OUTPU_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_PAY_POINT_LOTTERY_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_PAY_POINT_LOTTERY_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFFLINE_EVENT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFFLINE_EVENT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_OFFLINE_EVENT_SEND(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_OFFLINE_EVENT_SEND(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_PUT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_PUT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_PUT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_PUT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_RECEIVE_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_RECEIVE_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_RECEIVE_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_RECEIVE_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_ADD_BINDMONEY_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_ADD_BINDMONEY_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_ALL_BINDMONEY_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_ALL_BINDMONEY_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DONATE_REWARD_MONEYPOINT(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DONATE_REWARD_MONEYPOINT(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_STATISTICS_PLAYER_VIP(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_STATISTICS_PLAYER_VIP(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_STATISTICS_INFO(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_STATISTICS_INFO(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAOS_KILL_NUM_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAOS_KILL_NUM_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAOS_SCORE_RANK_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAOS_SCORE_RANK_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAOS_END_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAOS_END_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAOS_TEAM_MEMBER_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAOS_TEAM_MEMBER_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAOS_BATTLE_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAOS_BATTLE_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAOS_KILL_INFO_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAOS_KILL_INFO_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_CHAOS_PLAYER_INOUT_NTF(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_CHAOS_PLAYER_INOUT_NTF(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TOP_UP_RANK_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TOP_UP_RANK_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_TOP_UP_RANK_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_TOP_UP_RANK_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_ONLY_DUNGEON_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_ONLY_DUNGEON_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_ONLY_DUNGEON_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_ONLY_DUNGEON_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_ONLY_DUNGEON_ENTER_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_ONLY_DUNGEON_ENTER_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_VIP_ONLY_DUNGEON_END_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_VIP_ONLY_DUNGEON_END_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EGG_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EGG_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EGG_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EGG_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EGG_SMASH_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EGG_SMASH_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_EGG_SMASH_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_EGG_SMASH_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUY_CHEAP_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUY_CHEAP_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUY_CHEAP_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUY_CHEAP_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUY_CHEAP_BUY_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUY_CHEAP_BUY_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUY_CHEAP_BUY_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUY_CHEAP_BUY_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUY_CHEAP_REWARD_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUY_CHEAP_REWARD_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_BUY_CHEAP_REWARD_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_BUY_CHEAP_REWARD_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAILY_FASHION_DB_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAILY_FASHION_DB_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAILY_FASHION_DB_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAILY_FASHION_DB_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAILY_FASHION_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAILY_FASHION_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAILY_FASHION_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAILY_FASHION_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAILY_FASHION_DRAW_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAILY_FASHION_DRAW_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DAILY_FASHION_DRAW_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DAILY_FASHION_DRAW_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HEAD_PORTRAIT_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HEAD_PORTRAIT_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HEAD_PORTRAIT_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HEAD_PORTRAIT_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HEAD_PORTRAIT_INIT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HEAD_PORTRAIT_INIT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_HEAD_PORTRAIT_INIT_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_HEAD_PORTRAIT_INIT_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_STRENGTHEN_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_STRENGTHEN_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_SKILL_STRENGTHEN_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_SKILL_STRENGTHEN_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_STORE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_STORE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_STORE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_STORE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_STORE_SORT_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_STORE_SORT_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ALCHEMY_MAKE_INFO_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ALCHEMY_MAKE_INFO_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_ALCHEMY_MAKE_INFO_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_ALCHEMY_MAKE_INFO_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DECOMPOSE_ITEM_REQ(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DECOMPOSE_ITEM_REQ(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
int EncodeMSG_DECOMPOSE_ITEM_ACK(uint64 playerID, void* data, Net_Packet* packet);
int DecodeMSG_DECOMPOSE_ITEM_ACK(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
/*Encode and Decode Function Declare End*/
/*StructToJson Function Declare Begin*/
std::string StructToJson(const NONE& typesStruct);
std::string StructToJson(const BIGINT_ID& typesStruct);
std::string StructToJson(const VECTOR3D_INT& typesStruct);
std::string StructToJson(const ERROR_CODE& typesStruct);
std::string StructToJson(const SERVER_TIME& typesStruct);
std::string StructToJson(const SERVER_INFO_REQ& typesStruct);
std::string StructToJson(const SERVER_INFO_ACK& typesStruct);
std::string StructToJson(const SERVER_ACTIVE_REQ& typesStruct);
std::string StructToJson(const SERVER_ACTIVE_ACK& typesStruct);
std::string StructToJson(const SERVER_LIST_REQ& typesStruct);
std::string StructToJson(const SERVER_INFO& typesStruct);
std::string StructToJson(const SERVER_LIST_ACK& typesStruct);
std::string StructToJson(const SERVER_GATEID_ACK& typesStruct);
std::string StructToJson(const SERVER_DUNGEON_INFO& typesStruct);
std::string StructToJson(const SERVER_DUNGEON_LIST_NTF& typesStruct);
std::string StructToJson(const MONITOR_INFO_REQ& typesStruct);
std::string StructToJson(const MONITOR_PLAYER_INFO& typesStruct);
std::string StructToJson(const MONITOR_INFO_ACK& typesStruct);
std::string StructToJson(const DUNGEON_INFO& typesStruct);
std::string StructToJson(const MONITOR_DUNGEON_INFO_ACK& typesStruct);
std::string StructToJson(const GATESVR_CLOSE_NTF& typesStruct);
std::string StructToJson(const SYNC_FRAME_NTF& typesStruct);
std::string StructToJson(const TEST_ECHO& typesStruct);
std::string StructToJson(const TEST_DTAT1& typesStruct);
std::string StructToJson(const TEST_DTAT2& typesStruct);
std::string StructToJson(const TEST_DTAT3& typesStruct);
std::string StructToJson(const ENCRYPT_TOKEN& typesStruct);
std::string StructToJson(const LOGIN_GAME_REQ& typesStruct);
std::string StructToJson(const LOGIN_GAME_ACK& typesStruct);
std::string StructToJson(const KEY_VALUE& typesStruct);
std::string StructToJson(const CHANGE_PLAYER_NAME_REQ& typesStruct);
std::string StructToJson(const CHANGE_PLAYER_NAME_ACK& typesStruct);
std::string StructToJson(const SET_MAP_TYPE_REQ& typesStruct);
std::string StructToJson(const SET_CURRENT_RESUREGECE_REQ& typesStruct);
std::string StructToJson(const LEVEL_ACTIVITY_INFO& typesStruct);
std::string StructToJson(const ENEMY_RECORD& typesStruct);
std::string StructToJson(const ENEMY_INFO& typesStruct);
std::string StructToJson(const ENEMY_ATTACKER_INFO& typesStruct);
std::string StructToJson(const CREATURE_EVIL& typesStruct);
std::string StructToJson(const CREATURE_EVIL_LIST& typesStruct);
std::string StructToJson(const FIGHT_MODE_REQ& typesStruct);
std::string StructToJson(const FIGHT_MODE_ACK& typesStruct);
std::string StructToJson(const PROPERTY_INFO& typesStruct);
std::string StructToJson(const TURNTABLE_ACK& typesStruct);
std::string StructToJson(const CAREER_DATA& typesStruct);
std::string StructToJson(const ACTIVATION_CODE& typesStruct);
std::string StructToJson(const STONE_TURN_GOLD& typesStruct);
std::string StructToJson(const REWARD_ITEM& typesStruct);
std::string StructToJson(const WELCOME_DATA& typesStruct);
std::string StructToJson(const DO_CHANGE_ACK& typesStruct);
std::string StructToJson(const RAND_REWARD_ITEM& typesStruct);
std::string StructToJson(const REWARD_TABLE_REQ& typesStruct);
std::string StructToJson(const REWARD_TABLE& typesStruct);
std::string StructToJson(const REWARD_TABLE_LIST& typesStruct);
std::string StructToJson(const REWARD_INFO& typesStruct);
std::string StructToJson(const RIDE_PET_INFO& typesStruct);
std::string StructToJson(const RIDE_TRAIN& typesStruct);
std::string StructToJson(const RIDE_PET_TRAIN_LIST& typesStruct);
std::string StructToJson(const RIDE_MARKT& typesStruct);
std::string StructToJson(const RIDE_ALTAS& typesStruct);
std::string StructToJson(const RIDE_ALTAS_ACK& typesStruct);
std::string StructToJson(const RIDE_PET_SET_MODELS_REQ& typesStruct);
std::string StructToJson(const RIDE_PET_MARK_LIST& typesStruct);
std::string StructToJson(const RIDE_PET_LIST& typesStruct);
std::string StructToJson(const RIDE_PET_MARK_ACK& typesStruct);
std::string StructToJson(const INIT_RIDE_PET_ACK& typesStruct);
std::string StructToJson(const SET_RIDE_PET_REQ& typesStruct);
std::string StructToJson(const SET_RIDE_PET_ACK& typesStruct);
std::string StructToJson(const RIDE_PET_INFO_ACK& typesStruct);
std::string StructToJson(const RIDE_PET_LEVELUP_ACK& typesStruct);
std::string StructToJson(const RIDE_PET_LEVELUP_REQ& typesStruct);
std::string StructToJson(const RIDE_PET_RIDEORFREE_REQ& typesStruct);
std::string StructToJson(const RIDE_PET_MARK_REQ& typesStruct);
std::string StructToJson(const RIDE_PET_TRAIN_REQ& typesStruct);
std::string StructToJson(const RIDE_TRAIN_REQ& typesStruct);
std::string StructToJson(const END_TRAIN_REQ& typesStruct);
std::string StructToJson(const END_TRAIN_ACK& typesStruct);
std::string StructToJson(const RIDE_PET_OPENFILED_REQ& typesStruct);
std::string StructToJson(const RIDE_PET_OPENFILED_ACK& typesStruct);
std::string StructToJson(const RIDE_PET_UPDATE_REQ& typesStruct);
std::string StructToJson(const RIDE_PET_UPDATE_ACK& typesStruct);
std::string StructToJson(const RIDE_PET_SENDGIF_ACK& typesStruct);
std::string StructToJson(const RIDE_PET_ABSORB_REQ& typesStruct);
std::string StructToJson(const RAND_ITEM_INFO& typesStruct);
std::string StructToJson(const ACTIVATION_INFO& typesStruct);
std::string StructToJson(const TRAIN_POST_REQ& typesStruct);
std::string StructToJson(const STONE_TRAIN_REQ& typesStruct);
std::string StructToJson(const NOW_TRAIN_REQ& typesStruct);
std::string StructToJson(const RANDOM_EXP& typesStruct);
std::string StructToJson(const FOLLOW_PET_INFO& typesStruct);
std::string StructToJson(const PROTECT_SOUL& typesStruct);
std::string StructToJson(const PROTECT_SOUL_INIT& typesStruct);
std::string StructToJson(const FOLLOW_PET_LIST& typesStruct);
std::string StructToJson(const FOLLOW_PET_RANDOM_EXP& typesStruct);
std::string StructToJson(const FOLLOW_PET_RANDOM_EXP_ACK& typesStruct);
std::string StructToJson(const PROTECT_SOUL_LEVEL& typesStruct);
std::string StructToJson(const FOLLOW_PET_ACTIVE_SOUL_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_LIST_UPDATE_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_SERACH_UPDATE_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_SERACH_UPDATE_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_ADD_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_INIT_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_INIT_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_FREE_LEVE_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_FINGERGUESS_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_FINGERGUESS_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_MODIFYNAME_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_MODIFYNAME_ACK& typesStruct);
std::string StructToJson(const FOLLOW_AUTOEAT_REQ& typesStruct);
std::string StructToJson(const FOLLOW_AUTOEAT_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_SHOW_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_SHOW_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_CANLESHOW_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_CANLESHOW_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_EATSOUL_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_EATSOUL_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_ACTIVE_SOUL_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_SWALLOW_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_SWALLOW_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_STARCHSEARCH_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_STARCHSEARCH_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_FINISHSEARCH_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_FINISHSEARCH_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_STOPSEARCH_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_STOPSEARCH_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_GETSEARCHOBJ_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_GETSEARCHOB_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_POSTEXERC_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_POSTEXERC_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_NOWEXERC_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_NOWEXERC_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_TIMEEXER_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_TIMEEXER_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_OVERTIMEEXER_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_OVERTIMEEXER_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_EVOLUTI_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_EVOLUTI_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_CAN_RECUIT_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_CAN_RECUIT_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_USEITEM_REQ& typesStruct);
std::string StructToJson(const FOLLOW_PET_USEITEM_ACK& typesStruct);
std::string StructToJson(const FOLLOW_PET_LEVLE_UP_ACK& typesStruct);
std::string StructToJson(const FORMATION_LOCK_INFO& typesStruct);
std::string StructToJson(const PET_FORMATION_UPGRADE& typesStruct);
std::string StructToJson(const PET_FORMATION_CHANGE& typesStruct);
std::string StructToJson(const PET_FORMATION_LOCK& typesStruct);
std::string StructToJson(const PET_FORMATION_LOCK_ACK& typesStruct);
std::string StructToJson(const ASHURA_INFO& typesStruct);
std::string StructToJson(const ASHURA_BATTLE_ACK& typesStruct);
std::string StructToJson(const ASHURA_GET_AWARD_REQ& typesStruct);
std::string StructToJson(const ASHURA_END_ACK& typesStruct);
std::string StructToJson(const ASHURA_MARQUEE_NTF& typesStruct);
std::string StructToJson(const ASHURA_RANK_INFO& typesStruct);
std::string StructToJson(const ASHURA_RANK_ACK& typesStruct);
std::string StructToJson(const ASHURA_START_NTF& typesStruct);
std::string StructToJson(const ASHURA_END_NTF& typesStruct);
std::string StructToJson(const ACHIVE_INFO& typesStruct);
std::string StructToJson(const ACHIVE_LIST& typesStruct);
std::string StructToJson(const ACHIVE_STATE_LIST& typesStruct);
std::string StructToJson(const TITLE_INFO& typesStruct);
std::string StructToJson(const TITLE_LIST& typesStruct);
std::string StructToJson(const TITLE_STATE_LIST& typesStruct);
std::string StructToJson(const PLAYER_TITLE_LIST& typesStruct);
std::string StructToJson(const EQUIP_TITLE& typesStruct);
std::string StructToJson(const FASHION_INFO& typesStruct);
std::string StructToJson(const FASHION_LIST& typesStruct);
std::string StructToJson(const SET_FASHION_REQ& typesStruct);
std::string StructToJson(const SET_FASHION_ACK& typesStruct);
std::string StructToJson(const FASHION_COMPOSE_REQ& typesStruct);
std::string StructToJson(const FASHION_COMPOSE_ACK& typesStruct);
std::string StructToJson(const FASHION_ACTIVATE_REQ& typesStruct);
std::string StructToJson(const FASHION_GET_TREASURE_REQ& typesStruct);
std::string StructToJson(const FASHION_GET_TREASURE_ACK& typesStruct);
std::string StructToJson(const FASHION_TREASURE_CONFIG& typesStruct);
std::string StructToJson(const FASHION_SMELT_ACK& typesStruct);
std::string StructToJson(const FASHION_SMELT_ITEM& typesStruct);
std::string StructToJson(const INCARNATION_BUY_REQ& typesStruct);
std::string StructToJson(const TEASER_FASHION_NTF& typesStruct);
std::string StructToJson(const TREASURE_PACKAGE_ITEM& typesStruct);
std::string StructToJson(const POTION_INFO& typesStruct);
std::string StructToJson(const POTION_USE& typesStruct);
std::string StructToJson(const PACKAGE_COUNT_INFO& typesStruct);
std::string StructToJson(const PACKAGE_TIME_INFO& typesStruct);
std::string StructToJson(const RANDOM_PACKAGE_CARD_RECORD& typesStruct);
std::string StructToJson(const RANDOM_PACKAGE_RECORD& typesStruct);
std::string StructToJson(const RANDOM_PACKAGE_RECORD_INFO& typesStruct);
std::string StructToJson(const RIDE_QUALITY_INFO& typesStruct);
std::string StructToJson(const RIDE_INFO& typesStruct);
std::string StructToJson(const FOLLOW_PET_SKILL& typesStruct);
std::string StructToJson(const ITEM_BASE& typesStruct);
std::string StructToJson(const ITEM_CONSUME& typesStruct);
std::string StructToJson(const ITEM_MATERIAL& typesStruct);
std::string StructToJson(const ITEM_STONE& typesStruct);
std::string StructToJson(const TRIPLE_VALUE& typesStruct);
std::string StructToJson(const CONSUME_CD_INFO& typesStruct);
std::string StructToJson(const SKILL_STRENGTHEN_STONE& typesStruct);
std::string StructToJson(const OPT_ITEM_INFO& typesStruct);
std::string StructToJson(const GEM_SOCKET_REQ& typesStruct);
std::string StructToJson(const GEM_UNSOCKET_REQ& typesStruct);
std::string StructToJson(const GEM_FUSE_REQ& typesStruct);
std::string StructToJson(const GEM_EVOLUTE_REQ& typesStruct);
std::string StructToJson(const GEM_ADD_HOLE_REQ& typesStruct);
std::string StructToJson(const SYNTHETIZE_JEWEL_REQ& typesStruct);
std::string StructToJson(const SYNTHETIZE_JEWEL_ACK& typesStruct);
std::string StructToJson(const UPGRADE_JEWEL_REQ& typesStruct);
std::string StructToJson(const UPGRADE_JEWEL_ACK& typesStruct);
std::string StructToJson(const TASK_CONDITION& typesStruct);
std::string StructToJson(const TASK_TARGET& typesStruct);
std::string StructToJson(const TASK_TEMPLATE& typesStruct);
std::string StructToJson(const TASK_FESTIVAL_TEMPLATE& typesStruct);
std::string StructToJson(const TASK_FESTIVAL_TEMPLATE_LIST& typesStruct);
std::string StructToJson(const TASK_TARGET_RECORD& typesStruct);
std::string StructToJson(const TASK_DAILY_INFO& typesStruct);
std::string StructToJson(const TASK_CRUSADE_INFO& typesStruct);
std::string StructToJson(const TASK_GUARD_INFO& typesStruct);
std::string StructToJson(const TASK_GUILD_INFO& typesStruct);
std::string StructToJson(const TASK_ACHIVE_INFO& typesStruct);
std::string StructToJson(const FESTIVAL_RECORD& typesStruct);
std::string StructToJson(const TASK_RECORD& typesStruct);
std::string StructToJson(const TASK_UPDATE_INFO& typesStruct);
std::string StructToJson(const TASK_CHANGE_INFO& typesStruct);
std::string StructToJson(const TASK_GUILD_REFRESH_ACK& typesStruct);
std::string StructToJson(const TASK_REQ& typesStruct);
std::string StructToJson(const TAKE_TASK_REQ& typesStruct);
std::string StructToJson(const TASK_TALK_NPC& typesStruct);
std::string StructToJson(const TASK_CHANGE_DUNGEON_REQ& typesStruct);
std::string StructToJson(const TASK_REWARD_REQ& typesStruct);
std::string StructToJson(const TASK_REWARD_ACK& typesStruct);
std::string StructToJson(const TASK_QUALITY_REQ& typesStruct);
std::string StructToJson(const TASK_COMPLETE_REQ& typesStruct);
std::string StructToJson(const TASK_ITEM_ACK& typesStruct);
std::string StructToJson(const TASK_RECEIVE_BOX_REQ& typesStruct);
std::string StructToJson(const TASK_RECEIVE_BOX_ACK& typesStruct);
std::string StructToJson(const TASK_FESTIVAL_REWARD_REQ& typesStruct);
std::string StructToJson(const TASK_FESTIVAL_REWARD_ACK& typesStruct);
std::string StructToJson(const NOTIFY_OBJ_FLAG& typesStruct);
std::string StructToJson(const NOTIFY_OBJ_FLAG_LIST& typesStruct);
std::string StructToJson(const DAILY_RESET_ACK& typesStruct);
std::string StructToJson(const TASK_GUARD_BUY_ACK& typesStruct);
std::string StructToJson(const TASK_GUILD_RESET_ACK& typesStruct);
std::string StructToJson(const TASK_GUILD_BOX_REWARD_REQ& typesStruct);
std::string StructToJson(const GUIDE_INFO& typesStruct);
std::string StructToJson(const OPEN_SYSTEM_INFO& typesStruct);
std::string StructToJson(const TRIGGER_ACTIVATE_REQ& typesStruct);
std::string StructToJson(const TRIGGER_ACTIVATE_ACK& typesStruct);
std::string StructToJson(const TRIGGER_STATE_NTF& typesStruct);
std::string StructToJson(const REWARD_POOL_CLEAR_REQ& typesStruct);
std::string StructToJson(const ANSWER_INFO& typesStruct);
std::string StructToJson(const SINGLE_ANSWER_INFO& typesStruct);
std::string StructToJson(const SINGLE_ANSWER_INI_ACK& typesStruct);
std::string StructToJson(const SINGLE_ANSWER_CD_TIME_ACK& typesStruct);
std::string StructToJson(const FCM_INFO& typesStruct);
std::string StructToJson(const ZOMBIE_INFO& typesStruct);
std::string StructToJson(const GIFT_CODE_INFO& typesStruct);
std::string StructToJson(const BUFF_FUNC& typesStruct);
std::string StructToJson(const OFFLINE_EQUIP_INFO& typesStruct);
std::string StructToJson(const OFFLINE_PLAYER_REQ& typesStruct);
std::string StructToJson(const BATTLE_POWER_INFO& typesStruct);
std::string StructToJson(const OFFLINE_PLAYER_INFO& typesStruct);
std::string StructToJson(const MONSTER_DOOR_INFO& typesStruct);
std::string StructToJson(const MONSTER_DOOR_SELECT& typesStruct);
std::string StructToJson(const MONSTER_DOOR_RAID_ACK& typesStruct);
std::string StructToJson(const MONSTER_DOOR_AUTO_REQ& typesStruct);
std::string StructToJson(const MONSTER_DOOR_AUTO_ACK& typesStruct);
std::string StructToJson(const MONSTER_DOOR_KILL_CD_ACK& typesStruct);
std::string StructToJson(const MONSTER_DOOR_CD_OVER_ACK& typesStruct);
std::string StructToJson(const MONSTER_DOOR_END& typesStruct);
std::string StructToJson(const PLAYER_DOOR_INFO_REQ& typesStruct);
std::string StructToJson(const LIMIT_BUY& typesStruct);
std::string StructToJson(const LIMIT_BUY_LIST& typesStruct);
std::string StructToJson(const LIMIT_BUY_INFO_ACK& typesStruct);
std::string StructToJson(const OFFLINE_PLAYER_INFO_LIST& typesStruct);
std::string StructToJson(const PLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK& typesStruct);
std::string StructToJson(const PLAYER_DOOR_SELECT& typesStruct);
std::string StructToJson(const PLAYER_DOOR_END& typesStruct);
std::string StructToJson(const PLAYER_DOOR_REWARD_ACK& typesStruct);
std::string StructToJson(const PLAYER_DOOR_REWARD_INFO& typesStruct);
std::string StructToJson(const PLAYER_DOOR_REPORT& typesStruct);
std::string StructToJson(const PLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK& typesStruct);
std::string StructToJson(const PLAYER_DOOR_KILL_CD_ACK& typesStruct);
std::string StructToJson(const PLAYER_DOOR_CD_OVER_ACK& typesStruct);
std::string StructToJson(const PLAYER_DOOR_REWARD_CD_OVER_ACK& typesStruct);
std::string StructToJson(const MY_OLD_RANK& typesStruct);
std::string StructToJson(const BABEL_INFO& typesStruct);
std::string StructToJson(const ANSWER_SCORE_SAVE& typesStruct);
std::string StructToJson(const ANSWER_GEN_RANK_NTF& typesStruct);
std::string StructToJson(const ANSWER_END_NTF& typesStruct);
std::string StructToJson(const ANSWER_READY_ACK& typesStruct);
std::string StructToJson(const ANSWER_QUESTION_NTF& typesStruct);
std::string StructToJson(const ANSWER_QUESTION_CMF& typesStruct);
std::string StructToJson(const ANSWER_RESULT_NTF& typesStruct);
std::string StructToJson(const DOUBLE_SCORE_REQ& typesStruct);
std::string StructToJson(const DOUBLE_SCORE_ACK& typesStruct);
std::string StructToJson(const ANSWER_PLAYER_TOPRANK& typesStruct);
std::string StructToJson(const ANSWER_TOPRANK_INFO& typesStruct);
std::string StructToJson(const ANSWER_PLAYER_RANK& typesStruct);
std::string StructToJson(const SINGLE_QUESTION_ACK& typesStruct);
std::string StructToJson(const SINGLE_ANSWER_RESULT_ACK& typesStruct);
std::string StructToJson(const SINGLE_RESLUT_REQ& typesStruct);
std::string StructToJson(const RACING_ENTER_REQ& typesStruct);
std::string StructToJson(const RACING_ENTER_ACK& typesStruct);
std::string StructToJson(const RACING_INFO& typesStruct);
std::string StructToJson(const MINING_INFO& typesStruct);
std::string StructToJson(const MINING_REQ& typesStruct);
std::string StructToJson(const ACTIVITY_INFO& typesStruct);
std::string StructToJson(const TREASURY_INFO& typesStruct);
std::string StructToJson(const TREASURY_INFO_NTF& typesStruct);
std::string StructToJson(const TREASURY_END_NTF& typesStruct);
std::string StructToJson(const TREASURY_BUY_ACK& typesStruct);
std::string StructToJson(const GOLDTREE_INFO& typesStruct);
std::string StructToJson(const GOLDTREE_INFO_NTF& typesStruct);
std::string StructToJson(const GOLDTREE_END_NTF& typesStruct);
std::string StructToJson(const GOLDTREE_BUY_ACK& typesStruct);
std::string StructToJson(const ADVENTURE_INFO& typesStruct);
std::string StructToJson(const ADVENTURER_INFO& typesStruct);
std::string StructToJson(const ADVENTURER_INFO_LIST& typesStruct);
std::string StructToJson(const ADVENTURE_JOIN_REQ& typesStruct);
std::string StructToJson(const ADVENTURE_ROB_REQ& typesStruct);
std::string StructToJson(const ADVENTURE_ROB_ACK& typesStruct);
std::string StructToJson(const ADVENTURE_ADD_REQ& typesStruct);
std::string StructToJson(const PRO_LOCK& typesStruct);
std::string StructToJson(const LOCK_ACK& typesStruct);
std::string StructToJson(const WING_LOCK_REQ& typesStruct);
std::string StructToJson(const WING_ONE_INFO& typesStruct);
std::string StructToJson(const WING_ADVANCE_REQ& typesStruct);
std::string StructToJson(const WING_ADVANCE_ACK& typesStruct);
std::string StructToJson(const WING_TRANSMOGRIFICATION_REQ& typesStruct);
std::string StructToJson(const WING_ACTIVATE_REQ& typesStruct);
std::string StructToJson(const HOROSCOPE_INFO& typesStruct);
std::string StructToJson(const HOROSCOPE_LEVELUP_ACK& typesStruct);
std::string StructToJson(const HOROSCOPE_LEVELUP_CMPL_ACK& typesStruct);
std::string StructToJson(const FRIEND_ADD_REQ& typesStruct);
std::string StructToJson(const FRIEND_ADD_ACK& typesStruct);
std::string StructToJson(const FRIEND_DEL_REQ& typesStruct);
std::string StructToJson(const FRIEND_DEL_ACK& typesStruct);
std::string StructToJson(const FRIEND_QUICK_ADD_REQ& typesStruct);
std::string StructToJson(const SET_PLAYER_ID_REQ& typesStruct);
std::string StructToJson(const SOLDIER_ENABLE_REQ& typesStruct);
std::string StructToJson(const SOLDIER_ENABLE_ACK& typesStruct);
std::string StructToJson(const SOLDIER_RESURGENCE_INFO& typesStruct);
std::string StructToJson(const SET_PLAYER_ID_ACK& typesStruct);
std::string StructToJson(const SET_GAMESVR_ID_REQ& typesStruct);
std::string StructToJson(const SET_GAMESVR_ID_ACK& typesStruct);
std::string StructToJson(const SCORE_MEMBER_INFO& typesStruct);
std::string StructToJson(const DUNGEON_SCORE_INFO& typesStruct);
std::string StructToJson(const DUNGEON_READY_COUNTDOWN& typesStruct);
std::string StructToJson(const DUNGEON_SCORE_INFO_LIST& typesStruct);
std::string StructToJson(const ENTER_DUNGEON_REQ& typesStruct);
std::string StructToJson(const DUNGEON_EVENT_NTF& typesStruct);
std::string StructToJson(const PLAYER_BASE_INFO_ACK& typesStruct);
std::string StructToJson(const REFRESH_VIGOR_ACK& typesStruct);
std::string StructToJson(const ONLINE_REWARD_REQ& typesStruct);
std::string StructToJson(const ONLINE_REWARD_ACK& typesStruct);
std::string StructToJson(const GROW_LEVEL_GIFT_ACK& typesStruct);
std::string StructToJson(const GROW_LEVEL_GIFT_REQ& typesStruct);
std::string StructToJson(const BESTOW_REWARD_ACK& typesStruct);
std::string StructToJson(const ONLINE_PK_END_NTF& typesStruct);
std::string StructToJson(const PLAYER_LOG_REQ& typesStruct);
std::string StructToJson(const BEHAVIOR_LOG_REQ& typesStruct);
std::string StructToJson(const LOG_REQ& typesStruct);
std::string StructToJson(const LOGOUT_GAME& typesStruct);
std::string StructToJson(const KICKOUT_GAME& typesStruct);
std::string StructToJson(const CREATE_PLAYER_REQ& typesStruct);
std::string StructToJson(const IS_CREATE_PLAYER_NAME_REQ& typesStruct);
std::string StructToJson(const ASK_PLAYER_INFO& typesStruct);
std::string StructToJson(const ASK_PLAYER_LIST& typesStruct);
std::string StructToJson(const LOAD_PLAYER_REQ& typesStruct);
std::string StructToJson(const BATTLEUNIT_APPEAR& typesStruct);
std::string StructToJson(const MONSTER_APPEAR& typesStruct);
std::string StructToJson(const BOSS_APPEAR& typesStruct);
std::string StructToJson(const BATTLEUNIT_DISAPPEAR& typesStruct);
std::string StructToJson(const SCENEOBJECT_APPEAR& typesStruct);
std::string StructToJson(const SCENEOBJECT_DISAPPEAR& typesStruct);
std::string StructToJson(const PICK_DROP_OBJECT& typesStruct);
std::string StructToJson(const NOTIFY_PICK_DROP_OJBECT_REQ& typesStruct);
std::string StructToJson(const GAME_START& typesStruct);
std::string StructToJson(const GAME_LOCK& typesStruct);
std::string StructToJson(const MOVE_ACK& typesStruct);
std::string StructToJson(const JUMP_NTF& typesStruct);
std::string StructToJson(const BOUNCE_NTF& typesStruct);
std::string StructToJson(const CREATURE_MOVE& typesStruct);
std::string StructToJson(const CREATURE_MOVE_LIST& typesStruct);
std::string StructToJson(const CHANGE_DUNGEON_REQ& typesStruct);
std::string StructToJson(const CHANGE_DUNGEON_ACK& typesStruct);
std::string StructToJson(const DUNGEON_LIFE_COUNT& typesStruct);
std::string StructToJson(const SCENE_INFO_REQ& typesStruct);
std::string StructToJson(const SCENE_INFO_ACK& typesStruct);
std::string StructToJson(const CLEAR_SCENE_NTF& typesStruct);
std::string StructToJson(const CLEAR_DUNGEON_NTF& typesStruct);
std::string StructToJson(const OPEN_BOX_REQ& typesStruct);
std::string StructToJson(const FLIP_CARD_REQ& typesStruct);
std::string StructToJson(const CHANGE_SCENE_REQ& typesStruct);
std::string StructToJson(const CHANGE_SCENE_ACK& typesStruct);
std::string StructToJson(const DUNGEON_CONDITION& typesStruct);
std::string StructToJson(const DUNGEON_CONDITION_NTF& typesStruct);
std::string StructToJson(const SHOOT_TARGET& typesStruct);
std::string StructToJson(const SKILL_ARGUMETNS& typesStruct);
std::string StructToJson(const SKILL_LAUNCH_NTF& typesStruct);
std::string StructToJson(const SKILL_BULLET_NTF& typesStruct);
std::string StructToJson(const SKILL_HIT_NTF& typesStruct);
std::string StructToJson(const SKILL_STRIKE_NTF& typesStruct);
std::string StructToJson(const SKILL_END_NTF& typesStruct);
std::string StructToJson(const BATTLE_PET_NTF& typesStruct);
std::string StructToJson(const BUFF_NTF& typesStruct);
std::string StructToJson(const DAMAGE_INFO& typesStruct);
std::string StructToJson(const TAKE_DAMAGE_NTF& typesStruct);
std::string StructToJson(const TAKE_HEAL_NTF& typesStruct);
std::string StructToJson(const DEAD_NTF& typesStruct);
std::string StructToJson(const RELIVE_NTF& typesStruct);
std::string StructToJson(const COMBO_KILL_NTF& typesStruct);
std::string StructToJson(const PLAYER_DAMAGE_INFO& typesStruct);
std::string StructToJson(const DAMAGE_RANK_NTF& typesStruct);
std::string StructToJson(const PICK_DROP_OBJECT_NTF& typesStruct);
std::string StructToJson(const OBJECT_DROP_GOLD_NTF& typesStruct);
std::string StructToJson(const STATE_NTF& typesStruct);
std::string StructToJson(const PROPERTY_NTF& typesStruct);
std::string StructToJson(const PROPERTY_LIST_NTF& typesStruct);
std::string StructToJson(const BATTLE_STATE_NTF& typesStruct);
std::string StructToJson(const AI_DEBUG_REQ& typesStruct);
std::string StructToJson(const AI_DEBUG_ACK& typesStruct);
std::string StructToJson(const OFFLINE_PLAYER_INFO_REQ& typesStruct);
std::string StructToJson(const OFFLINE_PLAYER_BYNAME_REQ& typesStruct);
std::string StructToJson(const CHAT_MSG& typesStruct);
std::string StructToJson(const MARQUEE& typesStruct);
std::string StructToJson(const SERVER_MARQUEE& typesStruct);
std::string StructToJson(const MESSAGE_NTF& typesStruct);
std::string StructToJson(const NPC_BUY_REQ& typesStruct);
std::string StructToJson(const NPC_BUY_ACK& typesStruct);
std::string StructToJson(const TEAM_MEMBER& typesStruct);
std::string StructToJson(const TEAM_INFO& typesStruct);
std::string StructToJson(const TEAM_CREATE_REQ& typesStruct);
std::string StructToJson(const TEAM_OFFLINE_MEMBER_ADD_REQ& typesStruct);
std::string StructToJson(const TEAM_QUICK_JOIN_REQ& typesStruct);
std::string StructToJson(const TEAM_JOIN& typesStruct);
std::string StructToJson(const TEAM_MEMBER_DEL_REQ& typesStruct);
std::string StructToJson(const TEAM_MEMBER_DEL_ACK& typesStruct);
std::string StructToJson(const TEAM_FLAG_SET_REQ& typesStruct);
std::string StructToJson(const TEAM_MEMBER_READY_NTF& typesStruct);
std::string StructToJson(const TEAM_SHOW_INFO& typesStruct);
std::string StructToJson(const TEAM_SHOW_LIST_REQ& typesStruct);
std::string StructToJson(const TEAM_SHOW_LIST_ACK& typesStruct);
std::string StructToJson(const TEAM_DUNGEON_END_NTF& typesStruct);
std::string StructToJson(const TEAM_MEMBER_DAMAGE_INFO& typesStruct);
std::string StructToJson(const TEAM_DUNGEON_DAMAGE_LIST& typesStruct);
std::string StructToJson(const TEAM_FLY_REQ& typesStruct);
std::string StructToJson(const TEAM_MEMBER_ENTER_NTF& typesStruct);
std::string StructToJson(const TEAM_MEMBER_LEAVE_NTF& typesStruct);
std::string StructToJson(const CROSS_TEAM_MEMBER& typesStruct);
std::string StructToJson(const CROSS_TEAM_INFO& typesStruct);
std::string StructToJson(const CROSS_TEAM_CREATE_REQ& typesStruct);
std::string StructToJson(const CROSS_TEAM_INFO_REQ& typesStruct);
std::string StructToJson(const CROSS_TEAM_SHOW_LIST_REQ& typesStruct);
std::string StructToJson(const CROSS_TEAM_SHOW_INFO& typesStruct);
std::string StructToJson(const CROSS_TEAM_MEMBER_DEL_REQ& typesStruct);
std::string StructToJson(const CROSS_TEAM_MEMBER_DEL_ACK& typesStruct);
std::string StructToJson(const CROSS_TEAM_MEMBER_ADD_REQ& typesStruct);
std::string StructToJson(const CROSS_TEAM_QUICK_JOIN_REQ& typesStruct);
std::string StructToJson(const CROSS_TEAM_MEMBER_ADD_ACK& typesStruct);
std::string StructToJson(const CROSS_TEAM_MEMBER_READY_NTF& typesStruct);
std::string StructToJson(const CROSS_TEAM_DUNGEON_SCORE_INFO_REQ& typesStruct);
std::string StructToJson(const CROSS_TEAM_DUNGEON_SCORE_INFO_LIST& typesStruct);
std::string StructToJson(const MAIL_INFO& typesStruct);
std::string StructToJson(const MAIL_SYSTEM_INFO& typesStruct);
std::string StructToJson(const MAIL_OPT_REQ& typesStruct);
std::string StructToJson(const MAIL_GET_ATTACH& typesStruct);
std::string StructToJson(const MAIL_SEND_REQ& typesStruct);
std::string StructToJson(const MAIL_DEL_EXPIRED_MAIL_NTF& typesStruct);
std::string StructToJson(const BABEL_START_REQ& typesStruct);
std::string StructToJson(const BABEL_START_ACK& typesStruct);
std::string StructToJson(const BABEL_RESET_ACK& typesStruct);
std::string StructToJson(const BABEL_RAIDS_ACK& typesStruct);
std::string StructToJson(const BABEL_OPEN_NTF& typesStruct);
std::string StructToJson(const BABEL_END& typesStruct);
std::string StructToJson(const BESTOW_REWARD_REQ& typesStruct);
std::string StructToJson(const ONLINE_REWARD_INFO& typesStruct);
std::string StructToJson(const ONLINE_REWARD_INFO_ACK& typesStruct);
std::string StructToJson(const SIGN_INFO& typesStruct);
std::string StructToJson(const SIGN_ACK& typesStruct);
std::string StructToJson(const BH_ADDITION& typesStruct);
std::string StructToJson(const BH_INFO& typesStruct);
std::string StructToJson(const BH_SELECT_TYPE_REQ& typesStruct);
std::string StructToJson(const BH_SELECT_TYPE_ACK& typesStruct);
std::string StructToJson(const BH_START_REQ& typesStruct);
std::string StructToJson(const BH_START_ACK& typesStruct);
std::string StructToJson(const BH_REDEEM_REQ& typesStruct);
std::string StructToJson(const BH_REDEEM_ACK& typesStruct);
std::string StructToJson(const BH_REWARD_REQ& typesStruct);
std::string StructToJson(const BH_REWARD_ACK& typesStruct);
std::string StructToJson(const BH_END& typesStruct);
std::string StructToJson(const TEASER_END& typesStruct);
std::string StructToJson(const AUTO_FIGHT_SETTING_INFO& typesStruct);
std::string StructToJson(const SYSTEM_SETTING_INFO& typesStruct);
std::string StructToJson(const PLAYER_SETTING_INFO& typesStruct);
std::string StructToJson(const AUTOBUY_SETTING_INFO& typesStruct);
std::string StructToJson(const VOID_FIELD_SETTING_INFO& typesStruct);
std::string StructToJson(const AUTO_FIGHT_SETTING_CHANGE_REQ& typesStruct);
std::string StructToJson(const SYSTEM_SETTING_CHANGE_REQ& typesStruct);
std::string StructToJson(const PLAYER_SETTING_CHANGE_REQ& typesStruct);
std::string StructToJson(const AUTOBUY_SETTING_CHANGE_REQ& typesStruct);
std::string StructToJson(const VOID_FIELD_SETTING_CHANGE_REQ& typesStruct);
std::string StructToJson(const OPEN_DUNGEON_INFO& typesStruct);
std::string StructToJson(const DUNGEON_CLEAR_RECORD& typesStruct);
std::string StructToJson(const DUNGEON_RECORD& typesStruct);
std::string StructToJson(const PLOT_UNIT_DUNGEON_INFO& typesStruct);
std::string StructToJson(const SOUL_UNIT_DUNGEON_INFO& typesStruct);
std::string StructToJson(const DAILY_UNIT_DUNGEON_INFO& typesStruct);
std::string StructToJson(const GUILD_WELFARE_INFO& typesStruct);
std::string StructToJson(const MEMBER_PROP_NTF& typesStruct);
std::string StructToJson(const GUILD_UPDATE_INFO& typesStruct);
std::string StructToJson(const GUILD_PLAYER_ADDITION& typesStruct);
std::string StructToJson(const GUILD_ADDITION& typesStruct);
std::string StructToJson(const CREATE_GUILD_REQ& typesStruct);
std::string StructToJson(const VIEW_GUILD_INFO_REQ& typesStruct);
std::string StructToJson(const GUILD_BRIEF_INFO& typesStruct);
std::string StructToJson(const GUILD_LIST_REQ& typesStruct);
std::string StructToJson(const GUILD_LIST_ACK& typesStruct);
std::string StructToJson(const GUILD_APPLY_INFO& typesStruct);
std::string StructToJson(const GUILD_APPLY_LIST& typesStruct);
std::string StructToJson(const INVITE_JOIN_GUILD_REQ& typesStruct);
std::string StructToJson(const INVITE_JOIN_GUILD_ACK& typesStruct);
std::string StructToJson(const APPLY_JOIN_GUILD_REQ& typesStruct);
std::string StructToJson(const APPLY_JOIN_GUILD_ACK& typesStruct);
std::string StructToJson(const GUILD_ID_NTF& typesStruct);
std::string StructToJson(const GUILD_MEMBER_DEL_REQ& typesStruct);
std::string StructToJson(const GUILD_SET_OFFICE_REQ& typesStruct);
std::string StructToJson(const GUILD_SET_FLAG_REQ& typesStruct);
std::string StructToJson(const GUILD_DONATE_REQ& typesStruct);
std::string StructToJson(const GUILD_DONATE_ACK& typesStruct);
std::string StructToJson(const GUILD_ADD_GUILDPOINT_NTF& typesStruct);
std::string StructToJson(const GUILD_ADDITION_PROMOTE_REQ& typesStruct);
std::string StructToJson(const GUILD_ADDITION_PROMOTE_ACK& typesStruct);
std::string StructToJson(const GUILD_ADDITION_PROMOTE_TO_CENTER& typesStruct);
std::string StructToJson(const GUILD_ADDITION_PROMOTE_TO_GAME& typesStruct);
std::string StructToJson(const GUILD_PLAYER_SCIENCE_INFO& typesStruct);
std::string StructToJson(const GUILD_SCIENCE_INFO& typesStruct);
std::string StructToJson(const GUILD_SET_BULLETIN_REQ& typesStruct);
std::string StructToJson(const GUILD_BUY_REQ& typesStruct);
std::string StructToJson(const GUILD_BOSS_COUNTDOWN& typesStruct);
std::string StructToJson(const GUILD_BOSS_SET_TIME_REQ& typesStruct);
std::string StructToJson(const GUILD_CRUSADE_BOSS_END_NTF& typesStruct);
std::string StructToJson(const GUILD_CRUSADE_BOSS_TIME& typesStruct);
std::string StructToJson(const GUILD_BOSS_DAMAGE_INFO& typesStruct);
std::string StructToJson(const GUILD_CRUSADE_BOSS_RANK_ACK& typesStruct);
std::string StructToJson(const GUILD_DAMAGE_RANK_LIST& typesStruct);
std::string StructToJson(const GUILD_TWILIGHT_WAR_BATTLEFIELD_NTF& typesStruct);
std::string StructToJson(const GUILD_TWILIGHT_WAR_END_NTF& typesStruct);
std::string StructToJson(const CITY_FIGHT_ENTER_REQ& typesStruct);
std::string StructToJson(const CITY_FIGHT_ENTER_ACK& typesStruct);
std::string StructToJson(const CITY_FIGHT_REWARD_REQ& typesStruct);
std::string StructToJson(const CITY_FIGHT_REWARD_ACK& typesStruct);
std::string StructToJson(const CITY_FIGHT_GUILD_SCORE& typesStruct);
std::string StructToJson(const CITY_FIGHT_CITY_INFO& typesStruct);
std::string StructToJson(const CITY_FIGHT_ALL_CITY_INFO& typesStruct);
std::string StructToJson(const CITY_FIGHT_CITY_OCCUPY_NTF& typesStruct);
std::string StructToJson(const CITY_FIGHT_ONE_CITY_INFO& typesStruct);
std::string StructToJson(const CITY_FIGHT_PLAYER_INFO& typesStruct);
std::string StructToJson(const CITY_FIGHT_ONE_CITY_NTF& typesStruct);
std::string StructToJson(const CITY_FIGHT_INFO_NTF& typesStruct);
std::string StructToJson(const CITY_SURVIVAL_INFO& typesStruct);
std::string StructToJson(const CITY_SURVIVAL_RANK_INFO& typesStruct);
std::string StructToJson(const CITY_SURVIVAL_RANK_NTF& typesStruct);
std::string StructToJson(const CITY_SURVIVAL_WAVE_INFO& typesStruct);
std::string StructToJson(const CITY_SURVIVAL_REWARDS_NTF& typesStruct);
std::string StructToJson(const CITY_SURVIVAL_INFO_NTF& typesStruct);
std::string StructToJson(const WORLD_BOSS_START_NTF& typesStruct);
std::string StructToJson(const WORLD_BOSS_END_NTF& typesStruct);
std::string StructToJson(const WORLD_BOSS_DAMAGE_INFO& typesStruct);
std::string StructToJson(const WORLD_BOSS_DAMAGE_LIST& typesStruct);
std::string StructToJson(const WORLD_BOSS_CLEAR_NTF& typesStruct);
std::string StructToJson(const WORLD_BOSS_KILL_INFO_NTF& typesStruct);
std::string StructToJson(const WORLD_BOSS_INFO& typesStruct);
std::string StructToJson(const WORLD_BOSS_INFO_LIST& typesStruct);
std::string StructToJson(const VIP_GIFT_REQ& typesStruct);
std::string StructToJson(const VIP_GIFT_ACK& typesStruct);
std::string StructToJson(const VIP_INFO& typesStruct);
std::string StructToJson(const VIP_BUY_REQ& typesStruct);
std::string StructToJson(const ITEM_BUY_REQ& typesStruct);
std::string StructToJson(const ITEM_BUY_ACK& typesStruct);
std::string StructToJson(const PRODUCT_INFO& typesStruct);
std::string StructToJson(const MALL_LIST& typesStruct);
std::string StructToJson(const MALL_PRODUCT_REQ& typesStruct);
std::string StructToJson(const MALL_PRODUCT_ACK& typesStruct);
std::string StructToJson(const MALL_BUY_REQ& typesStruct);
std::string StructToJson(const MALL_BUY_ACK& typesStruct);
std::string StructToJson(const MALL_BUY_CFM& typesStruct);
std::string StructToJson(const RESTRICTION& typesStruct);
std::string StructToJson(const RESTRICTION_LIST& typesStruct);
std::string StructToJson(const PLAYER_RECHARGE_RECORDER& typesStruct);
std::string StructToJson(const PLAYER_RECHARGE_INFO& typesStruct);
std::string StructToJson(const PAY_ORDER_INFO& typesStruct);
std::string StructToJson(const TRADE_ORDER_INFO& typesStruct);
std::string StructToJson(const TRADE_ORDER_STATE_NTF& typesStruct);
std::string StructToJson(const TRADE_ORDER_GROWTH_POINT& typesStruct);
std::string StructToJson(const RANKING_LIST_REQ& typesStruct);
std::string StructToJson(const RANKING_REFRESH_REQ& typesStruct);
std::string StructToJson(const RANKING_CHANGE_REQ& typesStruct);
std::string StructToJson(const RANKING_CHANGE_ACK& typesStruct);
std::string StructToJson(const PLAYER_RANK_INFO& typesStruct);
std::string StructToJson(const TOP_RANK_INFO& typesStruct);
std::string StructToJson(const RANKING_RANK_REQ& typesStruct);
std::string StructToJson(const RANKING_RANK_ACK& typesStruct);
std::string StructToJson(const RANKING_TOP_RANK_NTF& typesStruct);
std::string StructToJson(const RANKING_PLAYER_ID_REQ& typesStruct);
std::string StructToJson(const RANKING_PLAYER_ID_ACK& typesStruct);
std::string StructToJson(const RANKING_INFO_REQ& typesStruct);
std::string StructToJson(const REGULAR_PLAYER_DEAD& typesStruct);
std::string StructToJson(const RESURGENCE_TYPE& typesStruct);
std::string StructToJson(const SEND_RESURGENCE& typesStruct);
std::string StructToJson(const RESURGENCE_AND_SEND_DEAD& typesStruct);
std::string StructToJson(const HONOR_BUY_REQ& typesStruct);
std::string StructToJson(const BIND_MONEY_POINT_BUY_REQ& typesStruct);
std::string StructToJson(const ONE_DAY_INVESTMENT_INFO& typesStruct);
std::string StructToJson(const DAY_INVESTMENT_INFO& typesStruct);
std::string StructToJson(const DAY_INVESTMENT_ACK& typesStruct);
std::string StructToJson(const DAY_INVESTMENT_ACCEPT_REWARD_REQ& typesStruct);
std::string StructToJson(const DAY_INVESTMENT_ACCEPT_REWARD_ACK& typesStruct);
std::string StructToJson(const DAY_INVESTMENT_INFO_ACK& typesStruct);
std::string StructToJson(const SAVE_DAY_INVESTMENT_INFO_REQ& typesStruct);
std::string StructToJson(const SAVE_DAY_INVESTMENT_INFO_ACK& typesStruct);
std::string StructToJson(const ONE_LEVEL_INVESTMENT_INFO& typesStruct);
std::string StructToJson(const LEVEL_INVESTMENT_INFO& typesStruct);
std::string StructToJson(const LEVEL_INVESTMENT_REQ& typesStruct);
std::string StructToJson(const LEVEL_INVESTMENT_ACK& typesStruct);
std::string StructToJson(const LEVEL_INVESTMENT_INFO_ACK& typesStruct);
std::string StructToJson(const LEVEL_INVESTMENT_ACCEPT_REWARD_REQ& typesStruct);
std::string StructToJson(const LEVEL_INVESTMENT_ACCEPT_REWARD_ACK& typesStruct);
std::string StructToJson(const SAVE_LEVEL_INVESTMENT_INFO_REQ& typesStruct);
std::string StructToJson(const SAVE_LEVEL_INVESTMENT_INFO_ACK& typesStruct);
std::string StructToJson(const INVESTMENT_OPERATION_REQ& typesStruct);
std::string StructToJson(const INVESTMENT_OPERATION_NTF& typesStruct);
std::string StructToJson(const PASSIVE_SKILL_INFO& typesStruct);
std::string StructToJson(const PASSIVE_SKILL_LIST& typesStruct);
std::string StructToJson(const SKILL_ID& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_INFO& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_INFO_LIST& typesStruct);
std::string StructToJson(const SAVE_LEVEL_ACTIVITY_INFO_REQ& typesStruct);
std::string StructToJson(const SAVE_LEVEL_ACTIVITY_INFO_ACK& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_RANKING_INFO& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_INFO& typesStruct);
std::string StructToJson(const FIRST_TIME_RECHARGE_INFO& typesStruct);
std::string StructToJson(const FIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_STORE_INFO& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_INFO_REQ& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_INFO_ACK& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_ACCEPT_REWARD_REQ& typesStruct);
std::string StructToJson(const SPECIAL_ACTIVITY_ACCEPT_REWARD_ACK& typesStruct);
std::string StructToJson(const LIVENESS_TARGET_INFO& typesStruct);
std::string StructToJson(const LIVENESS_INFO& typesStruct);
std::string StructToJson(const LIVENESS_ACCEPT_REWARD_REQ& typesStruct);
std::string StructToJson(const LIVENESS_ACCEPT_REWARD_ACK& typesStruct);
std::string StructToJson(const CURRENT_WAVE_INFO& typesStruct);
std::string StructToJson(const TD_RANK_INFO& typesStruct);
std::string StructToJson(const TD_RANK_NTF& typesStruct);
std::string StructToJson(const TD_PLAYER_ENTER_NTF& typesStruct);
std::string StructToJson(const TD_ENTER_ACK& typesStruct);
std::string StructToJson(const DUNGEON_TIMES_INFO& typesStruct);
std::string StructToJson(const DUNGEON_TIMES_LIST& typesStruct);
std::string StructToJson(const TD_ENTER_TRIGGER_NTF& typesStruct);
std::string StructToJson(const TD_START_NTF& typesStruct);
std::string StructToJson(const FACTION_PK_ACK& typesStruct);
std::string StructToJson(const FACTION_PK_END_ACK& typesStruct);
std::string StructToJson(const FACTION_PLAYER_INFO& typesStruct);
std::string StructToJson(const FACTION_PK_SCORE_NTF& typesStruct);
std::string StructToJson(const FACTION_PK_START_NTF& typesStruct);
std::string StructToJson(const FACTION_PK_BATTLE_NTF& typesStruct);
std::string StructToJson(const FACTION_PK_ADD_SCORE& typesStruct);
std::string StructToJson(const TIMING_TRIGGER_START_NTF& typesStruct);
std::string StructToJson(const TIMING_TRIGGER_END_NTF& typesStruct);
std::string StructToJson(const GAMEPLAY_TIMES_NOTIFY_REQ& typesStruct);
std::string StructToJson(const GAMEPLAY_TIMES_NOTIFY& typesStruct);
std::string StructToJson(const GAMEPLAY_TIMES_NOTIFY_LIST& typesStruct);
std::string StructToJson(const GAME_CONTRAST_REQ& typesStruct);
std::string StructToJson(const GAME_CONTRASTS& typesStruct);
std::string StructToJson(const TOUCH_START_REQ& typesStruct);
std::string StructToJson(const TOUCH_START_ACK& typesStruct);
std::string StructToJson(const TOUCH_BREAK_NTF& typesStruct);
std::string StructToJson(const TOUCH_END_NTF& typesStruct);
std::string StructToJson(const CAPTURE_FLAG_START_NTF& typesStruct);
std::string StructToJson(const CAPTURE_FLAG_RANK_INFO& typesStruct);
std::string StructToJson(const CAPTURE_FLAG_RANK_LIST& typesStruct);
std::string StructToJson(const CAPTURE_FLAG_GROUP_SCORE& typesStruct);
std::string StructToJson(const CAPTURE_FLAG_END_ACK& typesStruct);
std::string StructToJson(const YESTERDAY_COUNT& typesStruct);
std::string StructToJson(const ACTIVITY_ENTER& typesStruct);
std::string StructToJson(const GET_MEAL_VIGOR_ACK& typesStruct);
std::string StructToJson(const VIGOR_INFO& typesStruct);
std::string StructToJson(const OFF_LINE_VIGOR_INFO& typesStruct);
std::string StructToJson(const OFF_LINE_VIGOR_ACK& typesStruct);
std::string StructToJson(const GET_OFF_LINE_VIGOR_REQ& typesStruct);
std::string StructToJson(const GET_OFF_LINE_VIGOR_ACK& typesStruct);
std::string StructToJson(const ZOMBIE_DUNGEON_STATUS& typesStruct);
std::string StructToJson(const SWORD_ONE_INFO& typesStruct);
std::string StructToJson(const SWORD_NEW_INFO& typesStruct);
std::string StructToJson(const SWORD_INFO& typesStruct);
std::string StructToJson(const SWORD_UPGRADE_REQ& typesStruct);
std::string StructToJson(const SWORD_UPGRADE_ACK& typesStruct);
std::string StructToJson(const SWORD_ADVANCE_REQ& typesStruct);
std::string StructToJson(const SWORD_ADVANCE_ACK& typesStruct);
std::string StructToJson(const SWORD_ACTIVATE_REQ& typesStruct);
std::string StructToJson(const SWORD_ACTIVATE_ACK& typesStruct);
std::string StructToJson(const SWORD_LOCK_REQ& typesStruct);
std::string StructToJson(const SWORD_LOCK_ACK& typesStruct);
std::string StructToJson(const SWORD_EQUIP_REQ& typesStruct);
std::string StructToJson(const SWORD_EQUIP_ACK& typesStruct);
std::string StructToJson(const ZOMBIE_WAR_INFO& typesStruct);
std::string StructToJson(const ZOMBIE_WAR_UPDATE& typesStruct);
std::string StructToJson(const ZOMBIE_WAR_ENTER_REQ& typesStruct);
std::string StructToJson(const ZOMBIE_WAR_END& typesStruct);
std::string StructToJson(const VOID_FIELD_CHANNEL_INFO& typesStruct);
std::string StructToJson(const VOID_FIELD_CHANNEL_INFO_REQ& typesStruct);
std::string StructToJson(const VOID_FIELD_REGULAR_TYPE_NTF& typesStruct);
std::string StructToJson(const VOID_FIELD_STATE_INFO& typesStruct);
std::string StructToJson(const VOID_FIELD_CHESTS_NUM& typesStruct);
std::string StructToJson(const VOID_FIELD_BATTLE_INFO& typesStruct);
std::string StructToJson(const VOID_FIELD_PERSONAL_INFO_NTF& typesStruct);
std::string StructToJson(const VOID_FIELD_SET_HOOK_POS_REQ& typesStruct);
std::string StructToJson(const VOID_FIELD_HOOK_POS_NTF& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_ITEM_INFO& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_BAG& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_APPLY_REQ& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_APPLY_ACK& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_INFO_ACK& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_PK_END_INFO& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_PK_END_ACK& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_WAIT_ACK& typesStruct);
std::string StructToJson(const MULTISERVER_MATCH_COUNT& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_SEASON_NTF& typesStruct);
std::string StructToJson(const MULTISERVER_BATTLE_ABOUT_RANK_NTF& typesStruct);
std::string StructToJson(const PUSH_360_NTF& typesStruct);
std::string StructToJson(const PROCLAMATION_INFO& typesStruct);
std::string StructToJson(const SHORCUT_BAG& typesStruct);
std::string StructToJson(const GAME_SETTING_CHANNEL_NUM& typesStruct);
std::string StructToJson(const DROP_CHEST_TIME& typesStruct);
std::string StructToJson(const GMT_VALUE& typesStruct);
std::string StructToJson(const GMT_MSG& typesStruct);
std::string StructToJson(const GMT_MSG_SET_GAME& typesStruct);
std::string StructToJson(const GMT_MSG_SET_GAME_LIST& typesStruct);
std::string StructToJson(const FIELD_BOSS_INFO& typesStruct);
std::string StructToJson(const FIELD_BOSS_INFO_REQ& typesStruct);
std::string StructToJson(const FIELD_BOSS_INFO_ACK& typesStruct);
std::string StructToJson(const FIELD_BOSS_UPDATE_DROP_STATE_ACK& typesStruct);
std::string StructToJson(const FIELD_BOSS_PLAYER_IS_OFFLINE_REQ& typesStruct);
std::string StructToJson(const FIELD_BOSS_PLAYER_IS_OFFLINE_ACK& typesStruct);
std::string StructToJson(const FIELD_BOSS_SET_HOOK_POS_REQ& typesStruct);
std::string StructToJson(const TOP_UP_RANK_QUERY_CREATE_REQ& typesStruct);
std::string StructToJson(const TOP_UP_RANK_INFO& typesStruct);
std::string StructToJson(const TOP_UP_RANK_INFO_ACK& typesStruct);
std::string StructToJson(const PAY_POINT_LOTTERY_ITEM& typesStruct);
std::string StructToJson(const PAY_POINT_LOTTERY_PACKAGE& typesStruct);
std::string StructToJson(const PAY_POINT_LOTTERY_GET_RECORD& typesStruct);
std::string StructToJson(const PAY_POINT_LOTTERY_INFO& typesStruct);
std::string StructToJson(const PAY_POINT_LOTTERY_INFO_ACK& typesStruct);
std::string StructToJson(const PAY_POINT_LOTTERY_OUTPUT_ACK& typesStruct);
std::string StructToJson(const PAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ& typesStruct);
std::string StructToJson(const PAY_POINT_LOTTERY_NTF& typesStruct);
std::string StructToJson(const VIP_ONLY_DUNGEON_CFG& typesStruct);
std::string StructToJson(const VIP_ONLY_DUNGEON_INFO& typesStruct);
std::string StructToJson(const VIP_ONLY_DUNGEON_INFO_ACK& typesStruct);
std::string StructToJson(const VIP_ONLY_DUNGEON_END_ACK& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_DAY_STATE& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_TYPE_INFO& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_INFO& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_INVESTMENT_REQ& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_INVESTMENT_ACK& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_ADDITIONAL_REQ& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_ADDITIONAL_ACK& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_REWARD_REQ& typesStruct);
std::string StructToJson(const INVESTMENT_PLAN_REWARD_ACK& typesStruct);
std::string StructToJson(const OFFLINE_EVENT_INFO& typesStruct);
std::string StructToJson(const OFFLINE_EVENT_LIST& typesStruct);
std::string StructToJson(const GAME_SETTING_INFO& typesStruct);
std::string StructToJson(const GAME_SETTING_LIST& typesStruct);
std::string StructToJson(const VIP_STATISTICS_DATA& typesStruct);
std::string StructToJson(const VIP_STATISTICS_CONFIG& typesStruct);
std::string StructToJson(const GAME_SETTING_DONATE_CONFIG& typesStruct);
std::string StructToJson(const GAME_SETTING_VOID_FIELD_MULTI_CONFIG& typesStruct);
std::string StructToJson(const GAME_SETTING_VOID_FIELD_SOLO_CONFIG& typesStruct);
std::string StructToJson(const VIP_STATISTICS_AUTO_GROWTH& typesStruct);
std::string StructToJson(const VIP_STATISTICS_AUTO_GROWTH_LIST& typesStruct);
std::string StructToJson(const VIP_STATISTICS_PLAYER_VIP& typesStruct);
std::string StructToJson(const VIP_STATISTICS_VIP_PLAYER_NUM& typesStruct);
std::string StructToJson(const VIP_STATISTICS_INFO& typesStruct);
std::string StructToJson(const DONATE_INFO& typesStruct);
std::string StructToJson(const DONATE_ALL_INFO& typesStruct);
std::string StructToJson(const DONATE_PUT& typesStruct);
std::string StructToJson(const DONATE_ADD_BINDMONEY_NTF& typesStruct);
std::string StructToJson(const DONATE_ALL_BINDMONEY_NTF& typesStruct);
std::string StructToJson(const DONATE_REWARD_MONEYPOINT& typesStruct);
std::string StructToJson(const CHAOS_KILL_NUM_NTF& typesStruct);
std::string StructToJson(const CHAOS_PLAYER_INFO& typesStruct);
std::string StructToJson(const CHAOS_SCORE_RANK_NTF& typesStruct);
std::string StructToJson(const CHAOS_END_PLAYER_INFO& typesStruct);
std::string StructToJson(const CHAOS_END_NTF& typesStruct);
std::string StructToJson(const RANKING_ALLIANCE_INFO& typesStruct);
std::string StructToJson(const CHAOS_REWARD_OFFLINE_EVENT& typesStruct);
std::string StructToJson(const CHAOS_TEAMMEMBER& typesStruct);
std::string StructToJson(const CHAOS_BATTLE_INFO_NTF& typesStruct);
std::string StructToJson(const SEASON_INFO& typesStruct);
std::string StructToJson(const CHAOS_KILL_INFO_NTF& typesStruct);
std::string StructToJson(const CHAOS_PLAYER_INOUT_NTF& typesStruct);
std::string StructToJson(const DUNGEON_RUN_ACK& typesStruct);
std::string StructToJson(const DUNGEON_MOSTER_ID_LIST& typesStruct);
std::string StructToJson(const EGG_INFO& typesStruct);
std::string StructToJson(const EGG_INFO_CONFI& typesStruct);
std::string StructToJson(const BUY_CHEAPS_ITEM& typesStruct);
std::string StructToJson(const BUY_CHEAP_CONFIG& typesStruct);
std::string StructToJson(const BUY_CHEAP_STATE& typesStruct);
std::string StructToJson(const BUY_CHEAP_INFO& typesStruct);
std::string StructToJson(const BUY_CHEAP_BUY_REQ& typesStruct);
std::string StructToJson(const BUY_CHEAP_BUY_ACK& typesStruct);
std::string StructToJson(const BUY_CHEAP_REWARD_ACK& typesStruct);
std::string StructToJson(const DAILY_DRAW_FASHION_DAY& typesStruct);
std::string StructToJson(const DAILY_DRAW_FASHION_WEEK& typesStruct);
std::string StructToJson(const DAILY_DRAW_FASHION_INFO& typesStruct);
std::string StructToJson(const GAMESERVER_STATE& typesStruct);
std::string StructToJson(const HEAD_PORTRAIT_INFO& typesStruct);
std::string StructToJson(const ALCHEMY_MAKE_ITEM& typesStruct);
std::string StructToJson(const DECOMPOSE_INFO_REQ& typesStruct);
std::string StructToJson(const DECOMPOSE_INFO_ACK& typesStruct);
std::string StructToJson(const ACTIVECODE_USE_ACK& typesStruct);
std::string StructToJson(const FORMATION_LEVEL_INFO& typesStruct);
std::string StructToJson(const PET_FORMATION_UPGRADE_ACK& typesStruct);
std::string StructToJson(const PET_FORMATION_CHANGE_ACK& typesStruct);
std::string StructToJson(const FASHION_SMELT_REQ& typesStruct);
std::string StructToJson(const GLOBAL_FASHION_INFO& typesStruct);
std::string StructToJson(const GLOBAL_CONFIG_BAG& typesStruct);
std::string StructToJson(const GLOBAL_FASHION_INFO_LIST& typesStruct);
std::string StructToJson(const TREASURE_PACKAGE_INFO& typesStruct);
std::string StructToJson(const FASHION_BAG& typesStruct);
std::string StructToJson(const STONE_INFO& typesStruct);
std::string StructToJson(const PACKAGE_INFO& typesStruct);
std::string StructToJson(const ITEM_EQUIP& typesStruct);
std::string StructToJson(const ITEM_INFO& typesStruct);
std::string StructToJson(const OPT_ITEM_REQ& typesStruct);
std::string StructToJson(const OPT_ITEM_ACK& typesStruct);
std::string StructToJson(const OPT_ITEM_INFO_NTF& typesStruct);
std::string StructToJson(const ITEM_STRENGTHEN_ACK& typesStruct);
std::string StructToJson(const EQUIP_WASH_UP_REQ& typesStruct);
std::string StructToJson(const EQUIP_STAR_UP_REQ& typesStruct);
std::string StructToJson(const EQUIP_ENCHANT_REQ& typesStruct);
std::string StructToJson(const GEM_STRENGTHEN_ACK& typesStruct);
std::string StructToJson(const TASK_GAME_INFO& typesStruct);
std::string StructToJson(const TASK_FESTIVAL_INFO& typesStruct);
std::string StructToJson(const TASK_INFO& typesStruct);
std::string StructToJson(const TASK_REFRESH_ACK& typesStruct);
std::string StructToJson(const PROP_BASE_INFO& typesStruct);
std::string StructToJson(const BUFF_INFO& typesStruct);
std::string StructToJson(const OFFLINE_PLAYER_ACK& typesStruct);
std::string StructToJson(const PLAYER_DOOR_INFO& typesStruct);
std::string StructToJson(const ACTIVITY_LIST& typesStruct);
std::string StructToJson(const WING_INFO& typesStruct);
std::string StructToJson(const WING_TRANSMOGRIFICATION_ACK& typesStruct);
std::string StructToJson(const FINAL_SKILL_INFO& typesStruct);
std::string StructToJson(const FINAL_SKILL_INFO_LIST& typesStruct);
std::string StructToJson(const FRIEND_INFO& typesStruct);
std::string StructToJson(const FRIEND_LIST& typesStruct);
std::string StructToJson(const TRIGGER_APPEAR& typesStruct);
std::string StructToJson(const TOUCH_APPEAR& typesStruct);
std::string StructToJson(const DROP_OBJECT_APPEAR& typesStruct);
std::string StructToJson(const SCENEOBJECT_APPEAR_LIST& typesStruct);
std::string StructToJson(const USE_SKILL_REQ& typesStruct);
std::string StructToJson(const USE_SKILL_NTF& typesStruct);
std::string StructToJson(const CROSS_TEAM_SHOW_LIST_ACK& typesStruct);
std::string StructToJson(const PLOT_DUNGEON_INFO& typesStruct);
std::string StructToJson(const SOUL_DUNGEON_INFO& typesStruct);
std::string StructToJson(const DAILY_DUNGEON_INFO& typesStruct);
std::string StructToJson(const PLAYER_DUNGEON_INFO& typesStruct);
std::string StructToJson(const GUILD_MEMBER& typesStruct);
std::string StructToJson(const GUILD_INFO& typesStruct);
std::string StructToJson(const GUILD_NOTICE_ACK& typesStruct);
std::string StructToJson(const RANKING_PLAYER_INFO& typesStruct);
std::string StructToJson(const RANKING_LIST& typesStruct);
std::string StructToJson(const RANKING_ACK& typesStruct);
std::string StructToJson(const INVESTMENT_OPERATION_ACK& typesStruct);
std::string StructToJson(const FACTION_PK_RANK_NTF& typesStruct);
std::string StructToJson(const VOID_FIELD_CHANNEL_INFO_ACK& typesStruct);
std::string StructToJson(const GLOBAL_PROCLAMATION_BAG& typesStruct);
std::string StructToJson(const RANK_QUERY_CREATE_INFO& typesStruct);
std::string StructToJson(const CHAOS_TEAM_LIST& typesStruct);
std::string StructToJson(const EGG_ACTIVITY_INFO& typesStruct);
std::string StructToJson(const DAILY_DRAW_FASHION_CONFIG& typesStruct);
std::string StructToJson(const ALCHEMY_MAKE_INFO_ACK& typesStruct);
std::string StructToJson(const PET_FORMATION_INFO& typesStruct);
std::string StructToJson(const EQUIP_INFO& typesStruct);
std::string StructToJson(const UPDATE_EQUIP_INFO_NTF& typesStruct);
std::string StructToJson(const PACKAGE_BAG& typesStruct);
std::string StructToJson(const STATE_INFO& typesStruct);
std::string StructToJson(const PLAYER_STATE_INFO& typesStruct);
std::string StructToJson(const PLAYER_DOOR_ALL_INFO& typesStruct);
std::string StructToJson(const SKILL_COMPONENT_INFO& typesStruct);
std::string StructToJson(const SOLDIER_INFO& typesStruct);
std::string StructToJson(const PET_INFO& typesStruct);
std::string StructToJson(const PLAYER_INFO& typesStruct);
std::string StructToJson(const PLAYER_APPEAR& typesStruct);
std::string StructToJson(const OFFLINE_PLAYER_APPEAR& typesStruct);
std::string StructToJson(const PET_APPEAR& typesStruct);
std::string StructToJson(const BATTLEUNIT_APPEAR_LIST& typesStruct);
std::string StructToJson(const DELIVER_PLAYER_INFO_REQ& typesStruct);
std::string StructToJson(const WRITEBACK_PLAYER_INFO_REQ& typesStruct);
std::string StructToJson(const PET_FORMATION_ACK& typesStruct);
/*StructToJson Function Declare End*/
/*JsonToStruct Function Declare Begin*/
bool JsonToStruct(NONE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BIGINT_ID& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VECTOR3D_INT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ERROR_CODE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_TIME& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_ACTIVE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_ACTIVE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_LIST_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_LIST_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_GATEID_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_DUNGEON_LIST_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONITOR_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONITOR_PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONITOR_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONITOR_DUNGEON_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GATESVR_CLOSE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SYNC_FRAME_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEST_ECHO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEST_DTAT1& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEST_DTAT2& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEST_DTAT3& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ENCRYPT_TOKEN& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LOGIN_GAME_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LOGIN_GAME_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(KEY_VALUE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHANGE_PLAYER_NAME_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHANGE_PLAYER_NAME_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_MAP_TYPE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_CURRENT_RESUREGECE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LEVEL_ACTIVITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ENEMY_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ENEMY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ENEMY_ATTACKER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CREATURE_EVIL& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CREATURE_EVIL_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIGHT_MODE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIGHT_MODE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PROPERTY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TURNTABLE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CAREER_DATA& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACTIVATION_CODE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(STONE_TURN_GOLD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(REWARD_ITEM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WELCOME_DATA& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DO_CHANGE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RAND_REWARD_ITEM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(REWARD_TABLE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(REWARD_TABLE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(REWARD_TABLE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(REWARD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_TRAIN& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_TRAIN_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_MARKT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_ALTAS& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_ALTAS_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_SET_MODELS_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_MARK_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_MARK_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INIT_RIDE_PET_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_RIDE_PET_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_RIDE_PET_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_LEVELUP_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_LEVELUP_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_RIDEORFREE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_MARK_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_TRAIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_TRAIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(END_TRAIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(END_TRAIN_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_OPENFILED_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_OPENFILED_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_UPDATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_UPDATE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_SENDGIF_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_PET_ABSORB_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RAND_ITEM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACTIVATION_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRAIN_POST_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(STONE_TRAIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(NOW_TRAIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANDOM_EXP& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PROTECT_SOUL& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PROTECT_SOUL_INIT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_RANDOM_EXP& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_RANDOM_EXP_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PROTECT_SOUL_LEVEL& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_ACTIVE_SOUL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_LIST_UPDATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_SERACH_UPDATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_SERACH_UPDATE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_ADD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_INIT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_INIT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_FREE_LEVE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_FINGERGUESS_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_FINGERGUESS_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_MODIFYNAME_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_MODIFYNAME_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_AUTOEAT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_AUTOEAT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_SHOW_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_SHOW_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_CANLESHOW_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_CANLESHOW_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_EATSOUL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_EATSOUL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_ACTIVE_SOUL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_SWALLOW_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_SWALLOW_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_STARCHSEARCH_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_STARCHSEARCH_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_FINISHSEARCH_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_FINISHSEARCH_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_STOPSEARCH_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_STOPSEARCH_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_GETSEARCHOBJ_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_GETSEARCHOB_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_POSTEXERC_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_POSTEXERC_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_NOWEXERC_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_NOWEXERC_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_TIMEEXER_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_TIMEEXER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_OVERTIMEEXER_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_OVERTIMEEXER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_EVOLUTI_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_EVOLUTI_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_CAN_RECUIT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_CAN_RECUIT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_USEITEM_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_USEITEM_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_LEVLE_UP_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FORMATION_LOCK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_FORMATION_UPGRADE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_FORMATION_CHANGE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_FORMATION_LOCK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_FORMATION_LOCK_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_BATTLE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_GET_AWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_END_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_MARQUEE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_RANK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_RANK_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_START_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASHURA_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACHIVE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACHIVE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACHIVE_STATE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TITLE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TITLE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TITLE_STATE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_TITLE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(EQUIP_TITLE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_FASHION_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_FASHION_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_COMPOSE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_COMPOSE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_ACTIVATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_GET_TREASURE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_GET_TREASURE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_TREASURE_CONFIG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_SMELT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_SMELT_ITEM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INCARNATION_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEASER_FASHION_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TREASURE_PACKAGE_ITEM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(POTION_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(POTION_USE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PACKAGE_COUNT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PACKAGE_TIME_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANDOM_PACKAGE_CARD_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANDOM_PACKAGE_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANDOM_PACKAGE_RECORD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_QUALITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RIDE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FOLLOW_PET_SKILL& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_BASE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_CONSUME& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_MATERIAL& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_STONE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRIPLE_VALUE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CONSUME_CD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_STRENGTHEN_STONE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OPT_ITEM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GEM_SOCKET_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GEM_UNSOCKET_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GEM_FUSE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GEM_EVOLUTE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GEM_ADD_HOLE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SYNTHETIZE_JEWEL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SYNTHETIZE_JEWEL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(UPGRADE_JEWEL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(UPGRADE_JEWEL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_CONDITION& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_TARGET& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_TEMPLATE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_FESTIVAL_TEMPLATE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_FESTIVAL_TEMPLATE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_TARGET_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_DAILY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_CRUSADE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_GUARD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_GUILD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_ACHIVE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FESTIVAL_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_UPDATE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_CHANGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_GUILD_REFRESH_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TAKE_TASK_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_TALK_NPC& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_CHANGE_DUNGEON_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_QUALITY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_COMPLETE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_ITEM_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_RECEIVE_BOX_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_RECEIVE_BOX_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_FESTIVAL_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_FESTIVAL_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(NOTIFY_OBJ_FLAG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(NOTIFY_OBJ_FLAG_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAILY_RESET_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_GUARD_BUY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_GUILD_RESET_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_GUILD_BOX_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUIDE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OPEN_SYSTEM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRIGGER_ACTIVATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRIGGER_ACTIVATE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRIGGER_STATE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(REWARD_POOL_CLEAR_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SINGLE_ANSWER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SINGLE_ANSWER_INI_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SINGLE_ANSWER_CD_TIME_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FCM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ZOMBIE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GIFT_CODE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUFF_FUNC& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_EQUIP_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_PLAYER_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BATTLE_POWER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_DOOR_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_DOOR_SELECT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_DOOR_RAID_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_DOOR_AUTO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_DOOR_AUTO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_DOOR_KILL_CD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_DOOR_CD_OVER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_DOOR_END& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LIMIT_BUY& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LIMIT_BUY_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LIMIT_BUY_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_PLAYER_INFO_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_RESET_CHALLENGE_COUNT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_SELECT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_END& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_REWARD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_REPORT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_ADD_CHALLENGE_COUNT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_KILL_CD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_CD_OVER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_REWARD_CD_OVER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MY_OLD_RANK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BABEL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_SCORE_SAVE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_GEN_RANK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_READY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_QUESTION_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_QUESTION_CMF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_RESULT_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DOUBLE_SCORE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DOUBLE_SCORE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_PLAYER_TOPRANK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_TOPRANK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ANSWER_PLAYER_RANK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SINGLE_QUESTION_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SINGLE_ANSWER_RESULT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SINGLE_RESLUT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RACING_ENTER_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RACING_ENTER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RACING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MINING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MINING_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACTIVITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TREASURY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TREASURY_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TREASURY_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TREASURY_BUY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GOLDTREE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GOLDTREE_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GOLDTREE_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GOLDTREE_BUY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ADVENTURE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ADVENTURER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ADVENTURER_INFO_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ADVENTURE_JOIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ADVENTURE_ROB_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ADVENTURE_ROB_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ADVENTURE_ADD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PRO_LOCK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LOCK_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WING_LOCK_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WING_ONE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WING_ADVANCE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WING_ADVANCE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WING_TRANSMOGRIFICATION_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WING_ACTIVATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(HOROSCOPE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(HOROSCOPE_LEVELUP_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(HOROSCOPE_LEVELUP_CMPL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FRIEND_ADD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FRIEND_ADD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FRIEND_DEL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FRIEND_DEL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FRIEND_QUICK_ADD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_PLAYER_ID_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SOLDIER_ENABLE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SOLDIER_ENABLE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SOLDIER_RESURGENCE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_PLAYER_ID_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_GAMESVR_ID_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SET_GAMESVR_ID_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SCORE_MEMBER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_SCORE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_READY_COUNTDOWN& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_SCORE_INFO_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ENTER_DUNGEON_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_EVENT_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_BASE_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(REFRESH_VIGOR_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ONLINE_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ONLINE_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GROW_LEVEL_GIFT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GROW_LEVEL_GIFT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BESTOW_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ONLINE_PK_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_LOG_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BEHAVIOR_LOG_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LOG_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LOGOUT_GAME& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(KICKOUT_GAME& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CREATE_PLAYER_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(IS_CREATE_PLAYER_NAME_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASK_PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ASK_PLAYER_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LOAD_PLAYER_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BATTLEUNIT_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MONSTER_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BOSS_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BATTLEUNIT_DISAPPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SCENEOBJECT_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SCENEOBJECT_DISAPPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PICK_DROP_OBJECT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(NOTIFY_PICK_DROP_OJBECT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_START& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_LOCK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MOVE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(JUMP_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BOUNCE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CREATURE_MOVE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CREATURE_MOVE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHANGE_DUNGEON_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHANGE_DUNGEON_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_LIFE_COUNT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SCENE_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SCENE_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CLEAR_SCENE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CLEAR_DUNGEON_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OPEN_BOX_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FLIP_CARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHANGE_SCENE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHANGE_SCENE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_CONDITION& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_CONDITION_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SHOOT_TARGET& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_ARGUMETNS& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_LAUNCH_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_BULLET_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_HIT_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_STRIKE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BATTLE_PET_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUFF_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAMAGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TAKE_DAMAGE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TAKE_HEAL_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DEAD_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RELIVE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(COMBO_KILL_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DAMAGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAMAGE_RANK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PICK_DROP_OBJECT_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OBJECT_DROP_GOLD_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(STATE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PROPERTY_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PROPERTY_LIST_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BATTLE_STATE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(AI_DEBUG_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(AI_DEBUG_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_PLAYER_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_PLAYER_BYNAME_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAT_MSG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MARQUEE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SERVER_MARQUEE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MESSAGE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(NPC_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(NPC_BUY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_MEMBER& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_CREATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_OFFLINE_MEMBER_ADD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_QUICK_JOIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_JOIN& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_MEMBER_DEL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_MEMBER_DEL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_FLAG_SET_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_MEMBER_READY_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_SHOW_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_SHOW_LIST_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_SHOW_LIST_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_DUNGEON_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_MEMBER_DAMAGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_DUNGEON_DAMAGE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_FLY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_MEMBER_ENTER_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEAM_MEMBER_LEAVE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_MEMBER& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_CREATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_SHOW_LIST_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_SHOW_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_MEMBER_DEL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_MEMBER_DEL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_MEMBER_ADD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_QUICK_JOIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_MEMBER_ADD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_MEMBER_READY_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_DUNGEON_SCORE_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_DUNGEON_SCORE_INFO_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MAIL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MAIL_SYSTEM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MAIL_OPT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MAIL_GET_ATTACH& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MAIL_SEND_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MAIL_DEL_EXPIRED_MAIL_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BABEL_START_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BABEL_START_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BABEL_RESET_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BABEL_RAIDS_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BABEL_OPEN_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BABEL_END& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BESTOW_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ONLINE_REWARD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ONLINE_REWARD_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SIGN_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SIGN_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_ADDITION& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_SELECT_TYPE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_SELECT_TYPE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_START_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_START_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_REDEEM_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_REDEEM_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BH_END& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TEASER_END& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(AUTO_FIGHT_SETTING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SYSTEM_SETTING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_SETTING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(AUTOBUY_SETTING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_SETTING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(AUTO_FIGHT_SETTING_CHANGE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SYSTEM_SETTING_CHANGE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_SETTING_CHANGE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(AUTOBUY_SETTING_CHANGE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_SETTING_CHANGE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OPEN_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_CLEAR_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLOT_UNIT_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SOUL_UNIT_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAILY_UNIT_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_WELFARE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MEMBER_PROP_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_UPDATE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_PLAYER_ADDITION& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_ADDITION& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CREATE_GUILD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIEW_GUILD_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_BRIEF_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_LIST_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_LIST_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_APPLY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_APPLY_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVITE_JOIN_GUILD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVITE_JOIN_GUILD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(APPLY_JOIN_GUILD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(APPLY_JOIN_GUILD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_ID_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_MEMBER_DEL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_SET_OFFICE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_SET_FLAG_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_DONATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_DONATE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_ADD_GUILDPOINT_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_ADDITION_PROMOTE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_ADDITION_PROMOTE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_ADDITION_PROMOTE_TO_CENTER& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_ADDITION_PROMOTE_TO_GAME& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_PLAYER_SCIENCE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_SCIENCE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_SET_BULLETIN_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_BOSS_COUNTDOWN& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_BOSS_SET_TIME_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_CRUSADE_BOSS_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_CRUSADE_BOSS_TIME& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_BOSS_DAMAGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_CRUSADE_BOSS_RANK_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_DAMAGE_RANK_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_TWILIGHT_WAR_BATTLEFIELD_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_TWILIGHT_WAR_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_ENTER_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_ENTER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_GUILD_SCORE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_CITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_ALL_CITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_CITY_OCCUPY_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_ONE_CITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_ONE_CITY_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_FIGHT_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_SURVIVAL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_SURVIVAL_RANK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_SURVIVAL_RANK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_SURVIVAL_WAVE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_SURVIVAL_REWARDS_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CITY_SURVIVAL_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WORLD_BOSS_START_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WORLD_BOSS_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WORLD_BOSS_DAMAGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WORLD_BOSS_DAMAGE_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WORLD_BOSS_CLEAR_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WORLD_BOSS_KILL_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WORLD_BOSS_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WORLD_BOSS_INFO_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_GIFT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_GIFT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_BUY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PRODUCT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MALL_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MALL_PRODUCT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MALL_PRODUCT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MALL_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MALL_BUY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MALL_BUY_CFM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RESTRICTION& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RESTRICTION_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_RECHARGE_RECORDER& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_RECHARGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_ORDER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRADE_ORDER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRADE_ORDER_STATE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRADE_ORDER_GROWTH_POINT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_LIST_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_REFRESH_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_CHANGE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_CHANGE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_RANK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOP_RANK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_RANK_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_RANK_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_TOP_RANK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_PLAYER_ID_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_PLAYER_ID_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(REGULAR_PLAYER_DEAD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RESURGENCE_TYPE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SEND_RESURGENCE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RESURGENCE_AND_SEND_DEAD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(HONOR_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BIND_MONEY_POINT_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ONE_DAY_INVESTMENT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAY_INVESTMENT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAY_INVESTMENT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAY_INVESTMENT_ACCEPT_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAY_INVESTMENT_ACCEPT_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAY_INVESTMENT_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SAVE_DAY_INVESTMENT_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SAVE_DAY_INVESTMENT_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ONE_LEVEL_INVESTMENT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LEVEL_INVESTMENT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LEVEL_INVESTMENT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LEVEL_INVESTMENT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LEVEL_INVESTMENT_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LEVEL_INVESTMENT_ACCEPT_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LEVEL_INVESTMENT_ACCEPT_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SAVE_LEVEL_INVESTMENT_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SAVE_LEVEL_INVESTMENT_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_OPERATION_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_OPERATION_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PASSIVE_SKILL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PASSIVE_SKILL_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_ID& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_INFO_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SAVE_LEVEL_ACTIVITY_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SAVE_LEVEL_ACTIVITY_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_RANKING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_BATTLE_POWER_RANKING_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_BATTLE_POWER_ACTIVITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIRST_TIME_RECHARGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIRST_TIME_RECHARGE_ACCEPT_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_STORE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_ACCEPT_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SPECIAL_ACTIVITY_ACCEPT_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LIVENESS_TARGET_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LIVENESS_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LIVENESS_ACCEPT_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(LIVENESS_ACCEPT_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CURRENT_WAVE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TD_RANK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TD_RANK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TD_PLAYER_ENTER_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TD_ENTER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_TIMES_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_TIMES_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TD_ENTER_TRIGGER_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TD_START_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FACTION_PK_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FACTION_PK_END_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FACTION_PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FACTION_PK_SCORE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FACTION_PK_START_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FACTION_PK_BATTLE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FACTION_PK_ADD_SCORE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TIMING_TRIGGER_START_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TIMING_TRIGGER_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAMEPLAY_TIMES_NOTIFY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAMEPLAY_TIMES_NOTIFY& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAMEPLAY_TIMES_NOTIFY_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_CONTRAST_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_CONTRASTS& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOUCH_START_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOUCH_START_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOUCH_BREAK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOUCH_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CAPTURE_FLAG_START_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CAPTURE_FLAG_RANK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CAPTURE_FLAG_RANK_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CAPTURE_FLAG_GROUP_SCORE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CAPTURE_FLAG_END_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(YESTERDAY_COUNT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACTIVITY_ENTER& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GET_MEAL_VIGOR_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIGOR_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFF_LINE_VIGOR_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFF_LINE_VIGOR_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GET_OFF_LINE_VIGOR_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GET_OFF_LINE_VIGOR_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ZOMBIE_DUNGEON_STATUS& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_ONE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_NEW_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_UPGRADE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_UPGRADE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_ADVANCE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_ADVANCE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_ACTIVATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_ACTIVATE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_LOCK_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_LOCK_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_EQUIP_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SWORD_EQUIP_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ZOMBIE_WAR_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ZOMBIE_WAR_UPDATE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ZOMBIE_WAR_ENTER_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ZOMBIE_WAR_END& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_CHANNEL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_CHANNEL_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_REGULAR_TYPE_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_STATE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_CHESTS_NUM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_BATTLE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_PERSONAL_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_SET_HOOK_POS_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_HOOK_POS_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_ITEM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_BAG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_APPLY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_APPLY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_PK_END_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_PK_END_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_WAIT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_MATCH_COUNT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_SEASON_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(MULTISERVER_BATTLE_ABOUT_RANK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PUSH_360_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PROCLAMATION_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SHORCUT_BAG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_SETTING_CHANNEL_NUM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DROP_CHEST_TIME& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GMT_VALUE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GMT_MSG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GMT_MSG_SET_GAME& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GMT_MSG_SET_GAME_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIELD_BOSS_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIELD_BOSS_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIELD_BOSS_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIELD_BOSS_UPDATE_DROP_STATE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIELD_BOSS_PLAYER_IS_OFFLINE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIELD_BOSS_PLAYER_IS_OFFLINE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FIELD_BOSS_SET_HOOK_POS_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOP_UP_RANK_QUERY_CREATE_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOP_UP_RANK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOP_UP_RANK_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_POINT_LOTTERY_ITEM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_POINT_LOTTERY_PACKAGE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_POINT_LOTTERY_GET_RECORD& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_POINT_LOTTERY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_POINT_LOTTERY_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_POINT_LOTTERY_OUTPUT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_POINT_LOTTERY_EXCHANGE_ITEM_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PAY_POINT_LOTTERY_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_ONLY_DUNGEON_CFG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_ONLY_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_ONLY_DUNGEON_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_ONLY_DUNGEON_END_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_DAY_STATE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_TYPE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_INVESTMENT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_INVESTMENT_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_ADDITIONAL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_ADDITIONAL_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_REWARD_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_PLAN_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_EVENT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_EVENT_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_SETTING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_SETTING_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_STATISTICS_DATA& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_STATISTICS_CONFIG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_SETTING_DONATE_CONFIG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_SETTING_VOID_FIELD_MULTI_CONFIG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAME_SETTING_VOID_FIELD_SOLO_CONFIG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_STATISTICS_AUTO_GROWTH& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_STATISTICS_AUTO_GROWTH_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_STATISTICS_PLAYER_VIP& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_STATISTICS_VIP_PLAYER_NUM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VIP_STATISTICS_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DONATE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DONATE_ALL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DONATE_PUT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DONATE_ADD_BINDMONEY_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DONATE_ALL_BINDMONEY_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DONATE_REWARD_MONEYPOINT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_KILL_NUM_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_SCORE_RANK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_END_PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_END_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_ALLIANCE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_REWARD_OFFLINE_EVENT& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_TEAMMEMBER& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_BATTLE_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SEASON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_KILL_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_PLAYER_INOUT_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_RUN_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DUNGEON_MOSTER_ID_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(EGG_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(EGG_INFO_CONFI& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUY_CHEAPS_ITEM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUY_CHEAP_CONFIG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUY_CHEAP_STATE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUY_CHEAP_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUY_CHEAP_BUY_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUY_CHEAP_BUY_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUY_CHEAP_REWARD_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAILY_DRAW_FASHION_DAY& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAILY_DRAW_FASHION_WEEK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAILY_DRAW_FASHION_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GAMESERVER_STATE& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(HEAD_PORTRAIT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ALCHEMY_MAKE_ITEM& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DECOMPOSE_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DECOMPOSE_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACTIVECODE_USE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FORMATION_LEVEL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_FORMATION_UPGRADE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_FORMATION_CHANGE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_SMELT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GLOBAL_FASHION_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GLOBAL_CONFIG_BAG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GLOBAL_FASHION_INFO_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TREASURE_PACKAGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FASHION_BAG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(STONE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PACKAGE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_EQUIP& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OPT_ITEM_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OPT_ITEM_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OPT_ITEM_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ITEM_STRENGTHEN_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(EQUIP_WASH_UP_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(EQUIP_STAR_UP_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(EQUIP_ENCHANT_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GEM_STRENGTHEN_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_GAME_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_FESTIVAL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TASK_REFRESH_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PROP_BASE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BUFF_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_PLAYER_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ACTIVITY_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WING_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WING_TRANSMOGRIFICATION_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FINAL_SKILL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FINAL_SKILL_INFO_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FRIEND_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FRIEND_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TRIGGER_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(TOUCH_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DROP_OBJECT_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SCENEOBJECT_APPEAR_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(USE_SKILL_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(USE_SKILL_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CROSS_TEAM_SHOW_LIST_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLOT_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SOUL_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAILY_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DUNGEON_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_MEMBER& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GUILD_NOTICE_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANKING_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(INVESTMENT_OPERATION_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(FACTION_PK_RANK_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(VOID_FIELD_CHANNEL_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(GLOBAL_PROCLAMATION_BAG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(RANK_QUERY_CREATE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(CHAOS_TEAM_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(EGG_ACTIVITY_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DAILY_DRAW_FASHION_CONFIG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(ALCHEMY_MAKE_INFO_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_FORMATION_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(EQUIP_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(UPDATE_EQUIP_INFO_NTF& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PACKAGE_BAG& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(STATE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_STATE_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_DOOR_ALL_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SKILL_COMPONENT_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(SOLDIER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_INFO& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PLAYER_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(OFFLINE_PLAYER_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_APPEAR& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(BATTLEUNIT_APPEAR_LIST& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(DELIVER_PLAYER_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(WRITEBACK_PLAYER_INFO_REQ& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
bool JsonToStruct(PET_FORMATION_ACK& typesStruct, const std::string& StructStr, Json::Value* structJson = NULL);
/*JsonToStruct Function Declare End*/
typedef int (*EnFuncCMessageEncoder)(uint64 playerID, void* data, Net_Packet* packet);
typedef int (*DeFuncCMessageEncoder)(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
typedef union _CRC
{
   uint16 crc16;
   uint8 by[2];
} CRC;
uint16 CRC16(const char* ba, uint32 len);
class CMessageEncoder
{
public:
    CMessageEncoder();
    ~CMessageEncoder();
    static int32 m_reference;
    static uint32 m_TimeCounter;
    static void CreateInstance()
    {
        m_reference++;
        if(m_instance)return;
        CnAssert(m_reference == 1);
        m_instance = CnNew CMessageEncoder;
    }
    static CMessageEncoder* Instance()
    {
        return m_instance;
    }
    static void DestroyInstance()
    {
        m_reference--;
        if(m_reference > 0) return;
        CnAssert(m_reference == 0);
        if(!m_instance) return;
        CnDelete m_instance;
        m_instance = 0;
    }
    int Encode(uint64 playerID, uint32 sessionID, uint32 msgID, void* data, Net_Packet* packet);
    int Decode(uint32 sessionID, Net_Packet* packet, TransferProxy* tranfser);
    EnFuncCMessageEncoder FindEncodeFunc(uint32 msgID);
    DeFuncCMessageEncoder FindDecodeFunc(uint32 msgID);
    bool CheckMsgCount(uint32 sessionId, uint8 count); 
private:
    std::map<uint32, EnFuncCMessageEncoder> m_EncodeFuncMap;
    std::map<uint32, DeFuncCMessageEncoder> m_DecodeFuncMap;
    std::map<uint32, uint8> m_MsgCounterMap;
    static CMessageEncoder* m_instance;
};
#endif
