{% autoescape None %}
/********************************************************************
**       This head file is generated by program,                   **
**            Please do not edit it directly.                    **
********************************************************************/

/*       Version Number: {{ xml.coder['version'] }}          */

#ifndef {{ xml.coder['name'].upper() }}_H_INCLUDE_VERSION_{{ xml.coder['version'] }}
#define {{ xml.coder['name'].upper() }}_H_INCLUDE_VERSION_{{ xml.coder['version'] }}
#include <vector>
#include <string>
#include <map>
#include "sdu.h"

/*Defines Begin*/
{% for d in xml.defines.findAll('define') %}
#define {{ d['name'] }} {% if (d['value'][0]=='-' and d['value'][1].isdigit()) or d['value'].isdigit() or (d['value'][0]=='0' and d['value'][1]=='x') %}{{ d['value'] }}{% else %}"{{ d['value'] }}"{% end %}
{% end %}
#define {{ xml.coder['name'].upper() }}_MSGID_RANGE {{ 1 + max([int(m['id']) for m in xml.messages.findAll('message')]) - min([int(m['id']) for m in xml.messages.findAll('message')]) }}
#define {{ xml.coder['name'].upper() }}_MSGID_OFFSET {{ min([int(m['id']) for m in xml.messages.findAll('message')]) }}
/*Defines End*/

#define NET_MSG_BUFFER_SIZE 81920
#define USERDATA_TYPE_TRANSFER 1
#define USERDATA_TYPE_FUNC 2

class Net_Packet;
class TransferProxy;

enum EN_{{ xml.coder['name'] }}_MessageID
{
    {% for m in xml.messages.findAll('message') %}
    {{ m['name'] }} = {{ m['id'] }},
    {% end %}
};

static unsigned int gClientMsgIDSet[] =
{
    {% for m in xml.messages.findAll('message') %}
    {% if m['dir'] == 'cs' %}
    {{ m['name'] }},
    {% end %}
    {% end %}
    0
};

/*Define Structs and Unions        Begin*/

{% for t in xml.types.findAll('type') %}
typedef struct tag{{ t['name'] }}
{
    // operator =
    tag{{ t['name'] }}& operator=(const tag{{ t['name'] }}& c);
   
    // Clear
    void Clear();
    
    // member
    {% for i in t.findAll(['item','array']) %}
        {% if i.name == 'item' %}
    {{ type_def_item(i['type'], i['name'], i.get('strlen')) }};
        {% else %}
    {{ type_def_array(i['type'], i['name'], i.get('strlen')) }};
        {% end %}
    {% end %}
} {{ t['name'] }};
{% end %}


/*Define Structs and Unions        End*/
typedef void (*EncodeCallback)(uint64 playerID, uint32 sessionID, uint32 msgID, void* data, void* userdata);

/*Encode and Decode Function Declare Begin*/

{% for i in xml.messages.findAll('message') %}
int Encode{{ i['name'] }}(uint64 playerID, void* data, Net_Packet* packet);
int Decode{{ i['name'] }}(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);
{% end %}

/*Encode and Decode Function Declare End*/

typedef int (*EnFuncC{{ xml.coder['name'] }})(uint64 playerID, void* data, Net_Packet* packet);
typedef int (*DeFuncC{{ xml.coder['name'] }})(uint64 playerID, uint32 sessionID, Net_Packet* packet, void* userdata, uint32 type);

class C{{ xml.coder['name'] }}
{
public:
    C{{ xml.coder['name'] }}();
    ~C{{ xml.coder['name'] }}();

    static int32 m_reference;

    static void CreateInstance()
    {
        m_reference++;
        if(m_instance)return;
        CnAssert(m_reference == 1);
        m_instance = CnNew C{{ xml.coder['name'] }};
    }

    static C{{ xml.coder['name'] }}* Instance()
    {
        return m_instance;
    }

    static void DestroyInstance()
    {
        m_reference--;
        if(m_reference > 0) return;
        CnAssert(m_reference == 0);
        if(!m_instance) return;
        CnDelete m_instance;
        m_instance = 0;
    }
    int Encode(uint64 playerID, uint32 sessionID, uint32 msgID, void* data, Net_Packet* packet);
    int Decode(uint32 sessionID, Net_Packet* packet, TransferProxy* tranfser);
    EnFuncC{{ xml.coder['name'] }} FindEncodeFunc(uint32 msgID);
    DeFuncC{{ xml.coder['name'] }} FindDecodeFunc(uint32 msgID);
private:
    std::map<uint32, EnFuncC{{ xml.coder['name'] }}> m_EncodeFuncMap;
    std::map<uint32, DeFuncC{{ xml.coder['name'] }}> m_DecodeFuncMap;
    static C{{ xml.coder['name'] }}* m_instance;
};

#endif

